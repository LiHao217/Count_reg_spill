	.text
	.file	"mcf_test.c"
	.globl	global_opt              # -- Begin function global_opt
	.p2align	4, 0x90
	.type	global_opt,@function
global_opt:                             # @global_opt
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$72, %rsp
	.cfi_def_cfa_offset 128
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	$4000, %eax             # imm = 0xFA0
	movq	$-1, %rbx
	vmovq	%rax, %xmm0
	vmovdqu	%ymm0, 32(%rsp)         # 32-byte Spill
	.p2align	4, 0x90
.LBB0_1:                                # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB0_4 Depth 2
                                        #     Child Loop BB0_15 Depth 2
                                        #     Child Loop BB0_23 Depth 2
                                        #     Child Loop BB0_26 Depth 2
                                        #     Child Loop BB0_30 Depth 2
                                        #     Child Loop BB0_42 Depth 2
                                        #     Child Loop BB0_44 Depth 2
                                        #     Child Loop BB0_48 Depth 2
                                        #     Child Loop BB0_61 Depth 2
                                        #     Child Loop BB0_63 Depth 2
                                        #     Child Loop BB0_67 Depth 2
                                        #     Child Loop BB0_79 Depth 2
                                        #     Child Loop BB0_83 Depth 2
                                        #     Child Loop BB0_88 Depth 2
                                        #     Child Loop BB0_93 Depth 2
                                        #     Child Loop BB0_105 Depth 2
	movq	net+424(%rip), %rsi
	testq	%rbx, %rbx
	je	.LBB0_113
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB0_1 Depth=1
	movl	$.L.str, %edi
	xorl	%eax, %eax
	vzeroupper
	callq	printf
	movl	$1, %edi
	movl	$8, %esi
	movl	$1, %ebx
	callq	calloc
	movl	$1, %edi
	movl	$8, %esi
	movq	%rax, perm_p(%rip)
	callq	calloc
	movl	$1, %edi
	movl	$8, %esi
	movq	%rax, opt_basket(%rip)
	callq	calloc
	movl	$4261, %edi             # imm = 0x10A5
	movl	$32, %esi
	movq	%rax, basket_sizes(%rip)
	callq	calloc
	movq	%rax, basket(%rip)
	movq	net+640(%rip), %rax
	movl	$net, %edi
	movl	$1, %esi
	imulq	net+632(%rip), %rax
	leaq	(%rax,%rax,8), %rax
	shlq	$3, %rax
	addq	net+568(%rip), %rax
	movq	%rax, full_group_end_arc(%rip)
	callq	master
	movq	net+552(%rip), %rbp
	movq	net+560(%rip), %r12
	addq	$104, %rbp
	cmpq	%r12, %rbp
	jae	.LBB0_13
# %bb.3:                                # %for.body.lr.ph.i25.i
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	net+512(%rip), %r14
	movq	net+600(%rip), %rcx
	movq	net+592(%rip), %r13
	movq	%r14, %r15
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	negq	%r15
	.p2align	4, 0x90
.LBB0_4:                                # %for.body.i27.i
                                        #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	48(%rbp), %rax
	movq	80(%rbp), %rbx
	cmpq	%r13, %rax
	jb	.LBB0_10
# %bb.5:                                # %for.body.i27.i
                                        #   in Loop: Header=BB0_4 Depth=2
	cmpq	%rcx, %rax
	jae	.LBB0_10
# %bb.6:                                # %if.then.i.i
                                        #   in Loop: Header=BB0_4 Depth=2
	movq	%rbx, %rax
	negq	%rax
	cmovlq	%rbx, %rax
	cmpq	%r14, %rax
	jle	.LBB0_8
# %bb.7:                                # %if.then7.i.i
                                        #   in Loop: Header=BB0_4 Depth=2
	movl	$.L.str.19, %edi
	xorl	%eax, %eax
	callq	printf
	movl	96(%rbp), %esi
	movl	$.L.str.20, %edi
	movq	%rbx, %rdx
	xorl	%eax, %eax
	callq	printf
	movq	24(%rsp), %rcx          # 8-byte Reload
	jmp	.LBB0_8
	.p2align	4, 0x90
.LBB0_10:                               # %if.else.i.i
                                        #   in Loop: Header=BB0_4 Depth=2
	cmpq	%r15, %rbx
	jl	.LBB0_12
# %bb.11:                               # %if.else.i.i
                                        #   in Loop: Header=BB0_4 Depth=2
	leaq	-1(%rbx), %rax
	cmpq	%r14, %rax
	jg	.LBB0_12
.LBB0_8:                                # %for.inc.i30.i
                                        #   in Loop: Header=BB0_4 Depth=2
	addq	$104, %rbp
	cmpq	%r12, %rbp
	jb	.LBB0_4
# %bb.9:                                #   in Loop: Header=BB0_1 Depth=1
	movl	$1, %ebx
	jmp	.LBB0_13
.LBB0_12:                               # %if.then15.i.i
                                        #   in Loop: Header=BB0_1 Depth=1
	movl	$.L.str.19, %edi
	xorl	%eax, %eax
	callq	printf
	movl	$.L.str.21, %edi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	callq	printf
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB0_13:                               # %primal_feasible.exit.i
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	%rbx, net+488(%rip)
	movq	net+576(%rip), %rax
	movq	net+568(%rip), %rcx
	cmpq	%rax, %rcx
	jae	.LBB0_21
# %bb.14:                               # %for.body.i.i.preheader
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	net+512(%rip), %rdx
	movq	%rdx, %rsi
	negq	%rsi
	.p2align	4, 0x90
.LBB0_15:                               # %for.body.i.i
                                        #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	16(%rcx), %rbp
	movq	24(%rcx), %r9
	movq	8(%rcx), %rdi
	movswl	32(%rcx), %r8d
	subq	(%rbp), %rdi
	addq	(%r9), %rdi
	cmpl	$2, %r8d
	jae	.LBB0_16
# %bb.19:                               # %sw.bb.i.i
                                        #   in Loop: Header=BB0_15 Depth=2
	cmpq	%rsi, %rdi
	jge	.LBB0_18
	jmp	.LBB0_20
	.p2align	4, 0x90
.LBB0_16:                               # %for.body.i.i
                                        #   in Loop: Header=BB0_15 Depth=2
	jne	.LBB0_18
# %bb.17:                               # %sw.bb5.i.i
                                        #   in Loop: Header=BB0_15 Depth=2
	cmpq	%rdx, %rdi
	jg	.LBB0_20
.LBB0_18:                               # %for.inc.i.i
                                        #   in Loop: Header=BB0_15 Depth=2
	addq	$72, %rcx
	cmpq	%rax, %rcx
	jb	.LBB0_15
	jmp	.LBB0_21
	.p2align	4, 0x90
.LBB0_20:                               # %DUAL_INFEAS.i.i
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	stderr(%rip), %rcx
	movl	$.L.str.22, %edi
	movl	$22, %esi
	movl	$1, %edx
	callq	fwrite
	movq	stderr(%rip), %rcx
	movl	$.L.str.23, %edi
	movl	$22, %esi
	movl	$1, %edx
	callq	fwrite
.LBB0_21:                               # %primal_net_simplex.exit
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	perm_p(%rip), %rdi
	movb	$0, opt(%rip)
	callq	free
	movq	opt_basket(%rip), %rdi
	callq	free
	movq	basket_sizes(%rip), %rdi
	callq	free
	movq	basket(%rip), %rdi
	callq	free
	movq	net+608(%rip), %rsi
	movl	$.L.str.1, %edi
	xorl	%eax, %eax
	callq	printf
	movq	net+424(%rip), %r12
	movq	net+568(%rip), %rbp
	testq	%r12, %r12
	jle	.LBB0_24
# %bb.22:                               # %for.body.i.preheader
                                        #   in Loop: Header=BB0_1 Depth=1
	leaq	56(%rbp), %rax
	movq	%r12, %rcx
	.p2align	4, 0x90
.LBB0_23:                               # %for.body.i
                                        #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%edx, %edx
	cmpw	$2, -24(%rax)
	sete	%dl
	movq	%rdx, (%rax)
	addq	$72, %rax
	decq	%rcx
	jne	.LBB0_23
.LBB0_24:                               # %for.end.i
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	net+400(%rip), %r13
	movq	net+552(%rip), %rbx
	testq	%r13, %r13
	jle	.LBB0_27
# %bb.25:                               # %for.body14.i.preheader
                                        #   in Loop: Header=BB0_1 Depth=1
	leaq	184(%rbx), %rax
	movq	%r13, %rcx
	.p2align	4, 0x90
.LBB0_26:                               # %for.body14.i
                                        #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-32(%rax), %rdx
	movq	(%rax), %rsi
	addq	$104, %rax
	decq	%rcx
	movq	%rsi, 56(%rdx)
	jne	.LBB0_26
.LBB0_27:                               # %for.cond25.preheader.i
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	net+528(%rip), %r8
	testq	%r12, %r12
	jle	.LBB0_28
# %bb.29:                               # %for.body30.i.preheader
                                        #   in Loop: Header=BB0_1 Depth=1
	leaq	8(%rbp), %rdx
	movq	%r12, %rdi
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	.p2align	4, 0x90
.LBB0_30:                               # %for.body30.i
                                        #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	$0, 48(%rdx)
	je	.LBB0_37
# %bb.31:                               # %if.then34.i
                                        #   in Loop: Header=BB0_30 Depth=2
	movq	8(%rdx), %rsi
	movl	96(%rsi), %esi
	testl	%esi, %esi
	js	.LBB0_32
# %bb.35:                               # %if.then44.i
                                        #   in Loop: Header=BB0_30 Depth=2
	movq	(%rdx), %rsi
	jne	.LBB0_34
# %bb.36:                               # %if.then50.i
                                        #   in Loop: Header=BB0_30 Depth=2
	addq	%rax, %rsi
	incq	%rcx
	subq	%r8, %rsi
	movq	%rsi, %rax
	jmp	.LBB0_37
	.p2align	4, 0x90
.LBB0_32:                               # %land.lhs.true.i
                                        #   in Loop: Header=BB0_30 Depth=2
	movq	16(%rdx), %rsi
	cmpl	$0, 96(%rsi)
	jg	.LBB0_37
# %bb.33:                               # %if.then44.thread.i
                                        #   in Loop: Header=BB0_30 Depth=2
	movq	(%rdx), %rsi
.LBB0_34:                               # %if.else54.i
                                        #   in Loop: Header=BB0_30 Depth=2
	addq	%rsi, %rax
.LBB0_37:                               # %for.inc62.i
                                        #   in Loop: Header=BB0_30 Depth=2
	addq	$72, %rdx
	decq	%rdi
	jne	.LBB0_30
	jmp	.LBB0_38
	.p2align	4, 0x90
.LBB0_28:                               #   in Loop: Header=BB0_1 Depth=1
	xorl	%ecx, %ecx
	xorl	%eax, %eax
.LBB0_38:                               # %flow_cost.exit
                                        #   in Loop: Header=BB0_1 Depth=1
	vcvtsi2sdq	%rcx, %xmm5, %xmm1
	vcvtsi2sdq	%r8, %xmm5, %xmm2
	vcvtsi2sdq	%rax, %xmm5, %xmm0
	movl	$.L.str.2, %edi
	movb	$1, %al
	vfmadd231sd	%xmm2, %xmm1, %xmm0 # xmm0 = (xmm1 * xmm2) + xmm0
	callq	printf
	movq	net+440(%rip), %rsi
	testq	%rsi, %rsi
	je	.LBB0_91
# %bb.39:                               # %if.then
                                        #   in Loop: Header=BB0_1 Depth=1
	movabsq	$2361183241434822607, %rcx # imm = 0x20C49BA5E353F7CF
	leaq	-1(%r12), %rax
	movl	$4000, %r10d            # imm = 0xFA0
	vpcmpeqd	%ymm4, %ymm4, %ymm4
	movq	$4000, net+640(%rip)    # imm = 0xFA0
	imulq	%rcx
	movq	%rcx, %rbx
	movq	%r12, %rax
	movq	%rdx, %rcx
	movq	%rdx, %rdi
	imulq	%rbx
	movq	%rdx, %rax
	sarq	$9, %rdx
	shrq	$63, %rdi
	sarq	$9, %rcx
	shrq	$63, %rax
	leaq	1(%rcx,%rdi), %r9
	addq	%rax, %rdx
	movq	%r9, net+624(%rip)
	imulq	$4000, %rdx, %rax       # imm = 0xFA0
	movq	%r12, %rdx
	subq	%rax, %rdx
	leaq	(%rdx,%r9), %r11
	addq	$-4000, %r11            # imm = 0xF060
	movq	%r11, net+632(%rip)
	js	.LBB0_40
# %bb.46:                               # %while.end.i
                                        #   in Loop: Header=BB0_1 Depth=1
	testq	%rsi, %rsi
	jg	.LBB0_47
	jmp	.LBB0_109
	.p2align	4, 0x90
.LBB0_91:                               # %if.else
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	net+584(%rip), %rax
	testq	%r13, %r13
	js	.LBB0_103
# %bb.92:                               # %for.body.i.i63.preheader
                                        #   in Loop: Header=BB0_1 Depth=1
	incq	%r13
	addq	$64, %rbx
	.p2align	4, 0x90
.LBB0_93:                               # %for.body.i.i63
                                        #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-16(%rbx), %rcx
	testq	%rcx, %rcx
	je	.LBB0_96
# %bb.94:                               # %land.lhs.true.i.i
                                        #   in Loop: Header=BB0_93 Depth=2
	movslq	(%rcx), %rcx
	testq	%rcx, %rcx
	js	.LBB0_96
# %bb.95:                               # %if.then.i.i68
                                        #   in Loop: Header=BB0_93 Depth=2
	leaq	(%rcx,%rcx,8), %rcx
	leaq	(%rax,%rcx,8), %rcx
	movq	%rcx, -16(%rbx)
.LBB0_96:                               # %if.end.i.i70
                                        #   in Loop: Header=BB0_93 Depth=2
	movq	(%rbx), %rcx
	testq	%rcx, %rcx
	je	.LBB0_99
# %bb.97:                               # %land.lhs.true7.i.i
                                        #   in Loop: Header=BB0_93 Depth=2
	movslq	(%rcx), %rcx
	testq	%rcx, %rcx
	js	.LBB0_99
# %bb.98:                               # %if.then12.i.i
                                        #   in Loop: Header=BB0_93 Depth=2
	leaq	(%rcx,%rcx,8), %rcx
	leaq	(%rax,%rcx,8), %rcx
	movq	%rcx, (%rbx)
.LBB0_99:                               # %if.end19.i.i
                                        #   in Loop: Header=BB0_93 Depth=2
	movq	-8(%rbx), %rcx
	testq	%rcx, %rcx
	je	.LBB0_102
# %bb.100:                              # %land.lhs.true21.i.i
                                        #   in Loop: Header=BB0_93 Depth=2
	movslq	(%rcx), %rcx
	testq	%rcx, %rcx
	js	.LBB0_102
# %bb.101:                              # %if.then26.i.i
                                        #   in Loop: Header=BB0_93 Depth=2
	leaq	(%rcx,%rcx,8), %rcx
	leaq	(%rax,%rcx,8), %rcx
	movq	%rcx, -8(%rbx)
.LBB0_102:                              # %for.inc.i.i75
                                        #   in Loop: Header=BB0_93 Depth=2
	addq	$104, %rbx
	decq	%r13
	jne	.LBB0_93
.LBB0_103:                              # %refreshArcPointers.exit.i
                                        #   in Loop: Header=BB0_1 Depth=1
	testq	%r12, %r12
	jle	.LBB0_108
# %bb.104:                              # %for.body.i77.preheader
                                        #   in Loop: Header=BB0_1 Depth=1
	xorl	%ecx, %ecx
	movq	%r12, %rdx
	.p2align	4, 0x90
.LBB0_105:                              # %for.body.i77
                                        #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	(%rbp,%rcx), %rsi
	testq	%rsi, %rsi
	js	.LBB0_107
# %bb.106:                              # %if.end.i
                                        #   in Loop: Header=BB0_105 Depth=2
	movq	64(%rbp,%rcx), %rdi
	leaq	(%rsi,%rsi,8), %rsi
	movq	%rdi, 64(%rax,%rsi,8)
	vmovupd	(%rbp,%rcx), %ymm0
	vmovupd	32(%rbp,%rcx), %ymm1
	vmovupd	%ymm1, 32(%rax,%rsi,8)
	vmovupd	%ymm0, (%rax,%rsi,8)
	movq	net+568(%rip), %rbp
.LBB0_107:                              # %for.inc.i
                                        #   in Loop: Header=BB0_105 Depth=2
	addq	$72, %rcx
	decq	%rdx
	jne	.LBB0_105
.LBB0_108:                              # %refreshPositions.exit
                                        #   in Loop: Header=BB0_1 Depth=1
	leaq	(%r12,%r12,8), %rcx
	movq	%rax, net+568(%rip)
	movq	%rbp, net+584(%rip)
	leaq	(%rax,%rcx,8), %rax
	movq	%rax, net+576(%rip)
	jmp	.LBB0_109
	.p2align	4, 0x90
.LBB0_40:                               # %while.body.i.preheader
                                        #   in Loop: Header=BB0_1 Depth=1
	addq	%rdi, %rcx
	movl	$3998, %eax             # imm = 0xF9E
	movl	$4000, %r10d            # imm = 0xFA0
	addq	%rcx, %rdx
	subq	%rdx, %rax
	xorl	%edx, %edx
	divq	%r9
	incq	%rax
	cmpq	$16, %rax
	jb	.LBB0_44
# %bb.41:                               # %vector.ph196
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	%rax, %rcx
	vmovdqu	32(%rsp), %ymm1         # 32-byte Reload
	vxorpd	%xmm0, %xmm0, %xmm0
	vxorpd	%xmm2, %xmm2, %xmm2
	vpxor	%xmm3, %xmm3, %xmm3
	andq	$-16, %rcx
	movq	%rcx, %rdx
	imulq	%r9, %rdx
	addq	%rdx, %r11
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB0_42:                               # %vector.body192
                                        #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addq	$16, %rdx
	vpaddq	%ymm4, %ymm1, %ymm1
	vpaddq	%ymm4, %ymm0, %ymm0
	vpaddq	%ymm4, %ymm2, %ymm2
	vpaddq	%ymm4, %ymm3, %ymm3
	cmpq	%rcx, %rdx
	jne	.LBB0_42
# %bb.43:                               # %middle.block193
                                        #   in Loop: Header=BB0_1 Depth=1
	vpaddq	%ymm1, %ymm0, %ymm0
	cmpq	%rcx, %rax
	vpaddq	%ymm0, %ymm2, %ymm0
	vpaddq	%ymm0, %ymm3, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpaddq	%ymm1, %ymm0, %ymm0
	vpshufd	$78, %xmm0, %xmm1       # xmm1 = xmm0[2,3,0,1]
	vpaddq	%xmm1, %xmm0, %xmm0
	vmovq	%xmm0, %r10
	je	.LBB0_45
	.p2align	4, 0x90
.LBB0_44:                               # %while.body.i
                                        #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	decq	%r10
	addq	%r9, %r11
	js	.LBB0_44
.LBB0_45:                               # %while.cond.while.end_crit_edge.i
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	%r11, net+632(%rip)
	movq	%r10, net+640(%rip)
	testq	%rsi, %rsi
	jle	.LBB0_109
.LBB0_47:                               # %for.body.lr.ph.i
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	%r11, %r13
	movq	%r12, %rcx
	leaq	-1(%r10), %r14
	imulq	%r10, %r13
	subq	%rsi, %rcx
	xorl	%esi, %esi
	movq	%rcx, %rdi
	.p2align	4, 0x90
.LBB0_48:                               # %for.body.i40
                                        #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rdi, %rax
	movq	%rsi, %r8
	cqto
	idivq	%r9
	movq	%rdx, %rsi
	subq	%r11, %rsi
	jle	.LBB0_50
# %bb.49:                               # %if.then.i.i43
                                        #   in Loop: Header=BB0_48 Depth=2
	imulq	%r14, %rsi
	addq	%r13, %rsi
	jmp	.LBB0_51
	.p2align	4, 0x90
.LBB0_50:                               # %if.else.i.i44
                                        #   in Loop: Header=BB0_48 Depth=2
	imulq	%r10, %rdx
	movq	%rdx, %rsi
.LBB0_51:                               # %getArcPosition.exit.i
                                        #   in Loop: Header=BB0_48 Depth=2
	addq	%rax, %rsi
	movq	$-2, %rdx
	leaq	(%rsi,%rsi,8), %rsi
	movzwl	32(%rbp,%rsi,8), %ebx
	leaq	(%rbp,%rsi,8), %r15
	testw	%bx, %bx
	je	.LBB0_54
# %bb.52:                               # %getArcPosition.exit.i
                                        #   in Loop: Header=BB0_48 Depth=2
	cmpw	$1, %bx
	jne	.LBB0_56
# %bb.53:                               # %if.then21.i
                                        #   in Loop: Header=BB0_48 Depth=2
	movq	16(%rbp,%rsi,8), %rbx
	movq	8(%rbp,%rsi,8), %rdx
	movq	24(%rbp,%rsi,8), %rsi
	subq	(%rbx), %rdx
	addq	(%rsi), %rdx
	jmp	.LBB0_56
	.p2align	4, 0x90
.LBB0_54:                               # %if.then30.i
                                        #   in Loop: Header=BB0_48 Depth=2
	movq	16(%rbp,%rsi,8), %rbx
	cmpq	%r15, 48(%rbx)
	je	.LBB0_56
# %bb.55:                               # %if.then34.i49
                                        #   in Loop: Header=BB0_48 Depth=2
	movq	24(%rbp,%rsi,8), %rsi
	movq	%r15, 48(%rsi)
.LBB0_56:                               # %if.end38.i
                                        #   in Loop: Header=BB0_48 Depth=2
	movq	%rdx, %rbx
	testq	%rdx, %rdx
	movl	%ecx, %eax
	movl	$-1, %esi
	notq	%rbx
	cmovnsl	%esi, %eax
	shrq	$63, %rdx
	incq	%rdi
	shrq	$63, %rbx
	addq	%rdx, %rcx
	cmpq	%r12, %rdi
	movl	%eax, (%r15)
	leaq	(%rbx,%r8), %rsi
	jl	.LBB0_48
# %bb.57:                               # %if.end48.i
                                        #   in Loop: Header=BB0_1 Depth=1
	testq	%rsi, %rsi
	je	.LBB0_109
# %bb.58:                               # %if.then50.i51
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	%rsi, %rax
	movq	%r12, %rbp
	movabsq	$2361183241434822607, %rcx # imm = 0x20C49BA5E353F7CF
	subq	%rsi, net+440(%rip)
	addq	%rsi, net+448(%rip)
	vpcmpeqd	%ymm4, %ymm4, %ymm4
	movq	$4000, net+640(%rip)    # imm = 0xFA0
	notq	%rax
	subq	%rsi, %rbp
	movq	%rcx, %rdi
	addq	%r12, %rax
	imulq	%rcx
	movq	%rbp, %rax
	movq	%rdx, %rcx
	movq	%rdx, %r10
	imulq	%rdi
	movq	%rdx, %rax
	sarq	$9, %rdx
	shrq	$63, %r10
	sarq	$9, %rcx
	shrq	$63, %rax
	leaq	1(%rcx,%r10), %r9
	addq	%rax, %rdx
	movq	%r9, net+624(%rip)
	imulq	$4000, %rdx, %rax       # imm = 0xFA0
	movq	%rax, %rdx
	negq	%rdx
	leaq	-4000(%rbp,%rdx), %rdx
	subq	%rax, %rbp
	cmovneq	%rdx, %rbp
	movq	%rbp, %rdi
	addq	%r9, %rdi
	movq	%rdi, net+632(%rip)
	jns	.LBB0_65
# %bb.59:                               # %while.body82.i.preheader
                                        #   in Loop: Header=BB0_1 Depth=1
	addq	%r10, %rcx
	movq	$-2, %rax
	xorl	%edx, %edx
	addq	%rcx, %rbp
	subq	%rbp, %rax
	divq	%r9
	movl	$4000, %edx             # imm = 0xFA0
	incq	%rax
	cmpq	$16, %rax
	jb	.LBB0_63
# %bb.60:                               # %vector.ph
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	%rax, %rcx
	vmovdqu	32(%rsp), %ymm1         # 32-byte Reload
	vxorpd	%xmm0, %xmm0, %xmm0
	vxorpd	%xmm2, %xmm2, %xmm2
	vpxor	%xmm3, %xmm3, %xmm3
	andq	$-16, %rcx
	movq	%rcx, %rdx
	imulq	%r9, %rdx
	addq	%rdx, %rdi
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB0_61:                               # %vector.body
                                        #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addq	$16, %rdx
	vpaddq	%ymm4, %ymm1, %ymm1
	vpaddq	%ymm4, %ymm0, %ymm0
	vpaddq	%ymm4, %ymm2, %ymm2
	vpaddq	%ymm4, %ymm3, %ymm3
	cmpq	%rcx, %rdx
	jne	.LBB0_61
# %bb.62:                               # %middle.block
                                        #   in Loop: Header=BB0_1 Depth=1
	vpaddq	%ymm1, %ymm0, %ymm0
	cmpq	%rcx, %rax
	vpaddq	%ymm0, %ymm2, %ymm0
	vpaddq	%ymm0, %ymm3, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpaddq	%ymm1, %ymm0, %ymm0
	vpshufd	$78, %xmm0, %xmm1       # xmm1 = xmm0[2,3,0,1]
	vpaddq	%xmm1, %xmm0, %xmm0
	vmovq	%xmm0, %rdx
	je	.LBB0_64
	.p2align	4, 0x90
.LBB0_63:                               # %while.body82.i
                                        #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	decq	%rdx
	addq	%r9, %rdi
	js	.LBB0_63
.LBB0_64:                               # %while.cond78.while.end89_crit_edge.i
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	%rdi, net+632(%rip)
	movq	%rdx, net+640(%rip)
.LBB0_65:                               # %while.end89.i
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	net+400(%rip), %rcx
	movq	net+584(%rip), %rax
	vxorpd	%xmm2, %xmm2, %xmm2
	testq	%rcx, %rcx
	js	.LBB0_77
# %bb.66:                               # %for.body.lr.ph.i.i.i
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	net+552(%rip), %rdx
	incq	%rcx
	addq	$64, %rdx
	.p2align	4, 0x90
.LBB0_67:                               # %for.body.i.i.i
                                        #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-16(%rdx), %rdi
	testq	%rdi, %rdi
	je	.LBB0_70
# %bb.68:                               # %land.lhs.true.i.i.i
                                        #   in Loop: Header=BB0_67 Depth=2
	movslq	(%rdi), %rdi
	testq	%rdi, %rdi
	js	.LBB0_70
# %bb.69:                               # %if.then.i.i.i
                                        #   in Loop: Header=BB0_67 Depth=2
	leaq	(%rdi,%rdi,8), %rdi
	leaq	(%rax,%rdi,8), %rdi
	movq	%rdi, -16(%rdx)
.LBB0_70:                               # %if.end.i.i.i
                                        #   in Loop: Header=BB0_67 Depth=2
	movq	(%rdx), %rdi
	testq	%rdi, %rdi
	je	.LBB0_73
# %bb.71:                               # %land.lhs.true7.i.i.i
                                        #   in Loop: Header=BB0_67 Depth=2
	movslq	(%rdi), %rdi
	testq	%rdi, %rdi
	js	.LBB0_73
# %bb.72:                               # %if.then12.i.i.i
                                        #   in Loop: Header=BB0_67 Depth=2
	leaq	(%rdi,%rdi,8), %rdi
	leaq	(%rax,%rdi,8), %rdi
	movq	%rdi, (%rdx)
.LBB0_73:                               # %if.end19.i.i.i
                                        #   in Loop: Header=BB0_67 Depth=2
	movq	-8(%rdx), %rdi
	testq	%rdi, %rdi
	je	.LBB0_76
# %bb.74:                               # %land.lhs.true21.i.i.i
                                        #   in Loop: Header=BB0_67 Depth=2
	movslq	(%rdi), %rdi
	testq	%rdi, %rdi
	js	.LBB0_76
# %bb.75:                               # %if.then26.i.i.i
                                        #   in Loop: Header=BB0_67 Depth=2
	leaq	(%rdi,%rdi,8), %rdi
	leaq	(%rax,%rdi,8), %rdi
	movq	%rdi, -8(%rdx)
.LBB0_76:                               # %for.inc.i.i.i
                                        #   in Loop: Header=BB0_67 Depth=2
	addq	$104, %rdx
	decq	%rcx
	jne	.LBB0_67
.LBB0_77:                               # %refreshArcPointers.exit.i.i
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	net+568(%rip), %rcx
	testq	%r12, %r12
	jle	.LBB0_82
# %bb.78:                               # %for.body.i163.i.preheader
                                        #   in Loop: Header=BB0_1 Depth=1
	xorl	%edx, %edx
	movq	%r12, %r9
	.p2align	4, 0x90
.LBB0_79:                               # %for.body.i163.i
                                        #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	(%rcx,%rdx), %rbp
	testq	%rbp, %rbp
	js	.LBB0_81
# %bb.80:                               # %if.end.i.i
                                        #   in Loop: Header=BB0_79 Depth=2
	movq	64(%rcx,%rdx), %rdi
	leaq	(%rbp,%rbp,8), %rbp
	movq	%rdi, 64(%rax,%rbp,8)
	vmovupd	(%rcx,%rdx), %ymm0
	vmovupd	32(%rcx,%rdx), %ymm1
	vmovupd	%ymm1, 32(%rax,%rbp,8)
	vmovupd	%ymm0, (%rax,%rbp,8)
	movq	net+568(%rip), %rcx
.LBB0_81:                               # %for.inc.i.i54
                                        #   in Loop: Header=BB0_79 Depth=2
	addq	$72, %rdx
	decq	%r9
	jne	.LBB0_79
.LBB0_82:                               # %refreshPositions.exit.i
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	%rax, net+568(%rip)
	movq	%rcx, net+584(%rip)
	leaq	(%r12,%r12,8), %rcx
	movq	%rsi, %rbp
	leaq	(%rax,%rcx,8), %rdi
	movq	net+424(%rip), %rcx
	negq	%rbp
	leaq	(%rbp,%rbp,8), %rbp
	leaq	(%rdi,%rbp,8), %rdi
	movq	%rcx, %rdx
	subq	%rsi, %rdx
	movq	%rdx, net+424(%rip)
	movq	%rdi, net+576(%rip)
	movq	net+552(%rip), %rdi
	movq	net+560(%rip), %rbp
	cmpq	%rbp, %rdi
	jae	.LBB0_85
	.p2align	4, 0x90
.LBB0_83:                               # %for.body.i.i56
                                        #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovupd	%xmm2, 56(%rdi)
	addq	$104, %rdi
	cmpq	%rbp, %rdi
	jb	.LBB0_83
.LBB0_85:                               # %for.end.i.i57
                                        #   in Loop: Header=BB0_1 Depth=1
	testq	%rdx, %rdx
	jle	.LBB0_89
# %bb.86:                               # %for.body4.i.preheader.i
                                        #   in Loop: Header=BB0_1 Depth=1
	movq	16(%rax), %rdi
	cmpq	$1, %rdx
	movq	56(%rdi), %rbp
	movq	%rbp, 40(%rax)
	movq	%rax, 56(%rdi)
	movq	24(%rax), %rdi
	movq	64(%rdi), %rbp
	movq	%rbp, 48(%rax)
	movq	%rax, 64(%rdi)
	je	.LBB0_89
# %bb.87:                               # %for.body4.for.body4_crit_edge.i.i.preheader
                                        #   in Loop: Header=BB0_1 Depth=1
	decq	%rcx
	addq	%r8, %rbx
	addq	$72, %rax
	subq	%rbx, %rcx
	.p2align	4, 0x90
.LBB0_88:                               # %for.body4.for.body4_crit_edge.i.i
                                        #   Parent Loop BB0_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	16(%rax), %rdx
	movq	56(%rdx), %rdi
	movq	%rdi, 40(%rax)
	movq	%rax, 56(%rdx)
	movq	24(%rax), %rdx
	movq	64(%rdx), %rdi
	movq	%rdi, 48(%rax)
	movq	%rax, 64(%rdx)
	addq	$72, %rax
	decq	%rcx
	jne	.LBB0_88
.LBB0_89:                               # %suspend_impl.exit
                                        #   in Loop: Header=BB0_1 Depth=1
	testq	%rsi, %rsi
	js	.LBB0_112
# %bb.90:                               # %if.then10
                                        #   in Loop: Header=BB0_1 Depth=1
	movl	$.L.str.4, %edi
	xorl	%eax, %eax
	vzeroupper
	callq	printf
.LBB0_109:                              # %if.end14
                                        #   in Loop: Header=BB0_1 Depth=1
	movl	$net, %edi
	vzeroupper
	callq	price_out_impl
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB0_111
# %bb.110:                              # %if.then17
                                        #   in Loop: Header=BB0_1 Depth=1
	movl	$.L.str.5, %edi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	callq	printf
.LBB0_111:                              # %if.end19
                                        #   in Loop: Header=BB0_1 Depth=1
	testq	%rbx, %rbx
	jns	.LBB0_1
.LBB0_112:                              # %if.then7
	movl	$.Lstr.34, %edi
	vzeroupper
	callq	puts
	movl	$-1, %edi
	callq	exit
.LBB0_113:                              # %while.end
	movq	net+568(%rip), %rax
	testq	%rsi, %rsi
	jle	.LBB0_116
# %bb.114:                              # %for.body.i89.preheader
	leaq	56(%rax), %rcx
	movq	%rsi, %rdx
	.p2align	4, 0x90
.LBB0_115:                              # %for.body.i89
                                        # =>This Inner Loop Header: Depth=1
	xorl	%edi, %edi
	cmpw	$2, -24(%rcx)
	sete	%dil
	movq	%rdi, (%rcx)
	addq	$72, %rcx
	decq	%rdx
	jne	.LBB0_115
.LBB0_116:                              # %for.end.i91
	movq	net+400(%rip), %rcx
	testq	%rcx, %rcx
	jle	.LBB0_119
# %bb.117:                              # %for.body14.i100.preheader
	movq	net+552(%rip), %rdx
	addq	$184, %rdx
	.p2align	4, 0x90
.LBB0_118:                              # %for.body14.i100
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rdx), %rdi
	movq	(%rdx), %rbp
	addq	$104, %rdx
	decq	%rcx
	movq	%rbp, 56(%rdi)
	jne	.LBB0_118
.LBB0_119:                              # %for.cond25.preheader.i92
	movq	net+528(%rip), %rcx
	testq	%rsi, %rsi
	jle	.LBB0_120
# %bb.121:                              # %for.body30.i106.preheader
	addq	$8, %rax
	xorl	%ebp, %ebp
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB0_122:                              # %for.body30.i106
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, 48(%rax)
	je	.LBB0_129
# %bb.123:                              # %if.then34.i110
                                        #   in Loop: Header=BB0_122 Depth=1
	movq	8(%rax), %rdi
	movl	96(%rdi), %edi
	testl	%edi, %edi
	js	.LBB0_124
# %bb.127:                              # %if.then44.i119
                                        #   in Loop: Header=BB0_122 Depth=1
	movq	(%rax), %rdi
	jne	.LBB0_126
# %bb.128:                              # %if.then50.i123
                                        #   in Loop: Header=BB0_122 Depth=1
	addq	%rbp, %rdi
	incq	%rdx
	subq	%rcx, %rdi
	movq	%rdi, %rbp
	jmp	.LBB0_129
	.p2align	4, 0x90
.LBB0_124:                              # %land.lhs.true.i114
                                        #   in Loop: Header=BB0_122 Depth=1
	movq	16(%rax), %rdi
	cmpl	$0, 96(%rdi)
	jg	.LBB0_129
# %bb.125:                              # %if.then44.thread.i116
                                        #   in Loop: Header=BB0_122 Depth=1
	movq	(%rax), %rdi
.LBB0_126:                              # %if.else54.i125
                                        #   in Loop: Header=BB0_122 Depth=1
	addq	%rdi, %rbp
.LBB0_129:                              # %for.inc62.i130
                                        #   in Loop: Header=BB0_122 Depth=1
	addq	$72, %rax
	decq	%rsi
	jne	.LBB0_122
	jmp	.LBB0_130
.LBB0_120:
	xorl	%edx, %edx
	xorl	%ebp, %ebp
.LBB0_130:                              # %flow_cost.exit138
	vcvtsi2sdq	%rdx, %xmm5, %xmm1
	vcvtsi2sdq	%rcx, %xmm5, %xmm2
	vcvtsi2sdq	%rbp, %xmm5, %xmm0
	movl	$.L.str.6, %edi
	movb	$1, %al
	vfmadd231sd	%xmm2, %xmm1, %xmm0 # xmm0 = (xmm1 * xmm2) + xmm0
	vmovsd	%xmm0, net+536(%rip)
	vzeroupper
	callq	printf
	xorl	%eax, %eax
	addq	$72, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end0:
	.size	global_opt, .Lfunc_end0-global_opt
	.cfi_endproc
                                        # -- End function
	.globl	primal_net_simplex      # -- Begin function primal_net_simplex
	.p2align	4, 0x90
	.type	primal_net_simplex,@function
primal_net_simplex:                     # @primal_net_simplex
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	%rdi, %r14
	movl	$1, %edi
	movl	$8, %esi
	callq	calloc
	movl	$1, %edi
	movl	$8, %esi
	movq	%rax, perm_p(%rip)
	callq	calloc
	movl	$1, %edi
	movl	$8, %esi
	movq	%rax, opt_basket(%rip)
	callq	calloc
	movl	$4261, %edi             # imm = 0x10A5
	movl	$32, %esi
	movq	%rax, basket_sizes(%rip)
	callq	calloc
	movq	%rax, basket(%rip)
	movq	%r14, %rdi
	movl	$1, %esi
	movq	640(%r14), %rax
	imulq	632(%r14), %rax
	leaq	(%rax,%rax,8), %rax
	shlq	$3, %rax
	addq	568(%r14), %rax
	movq	%rax, full_group_end_arc(%rip)
	callq	master
	movq	552(%r14), %rbx
	movq	560(%r14), %r12
	addq	$104, %rbx
	cmpq	%r12, %rbx
	jae	.LBB1_7
# %bb.1:                                # %for.body.lr.ph.i25
	movq	512(%r14), %rbp
	movq	592(%r14), %rcx
	movq	600(%r14), %rdx
	movq	%rbp, %r13
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	negq	%r13
	.p2align	4, 0x90
.LBB1_2:                                # %for.body.i27
                                        # =>This Inner Loop Header: Depth=1
	movq	48(%rbx), %rax
	movq	80(%rbx), %r15
	cmpq	%rcx, %rax
	jb	.LBB1_8
# %bb.3:                                # %for.body.i27
                                        #   in Loop: Header=BB1_2 Depth=1
	cmpq	%rdx, %rax
	jae	.LBB1_8
# %bb.4:                                # %if.then.i
                                        #   in Loop: Header=BB1_2 Depth=1
	movq	%r15, %rax
	negq	%rax
	cmovlq	%r15, %rax
	cmpq	%rbp, %rax
	jle	.LBB1_6
# %bb.5:                                # %if.then7.i
                                        #   in Loop: Header=BB1_2 Depth=1
	movl	$.L.str.19, %edi
	xorl	%eax, %eax
	callq	printf
	movl	96(%rbx), %esi
	movl	$.L.str.20, %edi
	movq	%r15, %rdx
	xorl	%eax, %eax
	callq	printf
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	jmp	.LBB1_6
	.p2align	4, 0x90
.LBB1_8:                                # %if.else.i
                                        #   in Loop: Header=BB1_2 Depth=1
	cmpq	%r13, %r15
	jl	.LBB1_10
# %bb.9:                                # %if.else.i
                                        #   in Loop: Header=BB1_2 Depth=1
	leaq	-1(%r15), %rax
	cmpq	%rbp, %rax
	jg	.LBB1_10
.LBB1_6:                                # %for.inc.i30
                                        #   in Loop: Header=BB1_2 Depth=1
	addq	$104, %rbx
	cmpq	%r12, %rbx
	jb	.LBB1_2
.LBB1_7:                                # %for.end.i
	movq	$1, 488(%r14)
.LBB1_11:                               # %primal_feasible.exit
	movq	568(%r14), %rax
	movq	576(%r14), %rcx
	cmpq	%rcx, %rax
	jb	.LBB1_13
	jmp	.LBB1_19
	.p2align	4, 0x90
.LBB1_16:                               # %for.inc.i
                                        #   in Loop: Header=BB1_13 Depth=1
	addq	$72, %rax
	cmpq	%rcx, %rax
	jae	.LBB1_19
.LBB1_13:                               # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movq	16(%rax), %rsi
	movq	24(%rax), %r8
	movq	8(%rax), %rdx
	movswl	32(%rax), %edi
	subq	(%rsi), %rdx
	addq	(%r8), %rdx
	cmpl	$2, %edi
	jae	.LBB1_14
# %bb.17:                               # %sw.bb.i
                                        #   in Loop: Header=BB1_13 Depth=1
	xorl	%esi, %esi
	subq	512(%r14), %rsi
	cmpq	%rsi, %rdx
	jge	.LBB1_16
	jmp	.LBB1_18
	.p2align	4, 0x90
.LBB1_14:                               # %for.body.i
                                        #   in Loop: Header=BB1_13 Depth=1
	jne	.LBB1_16
# %bb.15:                               # %sw.bb5.i
                                        #   in Loop: Header=BB1_13 Depth=1
	cmpq	512(%r14), %rdx
	jle	.LBB1_16
.LBB1_18:                               # %DUAL_INFEAS.i
	movq	stderr(%rip), %rcx
	movl	$.L.str.22, %edi
	movl	$22, %esi
	movl	$1, %edx
	callq	fwrite
	movq	stderr(%rip), %rcx
	movl	$.L.str.23, %edi
	movl	$22, %esi
	movl	$1, %edx
	callq	fwrite
.LBB1_19:                               # %dual_feasible.exit
	movq	perm_p(%rip), %rdi
	movb	$0, opt(%rip)
	callq	free
	movq	opt_basket(%rip), %rdi
	callq	free
	movq	basket_sizes(%rip), %rdi
	callq	free
	movq	basket(%rip), %rdi
	callq	free
	xorl	%eax, %eax
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB1_10:                               # %if.then15.i
	.cfi_def_cfa_offset 80
	movl	$.L.str.19, %edi
	xorl	%eax, %eax
	callq	printf
	movl	$.L.str.21, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	callq	printf
	movq	$0, 488(%r14)
	jmp	.LBB1_11
.Lfunc_end1:
	.size	primal_net_simplex, .Lfunc_end1-primal_net_simplex
	.cfi_endproc
                                        # -- End function
	.globl	flow_cost               # -- Begin function flow_cost
	.p2align	4, 0x90
	.type	flow_cost,@function
flow_cost:                              # @flow_cost
	.cfi_startproc
# %bb.0:                                # %entry
	movq	424(%rdi), %r9
	movq	568(%rdi), %rcx
	testq	%r9, %r9
	jle	.LBB2_3
# %bb.1:                                # %for.body.preheader
	leaq	56(%rcx), %rdx
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB2_2:                                # %for.body
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpw	$2, -24(%rdx)
	sete	%al
	incq	%rsi
	movq	%rax, (%rdx)
	addq	$72, %rdx
	cmpq	%rsi, %r9
	jg	.LBB2_2
.LBB2_3:                                # %for.end
	movq	400(%rdi), %r8
	testq	%r8, %r8
	jle	.LBB2_6
# %bb.4:                                # %for.body14.preheader
	movq	552(%rdi), %rsi
	xorl	%edx, %edx
	addq	$184, %rsi
	.p2align	4, 0x90
.LBB2_5:                                # %for.body14
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rsi), %r10
	movq	(%rsi), %rax
	incq	%rdx
	addq	$104, %rsi
	cmpq	%rdx, %r8
	movq	%rax, 56(%r10)
	jg	.LBB2_5
.LBB2_6:                                # %for.cond25.preheader
	testq	%r9, %r9
	jle	.LBB2_7
# %bb.8:                                # %for.body30.lr.ph
	addq	$8, %rcx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	.p2align	4, 0x90
.LBB2_9:                                # %for.body30
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, 48(%rcx)
	je	.LBB2_16
# %bb.10:                               # %if.then34
                                        #   in Loop: Header=BB2_9 Depth=1
	movq	8(%rcx), %rax
	movl	96(%rax), %eax
	testl	%eax, %eax
	js	.LBB2_11
# %bb.14:                               # %if.then44
                                        #   in Loop: Header=BB2_9 Depth=1
	movq	(%rcx), %rsi
	jne	.LBB2_13
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB2_9 Depth=1
	addq	%rdx, %rsi
	subq	528(%rdi), %rsi
	incq	%r8
	movq	%rsi, %rdx
	jmp	.LBB2_16
	.p2align	4, 0x90
.LBB2_11:                               # %land.lhs.true
                                        #   in Loop: Header=BB2_9 Depth=1
	movq	16(%rcx), %rax
	cmpl	$0, 96(%rax)
	jg	.LBB2_16
# %bb.12:                               # %if.then44.thread
                                        #   in Loop: Header=BB2_9 Depth=1
	movq	(%rcx), %rsi
.LBB2_13:                               # %if.else54
                                        #   in Loop: Header=BB2_9 Depth=1
	addq	%rsi, %rdx
.LBB2_16:                               # %for.inc62
                                        #   in Loop: Header=BB2_9 Depth=1
	addq	$72, %rcx
	decq	%r9
	jne	.LBB2_9
	jmp	.LBB2_17
.LBB2_7:
	xorl	%r8d, %r8d
	xorl	%edx, %edx
.LBB2_17:                               # %for.end64
	vcvtsi2sdq	528(%rdi), %xmm0, %xmm2
	vcvtsi2sdq	%r8, %xmm0, %xmm1
	vcvtsi2sdq	%rdx, %xmm0, %xmm0
	vfmadd231sd	%xmm2, %xmm1, %xmm0 # xmm0 = (xmm1 * xmm2) + xmm0
	retq
.Lfunc_end2:
	.size	flow_cost, .Lfunc_end2-flow_cost
	.cfi_endproc
                                        # -- End function
	.globl	suspend_impl            # -- Begin function suspend_impl
	.p2align	4, 0x90
	.type	suspend_impl,@function
suspend_impl:                           # @suspend_impl
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	$4000, 640(%rdi)        # imm = 0xFA0
	movabsq	$2361183241434822607, %rcx # imm = 0x20C49BA5E353F7CF
	movq	%rdx, %r9
	movq	%rsi, -8(%rsp)          # 8-byte Spill
	movq	424(%rdi), %r8
	leaq	-1(%r8), %rax
	imulq	%rcx
	movq	%r8, %rax
	movq	%rdx, %r10
	movq	%rdx, %rbp
	imulq	%rcx
	movl	$4000, %ecx             # imm = 0xFA0
	movq	%rdx, %rax
	sarq	$9, %rdx
	shrq	$63, %rbp
	sarq	$9, %r10
	shrq	$63, %rax
	leaq	1(%r10,%rbp), %r14
	addq	%rax, %rdx
	movq	%r14, 624(%rdi)
	imulq	$4000, %rdx, %rax       # imm = 0xFA0
	movq	%r8, %rdx
	subq	%rax, %rdx
	leaq	(%rdx,%r14), %r15
	addq	$-4000, %r15            # imm = 0xF060
	movq	%r15, 632(%rdi)
	jns	.LBB3_7
# %bb.1:                                # %while.body.preheader
	addq	%rbp, %r10
	movl	$3998, %eax             # imm = 0xF9E
	movl	$4000, %ecx             # imm = 0xFA0
	addq	%r10, %rdx
	subq	%rdx, %rax
	xorl	%edx, %edx
	divq	%r14
	incq	%rax
	cmpq	$16, %rax
	jb	.LBB3_5
# %bb.2:                                # %vector.ph
	movq	%rax, %rdx
	vpxor	%xmm1, %xmm1, %xmm1
	vpcmpeqd	%ymm2, %ymm2, %ymm2
	vpxor	%xmm3, %xmm3, %xmm3
	vpxor	%xmm4, %xmm4, %xmm4
	andq	$-16, %rdx
	movq	%rdx, %rcx
	imulq	%r14, %rcx
	addq	%rcx, %r15
	movl	$4000, %ecx             # imm = 0xFA0
	vmovq	%rcx, %xmm0
	xorl	%ecx, %ecx
	.p2align	4, 0x90
.LBB3_3:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	addq	$16, %rcx
	vpaddq	%ymm2, %ymm0, %ymm0
	vpaddq	%ymm2, %ymm1, %ymm1
	vpaddq	%ymm2, %ymm3, %ymm3
	vpaddq	%ymm2, %ymm4, %ymm4
	cmpq	%rdx, %rcx
	jne	.LBB3_3
# %bb.4:                                # %middle.block
	vpaddq	%ymm0, %ymm1, %ymm0
	cmpq	%rdx, %rax
	vpaddq	%ymm0, %ymm3, %ymm0
	vpaddq	%ymm0, %ymm4, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpaddq	%ymm1, %ymm0, %ymm0
	vpshufd	$78, %xmm0, %xmm1       # xmm1 = xmm0[2,3,0,1]
	vpaddq	%xmm1, %xmm0, %xmm0
	vmovq	%xmm0, %rcx
	je	.LBB3_6
	.p2align	4, 0x90
.LBB3_5:                                # %while.body
                                        # =>This Inner Loop Header: Depth=1
	decq	%rcx
	addq	%r14, %r15
	js	.LBB3_5
.LBB3_6:                                # %while.cond.while.end_crit_edge
	movq	%r15, 632(%rdi)
	movq	%rcx, 640(%rdi)
.LBB3_7:                                # %while.end
	movq	440(%rdi), %r10
	testq	%r9, %r9
	jne	.LBB3_19
# %bb.8:                                # %if.else
	testq	%r10, %r10
	jle	.LBB3_52
# %bb.9:                                # %for.body.lr.ph
	movq	568(%rdi), %r12
	movq	%rcx, %rax
	movq	%r8, %rbx
	imulq	%r15, %rax
	subq	%r10, %rbx
	xorl	%r10d, %r10d
	movq	%rbx, %r9
	movq	%rax, -24(%rsp)         # 8-byte Spill
	leaq	-1(%rcx), %rax
	movq	%rax, -16(%rsp)         # 8-byte Spill
	.p2align	4, 0x90
.LBB3_10:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%r9, %rax
	cqto
	idivq	%r14
	movq	%rdx, %rsi
	subq	%r15, %rsi
	jle	.LBB3_12
# %bb.11:                               # %if.then.i
                                        #   in Loop: Header=BB3_10 Depth=1
	imulq	-16(%rsp), %rsi         # 8-byte Folded Reload
	addq	-24(%rsp), %rsi         # 8-byte Folded Reload
	jmp	.LBB3_13
	.p2align	4, 0x90
.LBB3_12:                               # %if.else.i
                                        #   in Loop: Header=BB3_10 Depth=1
	imulq	%rcx, %rdx
	movq	%rdx, %rsi
.LBB3_13:                               # %getArcPosition.exit
                                        #   in Loop: Header=BB3_10 Depth=1
	addq	%rax, %rsi
	movq	$-2, %rdx
	leaq	(%rsi,%rsi,8), %r11
	movzwl	32(%r12,%r11,8), %esi
	leaq	(%r12,%r11,8), %r13
	testw	%si, %si
	je	.LBB3_16
# %bb.14:                               # %getArcPosition.exit
                                        #   in Loop: Header=BB3_10 Depth=1
	cmpw	$1, %si
	jne	.LBB3_18
# %bb.15:                               # %if.then21
                                        #   in Loop: Header=BB3_10 Depth=1
	movq	16(%r12,%r11,8), %rsi
	movq	24(%r12,%r11,8), %rax
	movq	8(%r12,%r11,8), %rdx
	subq	(%rsi), %rdx
	addq	(%rax), %rdx
	jmp	.LBB3_18
	.p2align	4, 0x90
.LBB3_16:                               # %if.then30
                                        #   in Loop: Header=BB3_10 Depth=1
	movq	16(%r12,%r11,8), %rsi
	cmpq	%r13, 48(%rsi)
	je	.LBB3_18
# %bb.17:                               # %if.then34
                                        #   in Loop: Header=BB3_10 Depth=1
	movq	24(%r12,%r11,8), %rsi
	movq	%r13, 48(%rsi)
.LBB3_18:                               # %if.end38
                                        #   in Loop: Header=BB3_10 Depth=1
	xorl	%esi, %esi
	xorl	%ebp, %ebp
	cmpq	-8(%rsp), %rdx          # 8-byte Folded Reload
	movl	%ebx, %edx
	movl	$-1, %eax
	cmovgl	%eax, %edx
	setle	%sil
	setg	%bpl
	incq	%r9
	addq	%rbp, %r10
	addq	%rsi, %rbx
	cmpq	%r8, %r9
	movl	%edx, (%r13)
	jl	.LBB3_10
.LBB3_19:                               # %if.end48
	testq	%r10, %r10
	je	.LBB3_52
# %bb.20:                               # %if.then50
	movq	%r10, %rax
	movq	%r8, %rbx
	movabsq	$2361183241434822607, %rcx # imm = 0x20C49BA5E353F7CF
	subq	%r10, 440(%rdi)
	addq	%r10, 448(%rdi)
	movq	$4000, 640(%rdi)        # imm = 0xFA0
	notq	%rax
	subq	%r10, %rbx
	movq	%rcx, %rsi
	addq	%r8, %rax
	imulq	%rcx
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rdx, %rbp
	imulq	%rsi
	movq	%rdx, %rax
	sarq	$9, %rdx
	shrq	$63, %rbp
	sarq	$9, %rcx
	shrq	$63, %rax
	leaq	1(%rcx,%rbp), %r9
	addq	%rax, %rdx
	movq	%r9, 624(%rdi)
	imulq	$4000, %rdx, %rax       # imm = 0xFA0
	movq	%rax, %rdx
	negq	%rdx
	leaq	-4000(%rbx,%rdx), %rdx
	subq	%rax, %rbx
	cmovneq	%rdx, %rbx
	movq	%rbx, %rsi
	addq	%r9, %rsi
	movq	%rsi, 632(%rdi)
	jns	.LBB3_27
# %bb.21:                               # %while.body82.preheader
	addq	%rbp, %rcx
	movq	$-2, %rax
	xorl	%edx, %edx
	addq	%rcx, %rbx
	subq	%rbx, %rax
	divq	%r9
	movl	$4000, %edx             # imm = 0xFA0
	incq	%rax
	cmpq	$16, %rax
	jb	.LBB3_25
# %bb.22:                               # %vector.ph208
	movq	%rax, %rcx
	vpxor	%xmm1, %xmm1, %xmm1
	vpcmpeqd	%ymm2, %ymm2, %ymm2
	vpxor	%xmm3, %xmm3, %xmm3
	vpxor	%xmm4, %xmm4, %xmm4
	andq	$-16, %rcx
	movq	%rcx, %rdx
	imulq	%r9, %rdx
	addq	%rdx, %rsi
	movl	$4000, %edx             # imm = 0xFA0
	vmovq	%rdx, %xmm0
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB3_23:                               # %vector.body204
                                        # =>This Inner Loop Header: Depth=1
	addq	$16, %rdx
	vpaddq	%ymm2, %ymm0, %ymm0
	vpaddq	%ymm2, %ymm1, %ymm1
	vpaddq	%ymm2, %ymm3, %ymm3
	vpaddq	%ymm2, %ymm4, %ymm4
	cmpq	%rcx, %rdx
	jne	.LBB3_23
# %bb.24:                               # %middle.block205
	vpaddq	%ymm0, %ymm1, %ymm0
	cmpq	%rcx, %rax
	vpaddq	%ymm0, %ymm3, %ymm0
	vpaddq	%ymm0, %ymm4, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpaddq	%ymm1, %ymm0, %ymm0
	vpshufd	$78, %xmm0, %xmm1       # xmm1 = xmm0[2,3,0,1]
	vpaddq	%xmm1, %xmm0, %xmm0
	vmovq	%xmm0, %rdx
	je	.LBB3_26
	.p2align	4, 0x90
.LBB3_25:                               # %while.body82
                                        # =>This Inner Loop Header: Depth=1
	decq	%rdx
	addq	%r9, %rsi
	js	.LBB3_25
.LBB3_26:                               # %while.cond78.while.end89_crit_edge
	movq	%rsi, 632(%rdi)
	movq	%rdx, 640(%rdi)
.LBB3_27:                               # %while.end89
	movq	400(%rdi), %rcx
	movq	584(%rdi), %rax
	testq	%rcx, %rcx
	js	.LBB3_39
# %bb.28:                               # %for.body.lr.ph.i.i
	movq	552(%rdi), %rdx
	incq	%rcx
	addq	$64, %rdx
	.p2align	4, 0x90
.LBB3_29:                               # %for.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rdx), %rsi
	testq	%rsi, %rsi
	je	.LBB3_32
# %bb.30:                               # %land.lhs.true.i.i
                                        #   in Loop: Header=BB3_29 Depth=1
	movslq	(%rsi), %rsi
	testq	%rsi, %rsi
	js	.LBB3_32
# %bb.31:                               # %if.then.i.i
                                        #   in Loop: Header=BB3_29 Depth=1
	leaq	(%rsi,%rsi,8), %rsi
	leaq	(%rax,%rsi,8), %rsi
	movq	%rsi, -16(%rdx)
.LBB3_32:                               # %if.end.i.i
                                        #   in Loop: Header=BB3_29 Depth=1
	movq	(%rdx), %rsi
	testq	%rsi, %rsi
	je	.LBB3_35
# %bb.33:                               # %land.lhs.true7.i.i
                                        #   in Loop: Header=BB3_29 Depth=1
	movslq	(%rsi), %rsi
	testq	%rsi, %rsi
	js	.LBB3_35
# %bb.34:                               # %if.then12.i.i
                                        #   in Loop: Header=BB3_29 Depth=1
	leaq	(%rsi,%rsi,8), %rsi
	leaq	(%rax,%rsi,8), %rsi
	movq	%rsi, (%rdx)
.LBB3_35:                               # %if.end19.i.i
                                        #   in Loop: Header=BB3_29 Depth=1
	movq	-8(%rdx), %rsi
	testq	%rsi, %rsi
	je	.LBB3_38
# %bb.36:                               # %land.lhs.true21.i.i
                                        #   in Loop: Header=BB3_29 Depth=1
	movslq	(%rsi), %rsi
	testq	%rsi, %rsi
	js	.LBB3_38
# %bb.37:                               # %if.then26.i.i
                                        #   in Loop: Header=BB3_29 Depth=1
	leaq	(%rsi,%rsi,8), %rsi
	leaq	(%rax,%rsi,8), %rsi
	movq	%rsi, -8(%rdx)
.LBB3_38:                               # %for.inc.i.i
                                        #   in Loop: Header=BB3_29 Depth=1
	addq	$104, %rdx
	decq	%rcx
	jne	.LBB3_29
.LBB3_39:                               # %refreshArcPointers.exit.i
	movq	568(%rdi), %rcx
	testq	%r8, %r8
	jle	.LBB3_44
# %bb.40:                               # %for.body.i163.preheader
	xorl	%edx, %edx
	movq	%r8, %rsi
	.p2align	4, 0x90
.LBB3_41:                               # %for.body.i163
                                        # =>This Inner Loop Header: Depth=1
	movslq	(%rcx,%rdx), %rbp
	testq	%rbp, %rbp
	js	.LBB3_43
# %bb.42:                               # %if.end.i
                                        #   in Loop: Header=BB3_41 Depth=1
	movq	64(%rcx,%rdx), %rbx
	leaq	(%rbp,%rbp,8), %rbp
	movq	%rbx, 64(%rax,%rbp,8)
	vmovdqu	(%rcx,%rdx), %ymm0
	vmovdqu	32(%rcx,%rdx), %ymm1
	vmovdqu	%ymm1, 32(%rax,%rbp,8)
	vmovdqu	%ymm0, (%rax,%rbp,8)
	movq	568(%rdi), %rcx
.LBB3_43:                               # %for.inc.i
                                        #   in Loop: Header=BB3_41 Depth=1
	addq	$72, %rdx
	decq	%rsi
	jne	.LBB3_41
.LBB3_44:                               # %refreshPositions.exit
	movq	%rax, 568(%rdi)
	movq	%rcx, 584(%rdi)
	leaq	(%r8,%r8,8), %rcx
	movq	%r10, %rbx
	leaq	(%rax,%rcx,8), %rbp
	movq	424(%rdi), %rcx
	negq	%rbx
	movq	552(%rdi), %rsi
	leaq	(%rbx,%rbx,8), %rbx
	leaq	(%rbp,%rbx,8), %rbp
	movq	%rcx, %rdx
	subq	%r10, %rdx
	movq	%rdx, 424(%rdi)
	movq	%rbp, 576(%rdi)
	movq	560(%rdi), %rdi
	cmpq	%rdi, %rsi
	jae	.LBB3_47
# %bb.45:                               # %for.body.i.preheader
	vpxor	%xmm0, %xmm0, %xmm0
	.p2align	4, 0x90
.LBB3_46:                               # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	vmovdqu	%xmm0, 56(%rsi)
	addq	$104, %rsi
	cmpq	%rdi, %rsi
	jb	.LBB3_46
.LBB3_47:                               # %for.end.i
	testq	%rdx, %rdx
	jle	.LBB3_53
# %bb.48:                               # %for.body4.i.preheader
	movq	16(%rax), %rsi
	cmpq	$1, %rdx
	movq	56(%rsi), %rdi
	movq	%rdi, 40(%rax)
	movq	%rax, 56(%rsi)
	movq	24(%rax), %rsi
	movq	64(%rsi), %rdi
	movq	%rdi, 48(%rax)
	movq	%rax, 64(%rsi)
	je	.LBB3_53
# %bb.49:                               # %for.body4.for.body4_crit_edge.i.preheader
	decq	%rcx
	addq	$72, %rax
	subq	%r10, %rcx
	.p2align	4, 0x90
.LBB3_50:                               # %for.body4.for.body4_crit_edge.i
                                        # =>This Inner Loop Header: Depth=1
	movq	16(%rax), %rdx
	movq	56(%rdx), %rsi
	movq	%rsi, 40(%rax)
	movq	%rax, 56(%rdx)
	movq	24(%rax), %rdx
	movq	64(%rdx), %rsi
	movq	%rsi, 48(%rax)
	movq	%rax, 64(%rdx)
	addq	$72, %rax
	decq	%rcx
	jne	.LBB3_50
	jmp	.LBB3_53
.LBB3_52:
	xorl	%r10d, %r10d
.LBB3_53:                               # %if.end95
	movq	%r10, %rax
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	vzeroupper
	retq
.Lfunc_end3:
	.size	suspend_impl, .Lfunc_end3-suspend_impl
	.cfi_endproc
                                        # -- End function
	.globl	refreshPositions        # -- Begin function refreshPositions
	.p2align	4, 0x90
	.type	refreshPositions,@function
refreshPositions:                       # @refreshPositions
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	584(%rdi), %r12
	cmpq	$0, 400(%rdi)
	movq	%rsi, %r15
	movq	%rdi, %rbx
	movq	%rdx, (%rsp)            # 8-byte Spill
	js	.LBB4_12
# %bb.1:                                # %for.body.lr.ph.i
	movq	$-1, %r13
	movl	$64, %ebp
	.p2align	4, 0x90
.LBB4_2:                                # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movq	552(%rbx), %r14
	movq	-16(%r14,%rbp), %rax
	testq	%rax, %rax
	je	.LBB4_5
# %bb.3:                                # %land.lhs.true.i
                                        #   in Loop: Header=BB4_2 Depth=1
	movslq	(%rax), %rsi
	testq	%rsi, %rsi
	js	.LBB4_5
# %bb.4:                                # %if.then.i
                                        #   in Loop: Header=BB4_2 Depth=1
	movq	%rbx, %rdi
	callq	*%r15
	leaq	(%rax,%rax,8), %rax
	leaq	(%r12,%rax,8), %rax
	movq	%rax, -16(%r14,%rbp)
.LBB4_5:                                # %if.end.i
                                        #   in Loop: Header=BB4_2 Depth=1
	movq	(%r14,%rbp), %rax
	testq	%rax, %rax
	je	.LBB4_8
# %bb.6:                                # %land.lhs.true7.i
                                        #   in Loop: Header=BB4_2 Depth=1
	movslq	(%rax), %rsi
	testq	%rsi, %rsi
	js	.LBB4_8
# %bb.7:                                # %if.then12.i
                                        #   in Loop: Header=BB4_2 Depth=1
	movq	%rbx, %rdi
	callq	*%r15
	leaq	(%rax,%rax,8), %rax
	leaq	(%r12,%rax,8), %rax
	movq	%rax, (%r14,%rbp)
.LBB4_8:                                # %if.end19.i
                                        #   in Loop: Header=BB4_2 Depth=1
	movq	-8(%r14,%rbp), %rax
	testq	%rax, %rax
	je	.LBB4_11
# %bb.9:                                # %land.lhs.true21.i
                                        #   in Loop: Header=BB4_2 Depth=1
	movslq	(%rax), %rsi
	testq	%rsi, %rsi
	js	.LBB4_11
# %bb.10:                               # %if.then26.i
                                        #   in Loop: Header=BB4_2 Depth=1
	movq	%rbx, %rdi
	callq	*%r15
	leaq	(%rax,%rax,8), %rax
	leaq	(%r12,%rax,8), %rax
	movq	%rax, -8(%r14,%rbp)
.LBB4_11:                               # %for.inc.i
                                        #   in Loop: Header=BB4_2 Depth=1
	incq	%r13
	addq	$104, %rbp
	cmpq	400(%rbx), %r13
	jl	.LBB4_2
.LBB4_12:                               # %refreshArcPointers.exit
	movq	(%rsp), %r13            # 8-byte Reload
	movq	568(%rbx), %r14
	testq	%r13, %r13
	jle	.LBB4_17
# %bb.13:                               # %for.body.preheader
	xorl	%ebp, %ebp
	.p2align	4, 0x90
.LBB4_14:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movslq	(%r14,%rbp), %rsi
	testq	%rsi, %rsi
	js	.LBB4_16
# %bb.15:                               # %if.end
                                        #   in Loop: Header=BB4_14 Depth=1
	movq	%rbx, %rdi
	vzeroupper
	callq	*%r15
	movq	64(%r14,%rbp), %rcx
	leaq	(%rax,%rax,8), %rax
	movq	%rcx, 64(%r12,%rax,8)
	vmovups	(%r14,%rbp), %ymm0
	vmovups	32(%r14,%rbp), %ymm1
	vmovups	%ymm1, 32(%r12,%rax,8)
	vmovups	%ymm0, (%r12,%rax,8)
	movq	568(%rbx), %r14
.LBB4_16:                               # %for.inc
                                        #   in Loop: Header=BB4_14 Depth=1
	addq	$72, %rbp
	decq	%r13
	jne	.LBB4_14
.LBB4_17:                               # %for.end
	movq	(%rsp), %rax            # 8-byte Reload
	movq	%r12, 568(%rbx)
	movq	%r14, 584(%rbx)
	leaq	(%rax,%rax,8), %rax
	leaq	(%r12,%rax,8), %rax
	movq	%rax, 576(%rbx)
	xorl	%eax, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	vzeroupper
	retq
.Lfunc_end4:
	.size	refreshPositions, .Lfunc_end4-refreshPositions
	.cfi_endproc
                                        # -- End function
	.globl	getOriginalArcPosition  # -- Begin function getOriginalArcPosition
	.p2align	4, 0x90
	.type	getOriginalArcPosition,@function
getOriginalArcPosition:                 # @getOriginalArcPosition
	.cfi_startproc
# %bb.0:                                # %entry
	movq	%rsi, %rax
	retq
.Lfunc_end5:
	.size	getOriginalArcPosition, .Lfunc_end5-getOriginalArcPosition
	.cfi_endproc
                                        # -- End function
	.globl	price_out_impl          # -- Begin function price_out_impl
	.p2align	4, 0x90
	.type	price_out_impl,@function
price_out_impl:                         # @price_out_impl
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$168, %rsp
	.cfi_def_cfa_offset 224
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	408(%rdi), %rdx
	movq	424(%rdi), %rsi
	movq	456(%rdi), %rcx
	movq	528(%rdi), %rbx
	movq	416(%rdi), %rax
	movq	%rdi, %r13
	leaq	(%rcx,%rsi), %rdi
	cmpq	$15000, %rdx            # imm = 0x3A98
	jg	.LBB6_16
# %bb.1:                                # %if.then
	cmpq	%rax, %rdi
	jle	.LBB6_31
# %bb.2:                                # %land.lhs.true
	imulq	%rdx, %rdx
	shrq	%rdx
	addq	%rsi, %rdx
	cmpq	%rax, %rdx
	jle	.LBB6_31
# %bb.3:                                # %if.then16
	addq	%rcx, %rax
	movq	%rax, 416(%r13)
	addq	%rcx, 448(%r13)
	shlq	$3, %rax
	movq	568(%r13), %rdi
	leaq	(%rax,%rax,8), %rsi
	callq	realloc
	testq	%rax, %rax
	je	.LBB6_186
# %bb.4:                                # %if.end.i
	movq	568(%r13), %rcx
	movq	%rax, 568(%r13)
	movq	424(%r13), %rsi
	movq	552(%r13), %rdx
	leaq	(%rsi,%rsi,8), %rsi
	leaq	104(%rdx), %rdi
	leaq	(%rax,%rsi,8), %rsi
	movq	%rsi, 576(%r13)
	movq	560(%r13), %rsi
	cmpq	%rsi, %rdi
	jae	.LBB6_5
	.p2align	4, 0x90
.LBB6_13:                               # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movq	48(%rdi), %rbp
	testq	%rbp, %rbp
	je	.LBB6_12
# %bb.14:                               # %land.lhs.true.i
                                        #   in Loop: Header=BB6_13 Depth=1
	cmpq	%rdx, 24(%rdi)
	je	.LBB6_12
# %bb.15:                               # %if.then10.i
                                        #   in Loop: Header=BB6_13 Depth=1
	subq	%rcx, %rbp
	addq	%rax, %rbp
	movq	%rbp, 48(%rdi)
.LBB6_12:                               # %for.inc.i
                                        #   in Loop: Header=BB6_13 Depth=1
	addq	$104, %rdi
	cmpq	%rsi, %rdi
	jb	.LBB6_13
.LBB6_5:                                # %if.end
	movq	416(%r13), %rax
	movq	584(%r13), %rdi
	shlq	$3, %rax
	leaq	(%rax,%rax,8), %rsi
	callq	realloc
	movq	%rax, 584(%r13)
	movq	552(%r13), %rax
	movq	560(%r13), %rcx
	cmpq	%rcx, %rax
	jae	.LBB6_8
# %bb.6:                                # %for.body.i601.preheader
	vpxor	%xmm0, %xmm0, %xmm0
	.p2align	4, 0x90
.LBB6_7:                                # %for.body.i601
                                        # =>This Inner Loop Header: Depth=1
	vmovdqu	%xmm0, 56(%rax)
	addq	$104, %rax
	cmpq	%rcx, %rax
	jb	.LBB6_7
.LBB6_8:                                # %for.end.i604
	movq	424(%r13), %rax
	movl	$1, %edi
	testq	%rax, %rax
	jle	.LBB6_32
# %bb.9:                                # %for.body4.i.preheader
	movq	568(%r13), %rcx
	cmpq	$1, %rax
	movq	16(%rcx), %rdx
	movq	56(%rdx), %rsi
	movq	%rsi, 40(%rcx)
	movq	%rcx, 56(%rdx)
	movq	24(%rcx), %rdx
	movq	64(%rdx), %rsi
	movq	%rsi, 48(%rcx)
	movq	%rcx, 64(%rdx)
	je	.LBB6_32
# %bb.10:                               # %for.body4.for.body4_crit_edge.i.preheader
	decq	%rax
	addq	$72, %rcx
	.p2align	4, 0x90
.LBB6_11:                               # %for.body4.for.body4_crit_edge.i
                                        # =>This Inner Loop Header: Depth=1
	movq	16(%rcx), %rdx
	movq	56(%rdx), %rsi
	movq	%rsi, 40(%rcx)
	movq	%rcx, 56(%rdx)
	movq	24(%rcx), %rdx
	movq	64(%rdx), %rsi
	movq	%rsi, 48(%rcx)
	movq	%rcx, 64(%rdx)
	addq	$72, %rcx
	decq	%rax
	jne	.LBB6_11
	jmp	.LBB6_32
.LBB6_16:                               # %if.else
	cmpq	%rax, %rdi
	jle	.LBB6_31
# %bb.17:                               # %land.lhs.true25
	imulq	%rdx, %rdx
	shrq	%rdx
	addq	%rsi, %rdx
	cmpq	%rax, %rdx
	jle	.LBB6_31
# %bb.18:                               # %if.then34
	addq	%rcx, %rax
	movq	%rax, 416(%r13)
	addq	%rcx, 448(%r13)
	shlq	$3, %rax
	movq	568(%r13), %rdi
	leaq	(%rax,%rax,8), %rsi
	callq	realloc
	testq	%rax, %rax
	je	.LBB6_186
# %bb.19:                               # %if.end.i624
	movq	568(%r13), %rcx
	movq	%rax, 568(%r13)
	movq	424(%r13), %rsi
	movq	552(%r13), %rdx
	leaq	(%rsi,%rsi,8), %rsi
	leaq	104(%rdx), %rdi
	leaq	(%rax,%rsi,8), %rsi
	movq	%rsi, 576(%r13)
	movq	560(%r13), %rsi
	cmpq	%rsi, %rdi
	jae	.LBB6_20
	.p2align	4, 0x90
.LBB6_28:                               # %for.body.i629
                                        # =>This Inner Loop Header: Depth=1
	movq	48(%rdi), %rbp
	testq	%rbp, %rbp
	je	.LBB6_27
# %bb.29:                               # %land.lhs.true.i632
                                        #   in Loop: Header=BB6_28 Depth=1
	cmpq	%rdx, 24(%rdi)
	je	.LBB6_27
# %bb.30:                               # %if.then10.i637
                                        #   in Loop: Header=BB6_28 Depth=1
	subq	%rcx, %rbp
	addq	%rax, %rbp
	movq	%rbp, 48(%rdi)
.LBB6_27:                               # %for.inc.i640
                                        #   in Loop: Header=BB6_28 Depth=1
	addq	$104, %rdi
	cmpq	%rsi, %rdi
	jb	.LBB6_28
.LBB6_20:                               # %if.end38
	movq	416(%r13), %rax
	movq	584(%r13), %rdi
	shlq	$3, %rax
	leaq	(%rax,%rax,8), %rsi
	callq	realloc
	movq	%rax, 584(%r13)
	movq	552(%r13), %rax
	movq	560(%r13), %rcx
	cmpq	%rcx, %rax
	jae	.LBB6_23
# %bb.21:                               # %for.body.i654.preheader
	vpxor	%xmm0, %xmm0, %xmm0
	.p2align	4, 0x90
.LBB6_22:                               # %for.body.i654
                                        # =>This Inner Loop Header: Depth=1
	vmovdqu	%xmm0, 56(%rax)
	addq	$104, %rax
	cmpq	%rcx, %rax
	jb	.LBB6_22
.LBB6_23:                               # %for.end.i658
	movq	424(%r13), %rax
	movl	$1, %edi
	testq	%rax, %rax
	jle	.LBB6_32
# %bb.24:                               # %for.body4.i669.preheader
	movq	568(%r13), %rcx
	cmpq	$1, %rax
	movq	16(%rcx), %rdx
	movq	56(%rdx), %rsi
	movq	%rsi, 40(%rcx)
	movq	%rcx, 56(%rdx)
	movq	24(%rcx), %rdx
	movq	64(%rdx), %rsi
	movq	%rsi, 48(%rcx)
	movq	%rcx, 64(%rdx)
	je	.LBB6_32
# %bb.25:                               # %for.body4.for.body4_crit_edge.i672.preheader
	decq	%rax
	addq	$72, %rcx
	.p2align	4, 0x90
.LBB6_26:                               # %for.body4.for.body4_crit_edge.i672
                                        # =>This Inner Loop Header: Depth=1
	movq	16(%rcx), %rdx
	movq	56(%rdx), %rsi
	movq	%rsi, 40(%rcx)
	movq	%rcx, 56(%rdx)
	movq	24(%rcx), %rdx
	movq	64(%rdx), %rsi
	movq	%rsi, 48(%rcx)
	movq	%rcx, 64(%rdx)
	addq	$72, %rcx
	decq	%rax
	jne	.LBB6_26
	jmp	.LBB6_32
.LBB6_31:
	xorl	%edi, %edi
.LBB6_32:                               # %if.end40
	movq	408(%r13), %rcx
	movq	584(%r13), %rsi
	movl	$1000, %eax             # imm = 0x3E8
	movl	$2000, %edx             # imm = 0x7D0
	cmpq	$15001, %rcx            # imm = 0x3A99
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	cmovlq	%rax, %rdx
	testq	%rsi, %rsi
	movq	%rdx, 160(%rsp)         # 8-byte Spill
	je	.LBB6_36
# %bb.33:                               # %if.end48
	movq	448(%r13), %r12
	movq	416(%r13), %rax
	movq	576(%r13), %r15
	movq	%rdi, 144(%rsp)         # 8-byte Spill
	movl	$8, %esi
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	movq	%r12, %rdi
	movq	%rax, 112(%rsp)         # 8-byte Spill
	callq	calloc
	movq	8(%rsp), %r9            # 8-byte Reload
	testq	%r12, %r12
	movq	%rax, 104(%rsp)         # 8-byte Spill
	jle	.LBB6_42
# %bb.34:                               # %for.body.preheader
	cmpq	$16, %r12
	jae	.LBB6_37
# %bb.35:
	xorl	%eax, %eax
	jmp	.LBB6_40
.LBB6_36:
	movq	$-1, %r15
	jmp	.LBB6_185
.LBB6_37:                               # %vector.ph
	movq	%r12, %rax
	xorl	%ecx, %ecx
	movq	%r15, %rdx
	andq	$-16, %rax
	.p2align	4, 0x90
.LBB6_38:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	144(%rdx), %rdi
	leaq	216(%rdx), %rbp
	leaq	72(%rdx), %rsi
	leaq	288(%rdx), %r8
	vmovq	%rbp, %xmm0
	vmovq	%rdi, %xmm1
	vmovq	%rsi, %xmm2
	leaq	432(%rdx), %rbp
	leaq	504(%rdx), %rsi
	leaq	360(%rdx), %rdi
	vmovq	%r8, %xmm3
	leaq	576(%rdx), %r8
	vmovq	%r8, %xmm4
	leaq	864(%rdx), %r8
	vmovq	%r8, %xmm5
	vpunpcklqdq	%xmm0, %xmm1, %xmm0 # xmm0 = xmm1[0],xmm0[0]
	vmovq	%rdx, %xmm1
	vpunpcklqdq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0]
	vmovq	%rbp, %xmm2
	leaq	720(%rdx), %rbp
	vinserti128	$1, %xmm0, %ymm1, %ymm0
	vmovq	%rsi, %xmm1
	leaq	792(%rdx), %rsi
	vpunpcklqdq	%xmm1, %xmm2, %xmm1 # xmm1 = xmm2[0],xmm1[0]
	vmovq	%rdi, %xmm2
	leaq	648(%rdx), %rdi
	vpunpcklqdq	%xmm2, %xmm3, %xmm2 # xmm2 = xmm3[0],xmm2[0]
	vmovq	%rbp, %xmm3
	leaq	1008(%rdx), %rbp
	vinserti128	$1, %xmm1, %ymm2, %ymm1
	vmovq	%rsi, %xmm2
	leaq	1080(%rdx), %rsi
	vpunpcklqdq	%xmm2, %xmm3, %xmm2 # xmm2 = xmm3[0],xmm2[0]
	vmovq	%rdi, %xmm3
	leaq	936(%rdx), %rdi
	addq	$1152, %rdx             # imm = 0x480
	vpunpcklqdq	%xmm3, %xmm4, %xmm3 # xmm3 = xmm4[0],xmm3[0]
	vmovq	%rbp, %xmm4
	vinserti128	$1, %xmm2, %ymm3, %ymm2
	vmovq	%rsi, %xmm3
	movq	104(%rsp), %rsi         # 8-byte Reload
	vpunpcklqdq	%xmm3, %xmm4, %xmm3 # xmm3 = xmm4[0],xmm3[0]
	vmovq	%rdi, %xmm4
	vpunpcklqdq	%xmm4, %xmm5, %xmm4 # xmm4 = xmm5[0],xmm4[0]
	vinserti128	$1, %xmm3, %ymm4, %ymm3
	vmovdqu	%ymm0, (%rsi,%rcx,8)
	vmovdqu	%ymm1, 32(%rsi,%rcx,8)
	vmovdqu	%ymm2, 64(%rsi,%rcx,8)
	vmovdqu	%ymm3, 96(%rsi,%rcx,8)
	addq	$16, %rcx
	cmpq	%rcx, %rax
	jne	.LBB6_38
# %bb.39:                               # %middle.block
	cmpq	%rax, %r12
	je	.LBB6_42
.LBB6_40:                               # %for.body.preheader1133
	movq	104(%rsp), %rdx         # 8-byte Reload
	leaq	(%rax,%rax,8), %rcx
	leaq	(%r15,%rcx,8), %rcx
	.p2align	4, 0x90
.LBB6_41:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, (%rdx,%rax,8)
	incq	%rax
	addq	$72, %rcx
	cmpq	%rax, %r12
	jne	.LBB6_41
.LBB6_42:                               # %for.end
	movq	568(%r13), %r14
	xorl	%r11d, %r11d
	testq	%r9, %r9
	jle	.LBB6_45
	.p2align	4, 0x90
.LBB6_43:                               # %land.rhs
                                        # =>This Inner Loop Header: Depth=1
	cmpw	$-1, 104(%r14)
	jne	.LBB6_45
# %bb.44:                               # %for.inc78
                                        #   in Loop: Header=BB6_43 Depth=1
	incq	%r11
	addq	$216, %r14
	cmpq	%r9, %r11
	jl	.LBB6_43
.LBB6_45:                               # %for.end81
	xorl	%eax, %eax
	movl	$0, %ebp
	cmpq	%r9, %r11
	movq	%rax, 88(%rsp)          # 8-byte Spill
	jge	.LBB6_125
# %bb.46:                               # %for.body85.lr.ph
	movw	$1, %ax
	addq	$-15, %rbx
	xorl	%ebp, %ebp
	xorl	%edi, %edi
	movq	$-1, 136(%rsp)          # 8-byte Folded Spill
	movl	%eax, 68(%rsp)          # 4-byte Spill
	xorl	%eax, %eax
	movq	%rbx, 152(%rsp)         # 8-byte Spill
	movq	%rax, 80(%rsp)          # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 88(%rsp)          # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movw	$1, %ax
	movl	%eax, 36(%rsp)          # 4-byte Spill
	xorl	%eax, %eax
	movq	%rax, 128(%rsp)         # 8-byte Spill
	jmp	.LBB6_47
.LBB6_51:                               # %if.then93
                                        #   in Loop: Header=BB6_47 Depth=1
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	cmpq	%rax, %rcx
	cmovgq	%rax, %rcx
	testq	%rcx, %rcx
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	jle	.LBB6_68
# %bb.52:                               # %for.body8.i.preheader
                                        #   in Loop: Header=BB6_47 Depth=1
	xorl	%eax, %eax
	movq	%rdi, 120(%rsp)         # 8-byte Spill
	movq	%r11, 16(%rsp)          # 8-byte Spill
	movq	%r14, 24(%rsp)          # 8-byte Spill
	movq	%rbp, 96(%rsp)          # 8-byte Spill
	jmp	.LBB6_53
	.p2align	4, 0x90
.LBB6_54:                               # %land.lhs.true.i696
                                        #   in Loop: Header=BB6_53 Depth=2
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	56(%rcx,%rbp,8), %r11
	leaq	(%rcx,%rbp,8), %rdi
	cmpq	56(%r15), %r11
	jge	.LBB6_64
# %bb.55:                               # %land.lhs.true.if.then_crit_edge.i
                                        #   in Loop: Header=BB6_53 Depth=2
	movl	(%rdi), %r10d
.LBB6_56:                               # %if.then.i698
                                        #   in Loop: Header=BB6_53 Depth=2
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	64(%r15), %r8
	movq	16(%rcx,%rbp,8), %rdx
	movq	8(%rcx,%rbp,8), %rsi
	movq	24(%rcx,%rbp,8), %rbp
	movq	%r8, 64(%rdi)
	vmovdqu	(%r15), %ymm0
	vmovdqu	32(%r15), %ymm1
	movq	%rdx, 48(%rsp)          # 8-byte Spill
	vmovdqu	%ymm1, 32(%rdi)
	vmovdqu	%ymm0, (%rdi)
	movq	%rdx, 16(%r15)
	movq	%rbp, 24(%r15)
	movq	%rsi, 64(%r15)
	movq	%rsi, 8(%r15)
	movq	%r11, 56(%r15)
	movl	%r10d, (%r15)
	xorl	%edi, %edi
	movq	128(%r15), %rcx
	cmpq	200(%r15), %rcx
	setg	%dil
	xorq	$3, %rdi
	cmpq	%r12, %rdi
	jg	.LBB6_66
# %bb.57:                               # %land.rhs.i.i.preheader
                                        #   in Loop: Header=BB6_53 Depth=2
	movq	%rbp, %r14
	movl	$1, %edx
	.p2align	4, 0x90
.LBB6_58:                               # %land.rhs.i.i
                                        #   Parent Loop BB6_47 Depth=1
                                        #     Parent Loop BB6_53 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	leaq	-1(%rdi), %rcx
	movq	%rdi, %rbp
	leaq	(%rcx,%rcx,8), %rdi
	movq	56(%r15,%rdi,8), %rcx
	cmpq	%r11, %rcx
	jle	.LBB6_66
# %bb.59:                               # %while.body.i.i
                                        #   in Loop: Header=BB6_58 Depth=3
	movq	16(%r15,%rdi,8), %r9
	leaq	(%rdx,%rdx,8), %rdx
	leaq	56(%r15,%rdi,8), %r8
	movq	%r9, -56(%r15,%rdx,8)
	movq	24(%r15,%rdi,8), %rbx
	movq	%rbx, -48(%r15,%rdx,8)
	movq	8(%r15,%rdi,8), %rbx
	movq	%rbx, -64(%r15,%rdx,8)
	movq	8(%r15,%rdi,8), %rbx
	movq	%rbx, -8(%r15,%rdx,8)
	movq	%rcx, -16(%r15,%rdx,8)
	movl	(%r15,%rdi,8), %ecx
	movl	%ecx, -72(%r15,%rdx,8)
	movq	48(%rsp), %rdx          # 8-byte Reload
	leaq	1(%rbp,%rbp), %rcx
	cmpq	%r12, %rcx
	movq	%rdx, 16(%r15,%rdi,8)
	movq	%r14, 24(%r15,%rdi,8)
	movq	%rsi, 8(%r15,%rdi,8)
	movq	%rsi, 64(%r15,%rdi,8)
	movq	%r11, (%r8)
	movl	%r10d, (%r15,%rdi,8)
	leaq	(%rbp,%rbp), %rdi
	jg	.LBB6_63
# %bb.60:                               # %if.then.i.i
                                        #   in Loop: Header=BB6_58 Depth=3
	leaq	(%rdi,%rdi,8), %rdx
	movq	-16(%r15,%rdx,8), %rbx
	cmpq	56(%r15,%rdx,8), %rbx
	jl	.LBB6_62
# %bb.61:                               # %if.then.i.i
                                        #   in Loop: Header=BB6_58 Depth=3
	movq	%rdi, %rcx
.LBB6_62:                               # %if.then.i.i
                                        #   in Loop: Header=BB6_58 Depth=3
	movq	%rcx, %rdi
.LBB6_63:                               # %if.end87.i.i
                                        #   in Loop: Header=BB6_58 Depth=3
	movq	%rbp, %rdx
	cmpq	%r12, %rdi
	jle	.LBB6_58
	jmp	.LBB6_66
.LBB6_64:                               # %lor.lhs.false.i
                                        #   in Loop: Header=BB6_53 Depth=2
	jne	.LBB6_66
# %bb.65:                               # %land.lhs.true20.i
                                        #   in Loop: Header=BB6_53 Depth=2
	movl	(%rdi), %r10d
	cmpl	(%r15), %r10d
	jl	.LBB6_56
	jmp	.LBB6_66
	.p2align	4, 0x90
.LBB6_53:                               # %for.body8.i
                                        #   Parent Loop BB6_47 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_58 Depth 3
	movq	56(%rsp), %rcx          # 8-byte Reload
	leaq	(%rax,%rax,8), %rbp
	cmpw	$0, 32(%rcx,%rbp,8)
	je	.LBB6_54
.LBB6_66:                               # %for.inc.i699
                                        #   in Loop: Header=BB6_53 Depth=2
	incq	%rax
	cmpq	40(%rsp), %rax          # 8-byte Folded Reload
	jl	.LBB6_53
# %bb.67:                               #   in Loop: Header=BB6_47 Depth=1
	movq	8(%rsp), %r9            # 8-byte Reload
	movq	96(%rsp), %rbp          # 8-byte Reload
	movq	24(%rsp), %r14          # 8-byte Reload
	movq	16(%rsp), %r11          # 8-byte Reload
	movq	120(%rsp), %rdi         # 8-byte Reload
.LBB6_68:                               #   in Loop: Header=BB6_47 Depth=1
	xorl	%eax, %eax
	movq	%rax, 80(%rsp)          # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 72(%rsp)          # 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 40(%rsp)          # 8-byte Spill
	cmpw	$-1, 104(%r14)
	jne	.LBB6_70
	jmp	.LBB6_71
	.p2align	4, 0x90
.LBB6_47:                               # %for.body85
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_53 Depth 2
                                        #       Child Loop BB6_58 Depth 3
                                        #     Child Loop BB6_74 Depth 2
                                        #       Child Loop BB6_75 Depth 3
                                        #       Child Loop BB6_92 Depth 3
                                        #       Child Loop BB6_82 Depth 3
	cmpw	$0, 36(%rsp)            # 2-byte Folded Reload
	jne	.LBB6_49
# %bb.48:                               # %for.body.i676
                                        #   in Loop: Header=BB6_47 Depth=1
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	56(%rax), %rax
	movq	%rax, %rcx
	sarq	$63, %rcx
	andnq	%rax, %rcx, %rax
	movq	%rax, 128(%rsp)         # 8-byte Spill
.LBB6_49:                               # %if.end88
                                        #   in Loop: Header=BB6_47 Depth=1
	movq	%r11, %rax
	cqto
	idivq	160(%rsp)               # 8-byte Folded Reload
	testq	%rdx, %rdx
	jne	.LBB6_69
# %bb.50:                               # %for.body.i684
                                        #   in Loop: Header=BB6_47 Depth=1
	movq	104(%rsp), %rax         # 8-byte Reload
	movq	(%rax), %rax
	movq	56(%rax), %rax
	movq	%rax, %rcx
	sarq	$63, %rcx
	andnq	%rax, %rcx, %rax
	cmpw	$0, 36(%rsp)            # 2-byte Folded Reload
	movq	%rax, 128(%rsp)         # 8-byte Spill
	je	.LBB6_51
.LBB6_69:                               # %if.end100
                                        #   in Loop: Header=BB6_47 Depth=1
	cmpw	$-1, 104(%r14)
	je	.LBB6_71
.LBB6_70:                               # %if.then106
                                        #   in Loop: Header=BB6_47 Depth=1
	movq	%rdi, 120(%rsp)         # 8-byte Spill
	movl	$1, %edi
	movl	$16, %esi
	movq	%rbp, 96(%rsp)          # 8-byte Spill
	leaq	72(%r14), %rbx
	movq	%r11, %rbp
	vzeroupper
	callq	calloc
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	8(%rsp), %r9            # 8-byte Reload
	incq	136(%rsp)               # 8-byte Folded Spill
	movq	%rbp, %r11
	movq	%rax, %rbp
	movq	%rcx, 8(%rax)
	movq	%rbx, (%rax)
.LBB6_71:                               # %if.end111
                                        #   in Loop: Header=BB6_47 Depth=1
	cmpw	$-1, 32(%r14)
	je	.LBB6_104
# %bb.72:                               # %if.end122
                                        #   in Loop: Header=BB6_47 Depth=1
	movq	8(%rbp), %rax
	testq	%rax, %rax
	je	.LBB6_105
# %bb.73:                               # %while.body.lr.ph.preheader
                                        #   in Loop: Header=BB6_47 Depth=1
	movq	24(%r14), %rcx
	movq	152(%rsp), %r10         # 8-byte Reload
	movq	80(%rsp), %rbx          # 8-byte Reload
	movq	%rbp, 96(%rsp)          # 8-byte Spill
	subq	64(%r14), %r10
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movslq	100(%rcx), %rcx
	addq	%rcx, %r10
.LBB6_74:                               # %while.body.lr.ph
                                        #   Parent Loop BB6_47 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_75 Depth 3
                                        #       Child Loop BB6_92 Depth 3
                                        #       Child Loop BB6_82 Depth 3
	movq	%rdi, %rsi
	.p2align	4, 0x90
.LBB6_75:                               # %while.body
                                        #   Parent Loop BB6_47 Depth=1
                                        #     Parent Loop BB6_74 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	(%rax), %rcx
	movq	16(%rcx), %rdi
	movslq	100(%rdi), %rdx
	addq	64(%rcx), %rdx
	cmpq	%r10, %rdx
	jle	.LBB6_77
# %bb.76:                               # %if.then137
                                        #   in Loop: Header=BB6_75 Depth=3
	movq	8(%rax), %rax
	incq	%rsi
	testq	%rax, %rax
	jne	.LBB6_75
	jmp	.LBB6_103
	.p2align	4, 0x90
.LBB6_77:                               # %if.end140
                                        #   in Loop: Header=BB6_74 Depth=2
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	%r11, 16(%rsp)          # 8-byte Spill
	movl	$30, %r11d
	subq	(%rdi), %r11
	movq	%r14, 24(%rsp)          # 8-byte Spill
	addq	(%rcx), %r11
	js	.LBB6_79
# %bb.78:                               #   in Loop: Header=BB6_74 Depth=2
	movq	8(%rsp), %r9            # 8-byte Reload
	movq	24(%rsp), %r14          # 8-byte Reload
	movq	16(%rsp), %r11          # 8-byte Reload
	jmp	.LBB6_101
.LBB6_79:                               # %if.then147
                                        #   in Loop: Header=BB6_74 Depth=2
	movq	88(%rsp), %rdx          # 8-byte Reload
	cmpq	%r12, %rdx
	jge	.LBB6_85
# %bb.80:                               # %if.then152
                                        #   in Loop: Header=BB6_74 Depth=2
	movq	48(%rsp), %rbp          # 8-byte Reload
	leaq	(%rdx,%rdx,8), %rcx
	testq	%rdx, %rdx
	movq	%rdi, 16(%r15,%rcx,8)
	movq	%rbp, 24(%r15,%rcx,8)
	movq	$30, 64(%r15,%rcx,8)
	movq	$30, 8(%r15,%rcx,8)
	movq	%r11, 56(%r15,%rcx,8)
	movl	%esi, (%r15,%rcx,8)
	je	.LBB6_90
# %bb.81:                               # %land.rhs.preheader.i
                                        #   in Loop: Header=BB6_74 Depth=2
	leaq	1(%rdx), %rbp
	movq	%rbx, 80(%rsp)          # 8-byte Spill
	movq	%rbp, 72(%rsp)          # 8-byte Spill
	.p2align	4, 0x90
.LBB6_82:                               # %land.rhs.i
                                        #   Parent Loop BB6_47 Depth=1
                                        #     Parent Loop BB6_74 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rbp, %rcx
	shrq	$63, %rcx
	addq	%rcx, %rbp
	sarq	%rbp
	leaq	-1(%rbp), %rdx
	leaq	(%rdx,%rdx,8), %rcx
	movq	56(%r15,%rcx,8), %r9
	cmpq	%r11, %r9
	jge	.LBB6_84
# %bb.83:                               # %while.body.i
                                        #   in Loop: Header=BB6_82 Depth=3
	leaq	56(%r15,%rcx,8), %rbx
	movq	16(%r15,%rcx,8), %r8
	testq	%rdx, %rdx
	movq	%rbx, 120(%rsp)         # 8-byte Spill
	movq	88(%rsp), %rbx          # 8-byte Reload
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	leaq	(%rbx,%rbx,8), %r14
	movq	%r8, 16(%r15,%r14,8)
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	24(%r15,%rcx,8), %rbx
	movq	%rbx, 24(%r15,%r14,8)
	movq	8(%r15,%rcx,8), %rbx
	movq	%rbx, 8(%r15,%r14,8)
	movq	8(%r15,%rcx,8), %rbx
	movq	%rbx, 64(%r15,%r14,8)
	movq	%r9, 56(%r15,%r14,8)
	movq	48(%rsp), %r9           # 8-byte Reload
	movl	(%r15,%rcx,8), %ebx
	movl	%ebx, (%r15,%r14,8)
	movq	%rdi, 16(%r15,%rcx,8)
	movq	%r9, 24(%r15,%rcx,8)
	movq	$30, 8(%r15,%rcx,8)
	movq	$30, 64(%r15,%rcx,8)
	movq	%r11, (%r8)
	movl	%esi, (%r15,%rcx,8)
	jne	.LBB6_82
.LBB6_84:                               #   in Loop: Header=BB6_74 Depth=2
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	8(%rsp), %r9            # 8-byte Reload
	movq	24(%rsp), %r14          # 8-byte Reload
	movq	16(%rsp), %r11          # 8-byte Reload
	movq	80(%rsp), %rbx          # 8-byte Reload
	movq	%rcx, 88(%rsp)          # 8-byte Spill
	jmp	.LBB6_100
.LBB6_85:                               # %if.else159
                                        #   in Loop: Header=BB6_74 Depth=2
	cmpq	%r11, 56(%r15)
	jle	.LBB6_88
# %bb.86:                               # %if.then163
                                        #   in Loop: Header=BB6_74 Depth=2
	movl	36(%rsp), %edx          # 4-byte Reload
	movq	72(%rsp), %rbx          # 8-byte Reload
	movq	64(%r15), %r8
	movq	56(%rsp), %rbp          # 8-byte Reload
	xorl	%ecx, %ecx
	cmpw	$0, 68(%rsp)            # 2-byte Folded Reload
	cmovnel	%ecx, %edx
	leaq	(%rbx,%rbx,8), %rcx
	incq	%rbx
	incq	40(%rsp)                # 8-byte Folded Spill
	movq	%r8, 64(%rbp,%rcx,8)
	movl	%edx, 36(%rsp)          # 4-byte Spill
	movq	48(%rsp), %rdx          # 8-byte Reload
	vmovdqu	(%r15), %ymm0
	vmovdqu	32(%r15), %ymm1
	vmovdqu	%ymm1, 32(%rbp,%rcx,8)
	vmovdqu	%ymm0, (%rbp,%rcx,8)
	movq	%rdi, 16(%r15)
	movq	%rdx, 24(%r15)
	movq	$30, 64(%r15)
	movq	$30, 8(%r15)
	movq	%r11, 56(%r15)
	movl	%esi, (%r15)
	xorl	%ebp, %ebp
	movq	128(%r15), %rcx
	cmpq	200(%r15), %rcx
	setg	%bpl
	xorq	$3, %rbp
	cmpq	%r12, %rbp
	jle	.LBB6_91
# %bb.87:                               #   in Loop: Header=BB6_74 Depth=2
	movl	$0, 68(%rsp)            # 4-byte Folded Spill
	jmp	.LBB6_99
.LBB6_88:                               # %if.else177
                                        #   in Loop: Header=BB6_74 Depth=2
	cmpq	128(%rsp), %r11         # 8-byte Folded Reload
	jge	.LBB6_99
# %bb.89:                               # %if.then180
                                        #   in Loop: Header=BB6_74 Depth=2
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	incq	40(%rsp)                # 8-byte Folded Spill
	leaq	(%rdx,%rdx,8), %rcx
	leaq	1(%rdx), %rbx
	movq	%rdi, 16(%r9,%rcx,8)
	movq	%r8, 24(%r9,%rcx,8)
	movq	$30, 64(%r9,%rcx,8)
	movq	$30, 8(%r9,%rcx,8)
	movq	%r11, 56(%r9,%rcx,8)
	movl	%esi, (%r9,%rcx,8)
	jmp	.LBB6_99
.LBB6_90:                               #   in Loop: Header=BB6_74 Depth=2
	movl	$1, %ecx
	movq	%rcx, 88(%rsp)          # 8-byte Spill
	jmp	.LBB6_99
.LBB6_91:                               # %land.rhs.i716.preheader
                                        #   in Loop: Header=BB6_74 Depth=2
	movq	%rbx, %r14
	movl	$1, %ecx
	.p2align	4, 0x90
.LBB6_92:                               # %land.rhs.i716
                                        #   Parent Loop BB6_47 Depth=1
                                        #     Parent Loop BB6_74 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	leaq	-1(%rbp), %rdx
	movq	%rbp, %r9
	leaq	(%rdx,%rdx,8), %rdx
	movq	56(%r15,%rdx,8), %rbp
	cmpq	%r11, %rbp
	jle	.LBB6_98
# %bb.93:                               # %while.body.i720
                                        #   in Loop: Header=BB6_92 Depth=3
	movq	16(%r15,%rdx,8), %rbx
	leaq	(%rcx,%rcx,8), %rcx
	leaq	56(%r15,%rdx,8), %r8
	movq	%rbx, -56(%r15,%rcx,8)
	movq	24(%r15,%rdx,8), %rbx
	movq	%rbx, -48(%r15,%rcx,8)
	movq	8(%r15,%rdx,8), %rbx
	movq	%rbx, -64(%r15,%rcx,8)
	movq	8(%r15,%rdx,8), %rbx
	movq	%rbx, -8(%r15,%rcx,8)
	movq	%rbp, -16(%r15,%rcx,8)
	leaq	(%r9,%r9), %rbp
	movl	(%r15,%rdx,8), %ebx
	movl	%ebx, -72(%r15,%rcx,8)
	movq	48(%rsp), %rbx          # 8-byte Reload
	leaq	1(%r9,%r9), %rcx
	movq	%rdi, 16(%r15,%rdx,8)
	cmpq	%r12, %rcx
	movq	%rbx, 24(%r15,%rdx,8)
	movq	$30, 8(%r15,%rdx,8)
	movq	$30, 64(%r15,%rdx,8)
	movq	%r11, (%r8)
	movl	%esi, (%r15,%rdx,8)
	jg	.LBB6_97
# %bb.94:                               # %if.then.i721
                                        #   in Loop: Header=BB6_92 Depth=3
	leaq	(%rbp,%rbp,8), %rdx
	movq	-16(%r15,%rdx,8), %rbx
	cmpq	56(%r15,%rdx,8), %rbx
	jl	.LBB6_96
# %bb.95:                               # %if.then.i721
                                        #   in Loop: Header=BB6_92 Depth=3
	movq	%rbp, %rcx
.LBB6_96:                               # %if.then.i721
                                        #   in Loop: Header=BB6_92 Depth=3
	movq	%rcx, %rbp
.LBB6_97:                               # %if.end87.i
                                        #   in Loop: Header=BB6_92 Depth=3
	movq	%r9, %rcx
	cmpq	%r12, %rbp
	jle	.LBB6_92
.LBB6_98:                               #   in Loop: Header=BB6_74 Depth=2
	movl	$0, 68(%rsp)            # 4-byte Folded Spill
	movq	%r14, %rbx
.LBB6_99:                               # %if.end196
                                        #   in Loop: Header=BB6_74 Depth=2
	movq	8(%rsp), %r9            # 8-byte Reload
	movq	24(%rsp), %r14          # 8-byte Reload
	movq	16(%rsp), %r11          # 8-byte Reload
.LBB6_100:                              # %if.end196
                                        #   in Loop: Header=BB6_74 Depth=2
	cmpq	112(%rsp), %rbx         # 8-byte Folded Reload
	movl	$0, %ecx
	cmoveq	%rcx, %rbx
	movq	%rbx, %rcx
	movq	%rbx, 72(%rsp)          # 8-byte Spill
.LBB6_101:                              # %if.end205
                                        #   in Loop: Header=BB6_74 Depth=2
	movq	8(%rax), %rax
	leaq	1(%rsi), %rdi
	testq	%rax, %rax
	jne	.LBB6_74
# %bb.102:                              # %for.inc208.loopexit3
                                        #   in Loop: Header=BB6_47 Depth=1
	incq	%rsi
	.p2align	4, 0x90
.LBB6_103:                              #   in Loop: Header=BB6_47 Depth=1
	movq	%rbx, 80(%rsp)          # 8-byte Spill
	movq	96(%rsp), %rbp          # 8-byte Reload
	movq	%rsi, %rdi
	jmp	.LBB6_105
	.p2align	4, 0x90
.LBB6_104:                              # %if.then120
                                        #   in Loop: Header=BB6_47 Depth=1
	addq	136(%rsp), %rdi         # 8-byte Folded Reload
.LBB6_105:                              # %for.inc208
                                        #   in Loop: Header=BB6_47 Depth=1
	incq	%r11
	addq	$216, %r14
	cmpq	%r9, %r11
	jne	.LBB6_47
# %bb.106:                              # %for.end211
	cmpw	$0, 36(%rsp)            # 2-byte Folded Reload
	jne	.LBB6_125
# %bb.107:                              # %while.body216.lr.ph
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	cmpq	%rax, %rcx
	cmovleq	%rcx, %rax
	testq	%rax, %rax
	movq	%rax, 112(%rsp)         # 8-byte Spill
	jle	.LBB6_125
# %bb.108:                              # %for.body8.i870.preheader
	xorl	%eax, %eax
	xorl	%r10d, %r10d
	movq	%rbp, 96(%rsp)          # 8-byte Spill
	jmp	.LBB6_109
	.p2align	4, 0x90
.LBB6_110:                              # %land.lhs.true.i873
                                        #   in Loop: Header=BB6_109 Depth=1
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	56(%rdx,%rbp,8), %r9
	leaq	(%rdx,%rbp,8), %rcx
	cmpq	56(%r15), %r9
	jge	.LBB6_120
# %bb.111:                              # %land.lhs.true.if.then_crit_edge.i876
                                        #   in Loop: Header=BB6_109 Depth=1
	movl	(%rcx), %r11d
.LBB6_112:                              # %if.then.i893
                                        #   in Loop: Header=BB6_109 Depth=1
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	64(%r15), %r8
	incq	%r10
	movq	16(%rdx,%rbp,8), %rsi
	movq	8(%rdx,%rbp,8), %rdi
	movq	24(%rdx,%rbp,8), %rbp
	movq	%r8, 64(%rcx)
	vmovdqu	(%r15), %ymm0
	vmovdqu	32(%r15), %ymm1
	movq	%rbp, 40(%rsp)          # 8-byte Spill
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	vmovdqu	%ymm1, 32(%rcx)
	vmovdqu	%ymm0, (%rcx)
	movq	%rsi, 16(%r15)
	movq	%rbp, 24(%r15)
	movq	%rdi, 64(%r15)
	movq	%rdi, 8(%r15)
	movq	%r9, 56(%r15)
	movl	%r11d, (%r15)
	xorl	%ebp, %ebp
	movq	128(%r15), %rcx
	cmpq	200(%r15), %rcx
	setg	%bpl
	xorq	$3, %rbp
	cmpq	%r12, %rbp
	jg	.LBB6_122
# %bb.113:                              # %land.rhs.i.i899.preheader
                                        #   in Loop: Header=BB6_109 Depth=1
	movl	$1, %esi
	.p2align	4, 0x90
.LBB6_114:                              # %land.rhs.i.i899
                                        #   Parent Loop BB6_109 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	leaq	-1(%rbp), %rdx
	movq	%rbp, %rcx
	leaq	(%rdx,%rdx,8), %rbp
	movq	56(%r15,%rbp,8), %rdx
	cmpq	%r9, %rdx
	jle	.LBB6_122
# %bb.115:                              # %while.body.i.i915
                                        #   in Loop: Header=BB6_114 Depth=2
	movq	16(%r15,%rbp,8), %r8
	leaq	(%rsi,%rsi,8), %rsi
	leaq	56(%r15,%rbp,8), %r14
	movq	%r8, -56(%r15,%rsi,8)
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	24(%r15,%rbp,8), %rbx
	movq	%rbx, -48(%r15,%rsi,8)
	movq	8(%r15,%rbp,8), %rbx
	movq	%rbx, -64(%r15,%rsi,8)
	movq	8(%r15,%rbp,8), %rbx
	movq	%rbx, -8(%r15,%rsi,8)
	movq	%rdx, -16(%r15,%rsi,8)
	movl	(%r15,%rbp,8), %edx
	movl	%edx, -72(%r15,%rsi,8)
	movq	40(%rsp), %rsi          # 8-byte Reload
	leaq	1(%rcx,%rcx), %rdx
	movq	%r8, 16(%r15,%rbp,8)
	cmpq	%r12, %rdx
	movq	%rsi, 24(%r15,%rbp,8)
	movq	%rdi, 8(%r15,%rbp,8)
	movq	%rdi, 64(%r15,%rbp,8)
	movq	%r9, (%r14)
	movl	%r11d, (%r15,%rbp,8)
	leaq	(%rcx,%rcx), %rbp
	jg	.LBB6_119
# %bb.116:                              # %if.then.i.i921
                                        #   in Loop: Header=BB6_114 Depth=2
	leaq	(%rbp,%rbp,8), %rsi
	movq	-16(%r15,%rsi,8), %rbx
	cmpq	56(%r15,%rsi,8), %rbx
	jl	.LBB6_118
# %bb.117:                              # %if.then.i.i921
                                        #   in Loop: Header=BB6_114 Depth=2
	movq	%rbp, %rdx
.LBB6_118:                              # %if.then.i.i921
                                        #   in Loop: Header=BB6_114 Depth=2
	movq	%rdx, %rbp
.LBB6_119:                              # %if.end87.i.i924
                                        #   in Loop: Header=BB6_114 Depth=2
	movq	%rcx, %rsi
	cmpq	%r12, %rbp
	jle	.LBB6_114
	jmp	.LBB6_122
.LBB6_120:                              # %lor.lhs.false.i878
                                        #   in Loop: Header=BB6_109 Depth=1
	jne	.LBB6_122
# %bb.121:                              # %land.lhs.true20.i881
                                        #   in Loop: Header=BB6_109 Depth=1
	movl	(%rcx), %r11d
	cmpl	(%r15), %r11d
	jl	.LBB6_112
	jmp	.LBB6_122
	.p2align	4, 0x90
.LBB6_109:                              # %for.body8.i870
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_114 Depth 2
	movq	56(%rsp), %rcx          # 8-byte Reload
	leaq	(%rax,%rax,8), %rbp
	cmpw	$0, 32(%rcx,%rbp,8)
	je	.LBB6_110
.LBB6_122:                              # %for.inc.i928
                                        #   in Loop: Header=BB6_109 Depth=1
	incq	%rax
	cmpq	112(%rsp), %rax         # 8-byte Folded Reload
	jl	.LBB6_109
# %bb.123:                              # %switch_arcs.exit935
                                        #   in Loop: Header=BB6_109 Depth=1
	testq	%r10, %r10
	movl	$0, %eax
	movl	$0, %r10d
	jne	.LBB6_109
# %bb.124:
	movq	96(%rsp), %rbp          # 8-byte Reload
	.p2align	4, 0x90
.LBB6_125:                              # %while.cond222
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbp), %rbx
	movq	%rbp, %rdi
	vzeroupper
	callq	free
	movq	%rbx, %rbp
	testq	%rbx, %rbx
	jne	.LBB6_125
# %bb.126:                              # %while.end227
	movq	88(%rsp), %rbx          # 8-byte Reload
	movq	104(%rsp), %rdi         # 8-byte Reload
	movl	$8, %edx
	movl	$arc_compare, %ecx
	movq	%rbx, %rsi
	callq	spec_qsort
	movq	424(%r13), %rcx
	cmpq	$15001, 408(%r13)       # imm = 0x3A99
	movq	$-1000000, %rdx         # imm = 0xFFF0BDC0
	movq	$-4000000, %rax         # imm = 0xFFC2F700
	cmovlq	%rdx, %rax
	xorl	%r15d, %r15d
	testq	%rbx, %rbx
	jle	.LBB6_131
# %bb.127:                              # %while.end227
	addq	448(%r13), %rax
	testq	%rax, %rax
	jle	.LBB6_131
# %bb.128:                              # %while.body.i839.preheader
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB6_129:                              # %while.body.i839
                                        # =>This Inner Loop Header: Depth=1
	movq	104(%rsp), %rdx         # 8-byte Reload
	leal	(%rcx,%r15), %esi
	movq	(%rdx,%r15,8), %rdx
	incq	%r15
	cmpq	%rax, %r15
	movl	%esi, (%rdx)
	movq	$1, 56(%rdx)
	jge	.LBB6_131
# %bb.130:                              # %while.body.i839
                                        #   in Loop: Header=BB6_129 Depth=1
	cmpq	%rbx, %r15
	jl	.LBB6_129
.LBB6_131:                              # %while.end.i
	leaq	-1(%rcx,%r15), %rax
	movabsq	$2361183241434822607, %rdi # imm = 0x20C49BA5E353F7CF
	addq	%r15, %rcx
	movq	$4000, 640(%r13)        # imm = 0xFA0
	imulq	%rdi
	movq	%rdx, %rax
	sarq	$9, %rdx
	shrq	$63, %rax
	leaq	1(%rdx,%rax), %rsi
	leaq	(%rdx,%rax), %rbp
	movq	%rcx, %rax
	imulq	%rdi
	movq	%rsi, 624(%r13)
	movq	%rdx, %rax
	sarq	$9, %rdx
	shrq	$63, %rax
	addq	%rax, %rdx
	imulq	$4000, %rdx, %rax       # imm = 0xFA0
	subq	%rax, %rcx
	leaq	-3999(%rcx,%rbp), %rcx
	cmoveq	%rsi, %rcx
	testq	%rcx, %rcx
	movq	%rcx, 632(%r13)
	jns	.LBB6_138
# %bb.132:                              # %while.body70.i.preheader
	movq	%rcx, %rax
	xorl	%edx, %edx
	movl	$4000, %edi             # imm = 0xFA0
	notq	%rax
	divq	%rsi
	incq	%rax
	cmpq	$16, %rax
	jb	.LBB6_136
# %bb.133:                              # %vector.ph1101
	movq	%rax, %rdx
	vpxor	%xmm1, %xmm1, %xmm1
	vpcmpeqd	%ymm2, %ymm2, %ymm2
	vpxor	%xmm3, %xmm3, %xmm3
	vpxor	%xmm4, %xmm4, %xmm4
	andq	$-16, %rdx
	movq	%rdx, %rdi
	imulq	%rsi, %rdi
	addq	%rdi, %rcx
	movl	$4000, %edi             # imm = 0xFA0
	vmovq	%rdi, %xmm0
	xorl	%edi, %edi
	.p2align	4, 0x90
.LBB6_134:                              # %vector.body1097
                                        # =>This Inner Loop Header: Depth=1
	addq	$16, %rdi
	vpaddq	%ymm2, %ymm0, %ymm0
	vpaddq	%ymm2, %ymm1, %ymm1
	vpaddq	%ymm2, %ymm3, %ymm3
	vpaddq	%ymm2, %ymm4, %ymm4
	cmpq	%rdx, %rdi
	jne	.LBB6_134
# %bb.135:                              # %middle.block1098
	vpaddq	%ymm0, %ymm1, %ymm0
	cmpq	%rdx, %rax
	vpaddq	%ymm0, %ymm3, %ymm0
	vpaddq	%ymm0, %ymm4, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpaddq	%ymm1, %ymm0, %ymm0
	vpshufd	$78, %xmm0, %xmm1       # xmm1 = xmm0[2,3,0,1]
	vpaddq	%xmm1, %xmm0, %xmm0
	vmovq	%xmm0, %rdi
	je	.LBB6_137
	.p2align	4, 0x90
.LBB6_136:                              # %while.body70.i
                                        # =>This Inner Loop Header: Depth=1
	decq	%rdi
	addq	%rsi, %rcx
	js	.LBB6_136
.LBB6_137:                              # %while.cond66.while.end76_crit_edge.i
	movq	%rcx, 632(%r13)
	movq	%rdi, 640(%r13)
.LBB6_138:                              # %marc_arcs.exit
	movq	104(%rsp), %rdi         # 8-byte Reload
	vzeroupper
	callq	free
	testq	%rbx, %rbx
	je	.LBB6_154
# %bb.139:                              # %if.then237
	movq	576(%r13), %rcx
	cmpq	$0, 144(%rsp)           # 8-byte Folded Reload
	je	.LBB6_147
# %bb.140:                              # %for.body250.preheader
	shlq	$3, %rbx
	addq	$56, %rcx
	xorl	%edi, %edi
	leaq	(%rbx,%rbx,8), %r8
	.p2align	4, 0x90
.LBB6_141:                              # %for.body250
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$1, (%rcx,%rdi)
	jne	.LBB6_146
# %bb.142:                              # %if.then254
                                        #   in Loop: Header=BB6_141 Depth=1
	movq	$0, (%rcx,%rdi)
	movw	$1, -24(%rcx,%rdi)
	movslq	-56(%rcx,%rdi), %rax
	cqto
	idivq	624(%r13)
	movq	632(%r13), %r9
	movq	640(%r13), %rsi
	movq	%rdx, %rbp
	subq	%r9, %rbp
	jle	.LBB6_144
# %bb.143:                              # %if.then.i828
                                        #   in Loop: Header=BB6_141 Depth=1
	imulq	%rsi, %r9
	decq	%rsi
	imulq	%rbp, %rsi
	addq	%r9, %rsi
	jmp	.LBB6_145
	.p2align	4, 0x90
.LBB6_144:                              # %if.else.i830
                                        #   in Loop: Header=BB6_141 Depth=1
	imulq	%rdx, %rsi
.LBB6_145:                              # %getArcPosition.exit834
                                        #   in Loop: Header=BB6_141 Depth=1
	movq	8(%rcx,%rdi), %rdx
	movq	56(%rsp), %r9           # 8-byte Reload
	addq	%rax, %rsi
	leaq	(%rsi,%rsi,8), %rax
	movq	%rdx, 64(%r9,%rax,8)
	vmovdqu	-56(%rcx,%rdi), %ymm0
	vmovdqu	-24(%rcx,%rdi), %ymm1
	vmovdqu	%ymm1, 32(%r9,%rax,8)
	vmovdqu	%ymm0, (%r9,%rax,8)
.LBB6_146:                              # %for.inc262
                                        #   in Loop: Header=BB6_141 Depth=1
	addq	$72, %rdi
	cmpq	%rdi, %r8
	jne	.LBB6_141
	jmp	.LBB6_154
.LBB6_147:                              # %for.body268.preheader
	shlq	$3, %rbx
	leaq	(%rbx,%rbx,8), %r8
	.p2align	4, 0x90
.LBB6_148:                              # %for.body268
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$1, 56(%rcx)
	jne	.LBB6_153
# %bb.149:                              # %if.then272
                                        #   in Loop: Header=BB6_148 Depth=1
	movq	$0, 56(%rcx)
	movw	$1, 32(%rcx)
	movq	16(%rcx), %rax
	movq	56(%rax), %rdx
	movq	%rdx, 40(%rcx)
	movq	%rcx, 56(%rax)
	movq	24(%rcx), %rax
	movq	64(%rax), %rdx
	movq	%rdx, 48(%rcx)
	movq	%rcx, 64(%rax)
	movslq	(%rcx), %rax
	cqto
	idivq	624(%r13)
	movq	632(%r13), %rsi
	movq	640(%r13), %rdi
	movq	%rdx, %rbp
	subq	%rsi, %rbp
	jle	.LBB6_151
# %bb.150:                              # %if.then.i810
                                        #   in Loop: Header=BB6_148 Depth=1
	imulq	%rdi, %rsi
	decq	%rdi
	imulq	%rbp, %rdi
	addq	%rsi, %rdi
	jmp	.LBB6_152
	.p2align	4, 0x90
.LBB6_151:                              # %if.else.i812
                                        #   in Loop: Header=BB6_148 Depth=1
	imulq	%rdx, %rdi
.LBB6_152:                              # %getArcPosition.exit816
                                        #   in Loop: Header=BB6_148 Depth=1
	movq	64(%rcx), %rdx
	movq	56(%rsp), %rsi          # 8-byte Reload
	addq	%rax, %rdi
	leaq	(%rdi,%rdi,8), %rax
	movq	%rdx, 64(%rsi,%rax,8)
	vmovdqu	(%rcx), %ymm0
	vmovdqu	32(%rcx), %ymm1
	vmovdqu	%ymm1, 32(%rsi,%rax,8)
	vmovdqu	%ymm0, (%rsi,%rax,8)
.LBB6_153:                              # %for.inc286
                                        #   in Loop: Header=BB6_148 Depth=1
	addq	$72, %rcx
	addq	$-72, %r8
	jne	.LBB6_148
.LBB6_154:                              # %if.end290
	addq	%r15, 440(%r13)
	subq	%r15, 448(%r13)
	movq	400(%r13), %r9
	movq	424(%r13), %r10
	movq	584(%r13), %r8
	testq	%r9, %r9
	js	.LBB6_175
# %bb.155:                              # %for.body.lr.ph.i.i
	movq	552(%r13), %rcx
	incq	%r9
	addq	$64, %rcx
	.p2align	4, 0x90
.LBB6_156:                              # %for.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rcx), %rax
	testq	%rax, %rax
	je	.LBB6_162
# %bb.157:                              # %land.lhs.true.i.i
                                        #   in Loop: Header=BB6_156 Depth=1
	movslq	(%rax), %rax
	testq	%rax, %rax
	js	.LBB6_162
# %bb.158:                              # %if.then.i.i723
                                        #   in Loop: Header=BB6_156 Depth=1
	cqto
	idivq	624(%r13)
	movq	632(%r13), %rsi
	movq	640(%r13), %rdi
	movq	%rdx, %rbp
	subq	%rsi, %rbp
	jle	.LBB6_160
# %bb.159:                              # %if.then.i756
                                        #   in Loop: Header=BB6_156 Depth=1
	imulq	%rdi, %rsi
	decq	%rdi
	imulq	%rbp, %rdi
	addq	%rsi, %rdi
	jmp	.LBB6_161
.LBB6_160:                              # %if.else.i758
                                        #   in Loop: Header=BB6_156 Depth=1
	imulq	%rdx, %rdi
.LBB6_161:                              # %getArcPosition.exit762
                                        #   in Loop: Header=BB6_156 Depth=1
	addq	%rax, %rdi
	leaq	(%rdi,%rdi,8), %rax
	leaq	(%r8,%rax,8), %rax
	movq	%rax, -16(%rcx)
.LBB6_162:                              # %if.end.i.i
                                        #   in Loop: Header=BB6_156 Depth=1
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.LBB6_168
# %bb.163:                              # %land.lhs.true7.i.i
                                        #   in Loop: Header=BB6_156 Depth=1
	movslq	(%rax), %rax
	testq	%rax, %rax
	js	.LBB6_168
# %bb.164:                              # %if.then12.i.i
                                        #   in Loop: Header=BB6_156 Depth=1
	cqto
	idivq	624(%r13)
	movq	632(%r13), %rsi
	movq	640(%r13), %rdi
	movq	%rdx, %rbp
	subq	%rsi, %rbp
	jle	.LBB6_166
# %bb.165:                              # %if.then.i743
                                        #   in Loop: Header=BB6_156 Depth=1
	imulq	%rdi, %rsi
	decq	%rdi
	imulq	%rbp, %rdi
	addq	%rsi, %rdi
	jmp	.LBB6_167
.LBB6_166:                              # %if.else.i
                                        #   in Loop: Header=BB6_156 Depth=1
	imulq	%rdx, %rdi
.LBB6_167:                              # %getArcPosition.exit
                                        #   in Loop: Header=BB6_156 Depth=1
	addq	%rax, %rdi
	leaq	(%rdi,%rdi,8), %rax
	leaq	(%r8,%rax,8), %rax
	movq	%rax, (%rcx)
.LBB6_168:                              # %if.end19.i.i
                                        #   in Loop: Header=BB6_156 Depth=1
	movq	-8(%rcx), %rax
	testq	%rax, %rax
	je	.LBB6_174
# %bb.169:                              # %land.lhs.true21.i.i
                                        #   in Loop: Header=BB6_156 Depth=1
	movslq	(%rax), %rax
	testq	%rax, %rax
	js	.LBB6_174
# %bb.170:                              # %if.then26.i.i
                                        #   in Loop: Header=BB6_156 Depth=1
	cqto
	idivq	624(%r13)
	movq	632(%r13), %rsi
	movq	640(%r13), %rdi
	movq	%rdx, %rbp
	subq	%rsi, %rbp
	jle	.LBB6_172
# %bb.171:                              # %if.then.i792
                                        #   in Loop: Header=BB6_156 Depth=1
	imulq	%rdi, %rsi
	decq	%rdi
	imulq	%rbp, %rdi
	addq	%rsi, %rdi
	jmp	.LBB6_173
.LBB6_172:                              # %if.else.i794
                                        #   in Loop: Header=BB6_156 Depth=1
	imulq	%rdx, %rdi
.LBB6_173:                              # %getArcPosition.exit798
                                        #   in Loop: Header=BB6_156 Depth=1
	addq	%rax, %rdi
	leaq	(%rdi,%rdi,8), %rax
	leaq	(%r8,%rax,8), %rax
	movq	%rax, -8(%rcx)
.LBB6_174:                              # %for.inc.i.i
                                        #   in Loop: Header=BB6_156 Depth=1
	addq	$104, %rcx
	decq	%r9
	jne	.LBB6_156
.LBB6_175:                              # %refreshArcPointers.exit.i
	movq	568(%r13), %r9
	testq	%r10, %r10
	jle	.LBB6_184
# %bb.176:                              # %for.body.i728.preheader
	xorl	%edi, %edi
	.p2align	4, 0x90
.LBB6_177:                              # %for.body.i728
                                        # =>This Inner Loop Header: Depth=1
	movslq	(%r9,%rdi), %rax
	testq	%rax, %rax
	js	.LBB6_182
# %bb.178:                              # %if.end.i732
                                        #   in Loop: Header=BB6_177 Depth=1
	cqto
	idivq	624(%r13)
	movq	632(%r13), %rbp
	movq	640(%r13), %rsi
	movq	%rdx, %rcx
	subq	%rbp, %rcx
	jle	.LBB6_180
# %bb.179:                              # %if.then.i774
                                        #   in Loop: Header=BB6_177 Depth=1
	imulq	%rsi, %rbp
	decq	%rsi
	imulq	%rcx, %rsi
	addq	%rbp, %rsi
	jmp	.LBB6_181
	.p2align	4, 0x90
.LBB6_180:                              # %if.else.i776
                                        #   in Loop: Header=BB6_177 Depth=1
	imulq	%rdx, %rsi
.LBB6_181:                              # %getArcPosition.exit780
                                        #   in Loop: Header=BB6_177 Depth=1
	movq	64(%r9,%rdi), %rcx
	addq	%rax, %rsi
	leaq	(%rsi,%rsi,8), %rax
	movq	%rcx, 64(%r8,%rax,8)
	vmovdqu	(%r9,%rdi), %ymm0
	vmovdqu	32(%r9,%rdi), %ymm1
	vmovdqu	%ymm1, 32(%r8,%rax,8)
	vmovdqu	%ymm0, (%r8,%rax,8)
	movq	568(%r13), %r9
.LBB6_182:                              # %for.inc.i735
                                        #   in Loop: Header=BB6_177 Depth=1
	addq	$72, %rdi
	decq	%r10
	jne	.LBB6_177
# %bb.183:                              # %refreshPositions.exit.loopexit
	movq	424(%r13), %r10
.LBB6_184:                              # %refreshPositions.exit
	addq	%r15, %r10
	movq	%r8, 568(%r13)
	movq	%r9, 584(%r13)
	leaq	(%r10,%r10,8), %rax
	movq	%r10, 424(%r13)
	leaq	(%r8,%rax,8), %rax
	movq	%rax, 576(%r13)
.LBB6_185:                              # %cleanup
	movq	%r15, %rax
	addq	$168, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	vzeroupper
	retq
.LBB6_186:                              # %resize_prob.exit
	.cfi_def_cfa_offset 224
	movl	$.L.str.28, %edi
	movq	%r13, %rsi
	xorl	%eax, %eax
	callq	printf
	movq	stdout(%rip), %rdi
	callq	fflush
	movq	$-1, %r15
	jmp	.LBB6_185
.Lfunc_end6:
	.size	price_out_impl, .Lfunc_end6-price_out_impl
	.cfi_endproc
                                        # -- End function
	.globl	main                    # -- Begin function main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	subq	$80, %rsp
	.cfi_def_cfa_offset 128
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	$-1, %r14d
	cmpl	$2, %edi
	jl	.LBB7_52
# %bb.1:                                # %if.end
	movl	%edi, %ebp
	movl	$.Lstr.35, %edi
	movq	%rsi, %rbx
	callq	puts
	movl	$.Lstr.36, %edi
	callq	puts
	movl	$.Lstr.37, %edi
	callq	puts
	movl	$.Lstr.38, %edi
	callq	puts
	movl	$.Lstr.39, %edi
	callq	puts
	movl	$10, %edi
	callq	putchar
	movl	$net, %edi
	movl	$648, %edx              # imm = 0x288
	xorl	%esi, %esi
	callq	memset
	movq	$10000000, net+528(%rip) # imm = 0x989680
	movl	$net, %edi
	movq	8(%rbx), %rsi
	callq	strcpy
	cmpl	$3, %ebp
	jne	.LBB7_3
# %bb.2:                                # %if.then8
	movq	16(%rbx), %rdi
	xorl	%esi, %esi
	movl	$10, %edx
	callq	strtol
	movl	%eax, %edx
	movq	%rsp, %rdi
	movl	$.L.str.13, %esi
	xorl	%eax, %eax
	callq	sprintf
	jmp	.LBB7_4
.LBB7_3:                                # %if.else
	movabsq	$32780217678717805, %rax # imm = 0x74756F2E66636D
	movq	%rax, (%rsp)
.LBB7_4:                                # %if.end14
	movl	$net, %edi
	callq	read_min
	testq	%rax, %rax
	je	.LBB7_14
# %bb.5:                                # %if.then16
	movl	$.Lstr.41, %edi
	callq	puts
	movq	net+552(%rip), %rdi
	testq	%rdi, %rdi
	je	.LBB7_7
# %bb.6:                                # %if.then.i
	callq	free
.LBB7_7:                                # %if.end.i
	movq	net+568(%rip), %rdi
	testq	%rdi, %rdi
	je	.LBB7_9
# %bb.8:                                # %if.then3.i
	callq	free
.LBB7_9:                                # %if.end5.i
	movq	net+592(%rip), %rdi
	testq	%rdi, %rdi
	je	.LBB7_11
# %bb.10:                               # %if.then7.i
	callq	free
.LBB7_11:                               # %if.end9.i
	movq	net+584(%rip), %rdi
	testq	%rdi, %rdi
	je	.LBB7_13
# %bb.12:                               # %if.then11.i
	callq	free
.LBB7_13:                               # %getfree.exit
	vxorpd	%xmm0, %xmm0, %xmm0
	vmovupd	%xmm0, net+560(%rip)
	movq	$0, net+552(%rip)
	movq	$0, net+576(%rip)
	movq	$0, net+600(%rip)
	vmovupd	%xmm0, net+584(%rip)
	jmp	.LBB7_52
.LBB7_14:                               # %if.end19
	movq	net+408(%rip), %rsi
	movl	$.L.str.16, %edi
	xorl	%eax, %eax
	callq	printf
	movq	net+552(%rip), %rax
	vxorpd	%xmm0, %xmm0, %xmm0
	leaq	104(%rax), %rdx
	movq	$0, 48(%rax)
	movq	$0, 24(%rax)
	movq	%rdx, 16(%rax)
	vmovupd	%xmm0, 32(%rax)
	movq	net+400(%rip), %rcx
	leaq	1(%rcx), %rsi
	movq	%rsi, 88(%rax)
	movl	$0, 8(%rax)
	movq	$-100000000, (%rax)     # imm = 0xFA0A1F00
	movq	$0, 80(%rax)
	movq	net+424(%rip), %rsi
	testq	%rsi, %rsi
	jle	.LBB7_19
# %bb.15:                               # %for.body.i.preheader
	movq	net+568(%rip), %rdi
	addq	$32, %rdi
	.p2align	4, 0x90
.LBB7_16:                               # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	cmpw	$-1, (%rdi)
	je	.LBB7_18
# %bb.17:                               # %if.then.i41
                                        #   in Loop: Header=BB7_16 Depth=1
	movw	$1, (%rdi)
.LBB7_18:                               # %for.inc.i
                                        #   in Loop: Header=BB7_16 Depth=1
	addq	$72, %rdi
	decq	%rsi
	jne	.LBB7_16
.LBB7_19:                               # %for.end.i
	testq	%rcx, %rcx
	jle	.LBB7_22
# %bb.20:                               # %for.body13.i.preheader
	movq	net+592(%rip), %rsi
	movq	%rcx, %rdi
	.p2align	4, 0x90
.LBB7_21:                               # %for.body13.i
                                        # =>This Inner Loop Header: Depth=1
	leaq	104(%rdx), %rbp
	leaq	-104(%rdx), %rbx
	movq	%rsi, 48(%rdx)
	movq	%rax, 24(%rdx)
	movq	$0, 16(%rdx)
	movq	%rbp, 32(%rdx)
	movq	%rbx, 40(%rdx)
	movq	$1, 88(%rdx)
	movq	$100000000, 8(%rsi)     # imm = 0x5F5E100
	movw	$0, 32(%rsi)
	movl	$1, 8(%rdx)
	movq	$0, (%rdx)
	movq	%rdx, 16(%rsi)
	movq	%rax, 24(%rsi)
	movl	$-2, (%rsi)
	movq	$0, 80(%rdx)
	addq	$72, %rsi
	movq	%rbp, %rdx
	decq	%rdi
	jne	.LBB7_21
.LBB7_22:                               # %primal_start_artificial.exit
	imulq	$104, %rcx, %rcx
	movq	$0, 32(%rax,%rcx)
	movq	$0, 144(%rax)
	callq	global_opt
	movq	%rsp, %rdi
	movl	$.L.str.29, %esi
	callq	fopen
	testq	%rax, %rax
	je	.LBB7_23
# %bb.24:                               # %if.end.i44
	movq	net+424(%rip), %rcx
	movq	%rax, %r12
	movq	net+568(%rip), %rax
	testq	%rcx, %rcx
	jle	.LBB7_27
# %bb.25:                               # %for.body.i.i.preheader
	leaq	56(%rax), %rdx
	movq	%rcx, %rsi
	.p2align	4, 0x90
.LBB7_26:                               # %for.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	xorl	%edi, %edi
	cmpw	$2, -24(%rdx)
	sete	%dil
	movq	%rdi, (%rdx)
	addq	$72, %rdx
	decq	%rsi
	jne	.LBB7_26
.LBB7_27:                               # %for.end.i.i
	movq	net+400(%rip), %rdx
	movq	net+552(%rip), %rbp
	testq	%rdx, %rdx
	jle	.LBB7_30
# %bb.28:                               # %for.body14.i.i.preheader
	leaq	184(%rbp), %rsi
	.p2align	4, 0x90
.LBB7_29:                               # %for.body14.i.i
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rsi), %rdi
	movq	(%rsi), %rbx
	addq	$104, %rsi
	decq	%rdx
	movq	%rbx, 56(%rdi)
	jne	.LBB7_29
.LBB7_30:                               # %for.cond25.preheader.i.i
	movq	net+528(%rip), %rdx
	testq	%rcx, %rcx
	jle	.LBB7_31
# %bb.32:                               # %for.body30.i.i.preheader
	addq	$8, %rax
	xorl	%ebx, %ebx
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB7_33:                               # %for.body30.i.i
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, 48(%rax)
	je	.LBB7_40
# %bb.34:                               # %if.then34.i.i
                                        #   in Loop: Header=BB7_33 Depth=1
	movq	8(%rax), %rdi
	movl	96(%rdi), %edi
	testl	%edi, %edi
	js	.LBB7_35
# %bb.38:                               # %if.then44.i.i
                                        #   in Loop: Header=BB7_33 Depth=1
	movq	(%rax), %rdi
	jne	.LBB7_37
# %bb.39:                               # %if.then50.i.i
                                        #   in Loop: Header=BB7_33 Depth=1
	addq	%rbx, %rdi
	incq	%rsi
	subq	%rdx, %rdi
	movq	%rdi, %rbx
	jmp	.LBB7_40
	.p2align	4, 0x90
.LBB7_35:                               # %land.lhs.true.i.i
                                        #   in Loop: Header=BB7_33 Depth=1
	movq	16(%rax), %rdi
	cmpl	$0, 96(%rdi)
	jg	.LBB7_40
# %bb.36:                               # %if.then44.thread.i.i
                                        #   in Loop: Header=BB7_33 Depth=1
	movq	(%rax), %rdi
.LBB7_37:                               # %if.else54.i.i
                                        #   in Loop: Header=BB7_33 Depth=1
	addq	%rdi, %rbx
.LBB7_40:                               # %for.inc62.i.i
                                        #   in Loop: Header=BB7_33 Depth=1
	addq	$72, %rax
	decq	%rcx
	jne	.LBB7_33
	jmp	.LBB7_41
.LBB7_23:                               # %primal_start_artificial.exit.write_objective_value.exit_crit_edge
	movq	net+552(%rip), %rbp
	xorl	%r15d, %r15d
	testq	%rbp, %rbp
	jne	.LBB7_43
	jmp	.LBB7_44
.LBB7_31:
	xorl	%esi, %esi
	xorl	%ebx, %ebx
.LBB7_41:                               # %flow_cost.exit.i
	vcvtsi2sdq	%rsi, %xmm1, %xmm1
	vcvtsi2sdq	%rdx, %xmm2, %xmm2
	vcvtsi2sdq	%rbx, %xmm3, %xmm0
	movl	$.L.str.33, %esi
	movq	%r12, %rdi
	movb	$1, %al
	movb	$1, %r15b
	vfmadd231sd	%xmm2, %xmm1, %xmm0 # xmm0 = (xmm1 * xmm2) + xmm0
	callq	fprintf
	movq	%r12, %rdi
	callq	fclose
	testq	%rbp, %rbp
	je	.LBB7_44
.LBB7_43:                               # %if.then.i47
	movq	%rbp, %rdi
	callq	free
.LBB7_44:                               # %if.end.i49
	movq	net+568(%rip), %rdi
	testq	%rdi, %rdi
	je	.LBB7_46
# %bb.45:                               # %if.then3.i50
	callq	free
.LBB7_46:                               # %if.end5.i52
	movq	net+592(%rip), %rdi
	testq	%rdi, %rdi
	je	.LBB7_48
# %bb.47:                               # %if.then7.i53
	callq	free
.LBB7_48:                               # %if.end9.i55
	movq	net+584(%rip), %rdi
	testq	%rdi, %rdi
	je	.LBB7_50
# %bb.49:                               # %if.then11.i56
	callq	free
.LBB7_50:                               # %getfree.exit57
	vxorpd	%xmm0, %xmm0, %xmm0
	testb	%r15b, %r15b
	vmovupd	%xmm0, net+560(%rip)
	movq	$0, net+552(%rip)
	movq	$0, net+576(%rip)
	movq	$0, net+600(%rip)
	vmovupd	%xmm0, net+584(%rip)
	je	.LBB7_52
# %bb.51:                               # %if.end28
	movl	$.Lstr.40, %edi
	callq	puts
	xorl	%r14d, %r14d
.LBB7_52:                               # %cleanup
	movl	%r14d, %eax
	addq	$80, %rsp
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end7:
	.size	main, .Lfunc_end7-main
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function read_min
.LCPI8_0:
	.quad	4608308318706860032     # double 1.25
	.text
	.globl	read_min
	.p2align	4, 0x90
	.type	read_min,@function
read_min:                               # @read_min
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$296, %rsp              # imm = 0x128
	.cfi_def_cfa_offset 352
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	$.L.str.24, %esi
	movq	%rdi, %rbx
	callq	fopen
	movq	$-1, %r15
	testq	%rax, %rax
	je	.LBB8_40
# %bb.1:                                # %if.end
	leaq	80(%rsp), %rbp
	movl	$200, %esi
	movq	%rax, %rdx
	movq	%rax, %r14
	movq	%rbp, %rdi
	callq	fgets_unlocked
	leaq	16(%rsp), %rdx
	leaq	8(%rsp), %rcx
	movl	$.L.str.25, %esi
	movq	%rbp, %rdi
	xorl	%eax, %eax
	callq	__isoc99_sscanf
	cmpl	$2, %eax
	jne	.LBB8_40
# %bb.2:                                # %if.end7
	movq	16(%rsp), %r8
	movabsq	$2361183241434822607, %rbp # imm = 0x20C49BA5E353F7CF
	movq	%r8, 408(%rbx)
	leaq	(%r8,%r8,2), %rcx
	leaq	1(%r8,%r8), %rdi
	movq	8(%rsp), %rax
	movq	%rax, 432(%rbx)
	leaq	(%rax,%rcx), %r9
	leaq	-1(%rax,%rcx), %rax
	movq	%rdi, 400(%rbx)
	imulq	%rbp
	movq	%r9, %rax
	movq	%r9, 424(%rbx)
	movq	$4000, 640(%rbx)        # imm = 0xFA0
	movq	%rdx, %rsi
	movq	%rdx, %r10
	imulq	%rbp
	movq	%r9, %rbp
	movq	%rdx, %rax
	sarq	$9, %rdx
	shrq	$63, %r10
	sarq	$9, %rsi
	shrq	$63, %rax
	leaq	1(%rsi,%r10), %rcx
	addq	%rax, %rdx
	movq	%rcx, 624(%rbx)
	imulq	$4000, %rdx, %rax       # imm = 0xFA0
	subq	%rax, %rbp
	leaq	-4000(%rbp), %rdx
	testq	%rbp, %rbp
	cmoveq	%rbp, %rdx
	movq	%rcx, %rbp
	addq	%rdx, %rbp
	movq	%rbp, 632(%rbx)
	js	.LBB8_5
# %bb.3:                                # %while.end
	cmpq	$15000, %r8             # imm = 0x3A98
	jg	.LBB8_11
.LBB8_4:                                # %if.then34
	movq	$0, 448(%rbx)
	movl	$2000000, %eax          # imm = 0x1E8480
	jmp	.LBB8_12
.LBB8_5:                                # %while.body.preheader
	addq	%r10, %rsi
	movq	$-2, %rax
	addq	%rsi, %rdx
	movl	$4000, %esi             # imm = 0xFA0
	subq	%rdx, %rax
	xorl	%edx, %edx
	divq	%rcx
	incq	%rax
	cmpq	$16, %rax
	jb	.LBB8_9
# %bb.6:                                # %vector.ph
	movq	%rax, %rdx
	vpxor	%xmm1, %xmm1, %xmm1
	vpcmpeqd	%ymm2, %ymm2, %ymm2
	vpxor	%xmm3, %xmm3, %xmm3
	vpxor	%xmm4, %xmm4, %xmm4
	andq	$-16, %rdx
	movq	%rdx, %rsi
	imulq	%rcx, %rsi
	addq	%rsi, %rbp
	movl	$4000, %esi             # imm = 0xFA0
	vmovq	%rsi, %xmm0
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB8_7:                                # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	addq	$16, %rsi
	vpaddq	%ymm2, %ymm0, %ymm0
	vpaddq	%ymm2, %ymm1, %ymm1
	vpaddq	%ymm2, %ymm3, %ymm3
	vpaddq	%ymm2, %ymm4, %ymm4
	cmpq	%rdx, %rsi
	jne	.LBB8_7
# %bb.8:                                # %middle.block
	vpaddq	%ymm0, %ymm1, %ymm0
	cmpq	%rdx, %rax
	vpaddq	%ymm0, %ymm3, %ymm0
	vpaddq	%ymm0, %ymm4, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpaddq	%ymm1, %ymm0, %ymm0
	vpshufd	$78, %xmm0, %xmm1       # xmm1 = xmm0[2,3,0,1]
	vpaddq	%xmm1, %xmm0, %xmm0
	vmovq	%xmm0, %rsi
	je	.LBB8_10
	.p2align	4, 0x90
.LBB8_9:                                # %while.body
                                        # =>This Inner Loop Header: Depth=1
	decq	%rsi
	addq	%rcx, %rbp
	js	.LBB8_9
.LBB8_10:                               # %while.cond.while.end_crit_edge
	movq	%rbp, 632(%rbx)
	movq	%rsi, 640(%rbx)
	cmpq	$15000, %r8             # imm = 0x3A98
	jle	.LBB8_4
.LBB8_11:                               # %if.else39
	vmovsd	.LCPI8_0(%rip), %xmm1   # xmm1 = mem[0],zero
	vcvtsi2sdq	%r9, %xmm5, %xmm0
	addq	$5000000, %r9           # imm = 0x4C4B40
	vmulsd	%xmm1, %xmm0, %xmm0
	vroundsd	$11, %xmm0, %xmm0, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %rax
	cmpq	%rax, %r9
	cmovlq	%rax, %r9
	movl	$28900000, %eax         # imm = 0x1B8FAA0
.LBB8_12:                               # %if.end60
	incq	%rdi
	movl	$104, %esi
	movq	%r9, 416(%rbx)
	movq	%rax, 456(%rbx)
	vzeroupper
	callq	calloc
	movq	%rax, 552(%rbx)
	movl	$72, %esi
	movq	400(%rbx), %rdi
	callq	calloc
	movq	%rax, 592(%rbx)
	movl	$72, %esi
	movq	416(%rbx), %rdi
	callq	calloc
	movq	%rax, 584(%rbx)
	movl	$72, %esi
	movq	416(%rbx), %rdi
	callq	calloc
	movq	%rax, 568(%rbx)
	movq	%rax, %rbp
	testq	%rax, %rax
	movq	552(%rbx), %r12
	je	.LBB8_31
# %bb.13:                               # %if.end60
	testq	%r12, %r12
	je	.LBB8_31
# %bb.14:                               # %land.lhs.true73
	movq	592(%rbx), %rax
	testq	%rax, %rax
	je	.LBB8_31
# %bb.15:                               # %land.lhs.true76
	cmpq	$0, 584(%rbx)
	je	.LBB8_31
# %bb.16:                               # %if.end82
	movq	400(%rbx), %rcx
	movq	408(%rbx), %r9
	movq	%r14, 40(%rsp)          # 8-byte Spill
	imulq	$104, %rcx, %rdx
	leaq	(%rcx,%rcx,8), %rcx
	testq	%r9, %r9
	leaq	(%rax,%rcx,8), %rax
	leaq	104(%r12,%rdx), %rdx
	movq	%rdx, 560(%rbx)
	movq	424(%rbx), %rdx
	leaq	(%rdx,%rdx,8), %rdx
	leaq	(%rbp,%rdx,8), %rdx
	movq	%rdx, 576(%rbx)
	movq	%rax, 600(%rbx)
	jle	.LBB8_41
# %bb.17:                               # %for.body.lr.ph
	leaq	104(%r12), %r14
	movl	$1, %r15d
	movq	%rbp, %r13
	xorl	%ecx, %ecx
	movl	$-1, 36(%rsp)           # 4-byte Folded Spill
	.p2align	4, 0x90
.LBB8_18:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	40(%rsp), %rdx          # 8-byte Reload
	leaq	80(%rsp), %rbp
	movl	$200, %esi
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%rbp, %rdi
	callq	fgets_unlocked
	movl	$.L.str.25, %esi
	movq	%rbp, %rdi
	leaq	16(%rsp), %rdx
	leaq	8(%rsp), %rcx
	xorl	%eax, %eax
	callq	__isoc99_sscanf
	cmpl	$2, %eax
	jne	.LBB8_57
# %bb.19:                               # %lor.lhs.false
                                        #   in Loop: Header=BB8_18 Depth=1
	movq	16(%rsp), %rax
	cmpq	8(%rsp), %rax
	jg	.LBB8_57
# %bb.20:                               # %if.end106
                                        #   in Loop: Header=BB8_18 Depth=1
	movl	36(%rsp), %eax          # 4-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%eax, 96(%r14)
	movq	$-1, 80(%r14)
	movq	408(%rbx), %r9
	leaq	(%r15,%r9), %rax
	imulq	$104, %rax, %r10
	movl	%r15d, 96(%r12,%r10)
	movq	$1, 80(%r12,%r10)
	movl	16(%rsp), %eax
	movl	%eax, 100(%r14)
	movl	8(%rsp), %eax
	movl	%eax, 100(%r12,%r10)
	movl	%ecx, (%r13)
	incq	%rcx
	imulq	$104, 400(%rbx), %r11
	leaq	(%r12,%r11), %rax
	movq	%rax, 16(%r13)
	movq	%r14, 24(%r13)
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movq	528(%rbx), %rsi
	leaq	15(%rsi), %rax
	movq	%rax, 8(%r13)
	movq	%rax, 64(%r13)
	movq	56(%r12,%r11), %rax
	movq	%rax, 40(%r13)
	movq	%r13, 56(%r12,%r11)
	movq	64(%r14), %rax
	movq	%rax, 48(%r13)
	movq	%r13, 64(%r14)
	movq	%rcx, %rax
	movq	624(%rbx), %rdi
	cqto
	movq	568(%rbx), %rbp
	movq	%rdi, 64(%rsp)          # 8-byte Spill
	idivq	%rdi
	movq	632(%rbx), %r8
	movq	640(%rbx), %r13
	movq	%r9, 56(%rsp)           # 8-byte Spill
	movq	%rdx, %rdi
	subq	%r8, %rdi
	jle	.LBB8_22
# %bb.21:                               # %if.then.i509
                                        #   in Loop: Header=BB8_18 Depth=1
	movq	%r13, %r9
	leaq	-1(%r13), %rdx
	imulq	%r8, %r9
	imulq	%rdi, %rdx
	addq	%r9, %rdx
	jmp	.LBB8_23
.LBB8_22:                               # %if.else.i
                                        #   in Loop: Header=BB8_18 Depth=1
	imulq	%r13, %rdx
.LBB8_23:                               # %getArcPosition.exit
                                        #   in Loop: Header=BB8_18 Depth=1
	movq	48(%rsp), %rdi          # 8-byte Reload
	addq	%rax, %rdx
	leaq	(%r12,%r10), %r9
	leaq	(%rdx,%rdx,8), %rax
	movl	%ecx, (%rbp,%rax,8)
	movq	%r9, 16(%rbp,%rax,8)
	leaq	(%rbp,%rax,8), %rdx
	incq	%rcx
	movq	%rdi, 24(%rbp,%rax,8)
	movq	$15, 8(%rbp,%rax,8)
	movq	$15, 64(%rbp,%rax,8)
	movq	56(%r12,%r10), %rdi
	movq	%rdi, 40(%rbp,%rax,8)
	movq	%rdx, 56(%r12,%r10)
	movq	64(%r12,%r11), %rdi
	movq	%rdi, 48(%rbp,%rax,8)
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	%rcx, %rax
	movq	%rdx, 64(%r12,%r11)
	movq	%r9, %r11
	cqto
	idivq	%rdi
	movq	%rdx, %rdi
	subq	%r8, %rdi
	jle	.LBB8_25
# %bb.24:                               # %if.then.i522
                                        #   in Loop: Header=BB8_18 Depth=1
	movq	%r13, %r9
	leaq	-1(%r13), %rdx
	imulq	%r8, %r9
	imulq	%rdx, %rdi
	addq	%r9, %rdi
	jmp	.LBB8_26
.LBB8_25:                               # %if.else.i524
                                        #   in Loop: Header=BB8_18 Depth=1
	imulq	%r13, %rdx
	movq	%rdx, %rdi
.LBB8_26:                               # %getArcPosition.exit528
                                        #   in Loop: Header=BB8_18 Depth=1
	addq	%rax, %rdi
	cmpq	$9999999, %rsi          # imm = 0x98967F
	movq	56(%rsp), %r9           # 8-byte Reload
	leaq	(%rdi,%rdi,8), %rax
	movl	$10000000, %edi         # imm = 0x989680
	cmovleq	%rdi, %rsi
	movl	%ecx, (%rbp,%rax,8)
	movq	%r14, 16(%rbp,%rax,8)
	movq	%r11, 24(%rbp,%rax,8)
	leaq	(%rbp,%rax,8), %rdx
	incq	%rcx
	addq	%rsi, %rsi
	movq	%rsi, 8(%rbp,%rax,8)
	movq	%rsi, 64(%rbp,%rax,8)
	movq	56(%r14), %rsi
	movq	%rsi, 40(%rbp,%rax,8)
	movq	%rdx, 56(%r14)
	movq	64(%r12,%r10), %rsi
	movq	%rsi, 48(%rbp,%rax,8)
	movq	%rcx, %rax
	movq	%rdx, 64(%r12,%r10)
	cqto
	idivq	64(%rsp)                # 8-byte Folded Reload
	movq	%rdx, %rsi
	subq	%r8, %rsi
	jle	.LBB8_28
# %bb.27:                               # %if.then.i540
                                        #   in Loop: Header=BB8_18 Depth=1
	imulq	%r13, %r8
	decq	%r13
	imulq	%r13, %rsi
	addq	%r8, %rsi
	jmp	.LBB8_29
.LBB8_28:                               # %if.else.i542
                                        #   in Loop: Header=BB8_18 Depth=1
	imulq	%r13, %rdx
	movq	%rdx, %rsi
.LBB8_29:                               # %getArcPosition.exit546
                                        #   in Loop: Header=BB8_18 Depth=1
	decl	36(%rsp)                # 4-byte Folded Spill
	addq	%rax, %rsi
	addq	$104, %r14
	cmpq	%r9, %r15
	leaq	1(%r15), %r15
	leaq	(%rsi,%rsi,8), %rax
	leaq	(%rbp,%rax,8), %r13
	jl	.LBB8_18
# %bb.30:
	addq	$3, 24(%rsp)            # 8-byte Folded Spill
	jmp	.LBB8_42
.LBB8_31:                               # %if.then79
	movl	$.Lstr.42, %edi
	callq	puts
	testq	%r12, %r12
	je	.LBB8_33
# %bb.32:                               # %if.then.i
	movq	%r12, %rdi
	callq	free
	movq	568(%rbx), %rbp
.LBB8_33:                               # %if.end.i
	testq	%rbp, %rbp
	je	.LBB8_35
# %bb.34:                               # %if.then3.i
	movq	%rbp, %rdi
	callq	free
.LBB8_35:                               # %if.end5.i
	movq	592(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB8_37
# %bb.36:                               # %if.then7.i
	callq	free
.LBB8_37:                               # %if.end9.i
	movq	584(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB8_39
# %bb.38:                               # %if.then11.i
	callq	free
.LBB8_39:                               # %getfree.exit
	vxorpd	%xmm0, %xmm0, %xmm0
	vmovupd	%xmm0, 560(%rbx)
	movq	$0, 552(%rbx)
	movq	$0, 576(%rbx)
	movq	$0, 600(%rbx)
	vmovupd	%xmm0, 584(%rbx)
.LBB8_40:                               # %cleanup
	movq	%r15, %rax
	addq	$296, %rsp              # imm = 0x128
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB8_41:
	.cfi_def_cfa_offset 352
	xorl	%eax, %eax
	movl	$1, %r15d
	movq	%rbp, %r13
	movq	%rax, 24(%rsp)          # 8-byte Spill
.LBB8_42:                               # %for.end
	leaq	1(%r9), %rax
	cmpq	%rax, %r15
	jne	.LBB8_57
# %bb.43:                               # %for.cond205.preheader
	cmpq	$0, 432(%rbx)
	jle	.LBB8_50
# %bb.44:                               # %for.body209.preheader
	leaq	80(%rsp), %r15
	xorl	%r14d, %r14d
.LBB8_45:                               # %for.body209
                                        # =>This Inner Loop Header: Depth=1
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	%r15, %rdi
	movl	$200, %esi
	callq	fgets_unlocked
	movl	$.L.str.27, %esi
	movq	%r15, %rdi
	leaq	16(%rsp), %rdx
	leaq	8(%rsp), %rcx
	leaq	72(%rsp), %r8
	xorl	%eax, %eax
	callq	__isoc99_sscanf
	cmpl	$3, %eax
	jne	.LBB8_57
# %bb.46:                               # %if.end217
                                        #   in Loop: Header=BB8_45 Depth=1
	movq	24(%rsp), %rax          # 8-byte Reload
	incq	%r14
	movl	%eax, (%r13)
	incq	%rax
	movq	408(%rbx), %r9
	movq	16(%rsp), %rcx
	movq	%rax, 24(%rsp)          # 8-byte Spill
	addq	%r9, %rcx
	imulq	$104, %rcx, %rsi
	leaq	(%r12,%rsi), %rcx
	movq	%rcx, 16(%r13)
	imulq	$104, 8(%rsp), %rcx
	leaq	(%r12,%rcx), %rdx
	movq	%rdx, 24(%r13)
	movq	72(%rsp), %rdx
	movq	%rdx, 64(%r13)
	movq	%rdx, 8(%r13)
	movq	56(%r12,%rsi), %rdx
	movq	%rdx, 40(%r13)
	movq	%r13, 56(%r12,%rsi)
	movq	64(%r12,%rcx), %rdx
	movq	%rdx, 48(%r13)
	movq	%r13, 64(%r12,%rcx)
	cqto
	movq	568(%rbx), %rbp
	movq	632(%rbx), %rsi
	idivq	624(%rbx)
	movq	640(%rbx), %rcx
	movq	%rdx, %rdi
	subq	%rsi, %rdi
	jle	.LBB8_48
# %bb.47:                               # %if.then.i558
                                        #   in Loop: Header=BB8_45 Depth=1
	imulq	%rcx, %rsi
	decq	%rcx
	imulq	%rdi, %rcx
	addq	%rsi, %rcx
	jmp	.LBB8_49
.LBB8_48:                               # %if.else.i560
                                        #   in Loop: Header=BB8_45 Depth=1
	imulq	%rdx, %rcx
.LBB8_49:                               # %getArcPosition.exit564
                                        #   in Loop: Header=BB8_45 Depth=1
	addq	%rax, %rcx
	cmpq	432(%rbx), %r14
	leaq	(%rcx,%rcx,8), %rax
	leaq	(%rbp,%rax,8), %r13
	jl	.LBB8_45
.LBB8_50:                               # %if.end264
	movq	40(%rsp), %rdi          # 8-byte Reload
	movq	%r9, %r12
	callq	fclose
	testq	%r12, %r12
	movq	%r12, %rax
	movb	$0, 200(%rbx)
	jle	.LBB8_60
# %bb.51:                               # %for.body271.lr.ph
	movq	640(%rbx), %r10
	movq	528(%rbx), %rax
	movq	632(%rbx), %r14
	movq	624(%rbx), %r8
	movl	$10000000, %esi         # imm = 0x989680
	movl	$2, %ecx
	movq	%r10, %r11
	leaq	-1(%r10), %r9
	imulq	%r14, %r11
	cmpq	$9999999, %rax          # imm = 0x98967F
	cmovgq	%rax, %rsi
	xorl	%r15d, %r15d
	xorl	%ebx, %ebx
	addq	%rsi, %rsi
	negq	%rsi
	.p2align	4, 0x90
.LBB8_52:                               # %for.body271
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rax
	cqto
	idivq	%r8
	movq	%rdx, %rdi
	subq	%r14, %rdi
	jle	.LBB8_54
# %bb.53:                               # %if.then.i576
                                        #   in Loop: Header=BB8_52 Depth=1
	imulq	%r9, %rdi
	addq	%r11, %rdi
	jmp	.LBB8_55
.LBB8_54:                               # %if.else.i578
                                        #   in Loop: Header=BB8_52 Depth=1
	imulq	%r10, %rdx
	movq	%rdx, %rdi
.LBB8_55:                               # %getArcPosition.exit582
                                        #   in Loop: Header=BB8_52 Depth=1
	addq	%rax, %rdi
	incq	%rbx
	addq	$3, %rcx
	leaq	(%rdi,%rdi,8), %rax
	cmpq	%r12, %rbx
	movq	%rsi, 8(%rbp,%rax,8)
	movq	%rsi, 64(%rbp,%rax,8)
	jl	.LBB8_52
	jmp	.LBB8_40
.LBB8_57:
	movq	$-1, %r15
	jmp	.LBB8_40
.LBB8_60:
	xorl	%r15d, %r15d
	jmp	.LBB8_40
.Lfunc_end8:
	.size	read_min, .Lfunc_end8-read_min
	.cfi_endproc
                                        # -- End function
	.globl	getfree                 # -- Begin function getfree
	.p2align	4, 0x90
	.type	getfree,@function
getfree:                                # @getfree
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movq	552(%rdi), %rdi
	testq	%rdi, %rdi
	je	.LBB9_2
# %bb.1:                                # %if.then
	callq	free
.LBB9_2:                                # %if.end
	movq	568(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB9_4
# %bb.3:                                # %if.then3
	callq	free
.LBB9_4:                                # %if.end5
	movq	592(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB9_6
# %bb.5:                                # %if.then7
	callq	free
.LBB9_6:                                # %if.end9
	movq	584(%rbx), %rdi
	testq	%rdi, %rdi
	je	.LBB9_8
# %bb.7:                                # %if.then11
	callq	free
.LBB9_8:                                # %if.end13
	vxorps	%xmm0, %xmm0, %xmm0
	xorl	%eax, %eax
	vmovups	%xmm0, 560(%rbx)
	movq	$0, 552(%rbx)
	movq	$0, 576(%rbx)
	movq	$0, 600(%rbx)
	vmovups	%xmm0, 584(%rbx)
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end9:
	.size	getfree, .Lfunc_end9-getfree
	.cfi_endproc
                                        # -- End function
	.globl	primal_start_artificial # -- Begin function primal_start_artificial
	.p2align	4, 0x90
	.type	primal_start_artificial,@function
primal_start_artificial:                # @primal_start_artificial
	.cfi_startproc
# %bb.0:                                # %entry
	movq	552(%rdi), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	leaq	104(%rax), %rdx
	movq	$0, 48(%rax)
	movq	$0, 24(%rax)
	movq	%rdx, 16(%rax)
	vmovups	%xmm0, 32(%rax)
	movq	400(%rdi), %r8
	leaq	1(%r8), %rcx
	movq	%rcx, 88(%rax)
	movl	$0, 8(%rax)
	movq	$-100000000, (%rax)     # imm = 0xFA0A1F00
	movq	$0, 80(%rax)
	movq	424(%rdi), %r9
	testq	%r9, %r9
	jle	.LBB10_5
# %bb.1:                                # %for.body.preheader
	movq	568(%rdi), %rcx
	xorl	%esi, %esi
	addq	$32, %rcx
	.p2align	4, 0x90
.LBB10_2:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	cmpw	$-1, (%rcx)
	je	.LBB10_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB10_2 Depth=1
	movw	$1, (%rcx)
.LBB10_4:                               # %for.inc
                                        #   in Loop: Header=BB10_2 Depth=1
	incq	%rsi
	addq	$72, %rcx
	cmpq	%rsi, %r9
	jg	.LBB10_2
.LBB10_5:                               # %for.end
	testq	%r8, %r8
	jle	.LBB10_8
# %bb.6:                                # %for.body13.preheader
	movq	592(%rdi), %rsi
	movq	%r8, %rdi
	.p2align	4, 0x90
.LBB10_7:                               # %for.body13
                                        # =>This Inner Loop Header: Depth=1
	leaq	104(%rdx), %r9
	leaq	-104(%rdx), %rcx
	movq	%rsi, 48(%rdx)
	movq	%rax, 24(%rdx)
	movq	$0, 16(%rdx)
	movq	%r9, 32(%rdx)
	movq	%rcx, 40(%rdx)
	movq	$1, 88(%rdx)
	movq	$100000000, 8(%rsi)     # imm = 0x5F5E100
	movw	$0, 32(%rsi)
	movl	$1, 8(%rdx)
	movq	$0, (%rdx)
	movq	%rdx, 16(%rsi)
	movq	%rax, 24(%rsi)
	movl	$-2, (%rsi)
	movq	$0, 80(%rdx)
	addq	$72, %rsi
	movq	%r9, %rdx
	decq	%rdi
	jne	.LBB10_7
.LBB10_8:                               # %for.end63
	imulq	$104, %r8, %rcx
	movq	$0, 32(%rax,%rcx)
	movq	$0, 144(%rax)
	xorl	%eax, %eax
	retq
.Lfunc_end10:
	.size	primal_start_artificial, .Lfunc_end10-primal_start_artificial
	.cfi_endproc
                                        # -- End function
	.globl	write_objective_value   # -- Begin function write_objective_value
	.p2align	4, 0x90
	.type	write_objective_value,@function
write_objective_value:                  # @write_objective_value
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %r15
	movl	$.L.str.29, %esi
	callq	fopen
	testq	%rax, %rax
	je	.LBB11_1
# %bb.2:                                # %if.end
	movq	%rax, %r14
	movq	424(%r15), %rax
	movq	568(%r15), %rcx
	testq	%rax, %rax
	jle	.LBB11_5
# %bb.3:                                # %for.body.i.preheader
	leaq	56(%rcx), %rdx
	movq	%rax, %rsi
	.p2align	4, 0x90
.LBB11_4:                               # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	xorl	%edi, %edi
	cmpw	$2, -24(%rdx)
	sete	%dil
	movq	%rdi, (%rdx)
	addq	$72, %rdx
	decq	%rsi
	jne	.LBB11_4
.LBB11_5:                               # %for.end.i
	movq	400(%r15), %rdx
	testq	%rdx, %rdx
	jle	.LBB11_8
# %bb.6:                                # %for.body14.i.preheader
	movq	552(%r15), %rsi
	addq	$184, %rsi
	.p2align	4, 0x90
.LBB11_7:                               # %for.body14.i
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rsi), %rdi
	movq	(%rsi), %rbx
	addq	$104, %rsi
	decq	%rdx
	movq	%rbx, 56(%rdi)
	jne	.LBB11_7
.LBB11_8:                               # %for.cond25.preheader.i
	testq	%rax, %rax
	jle	.LBB11_9
# %bb.10:                               # %for.body30.lr.ph.i
	addq	$8, %rcx
	xorl	%esi, %esi
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB11_11:                              # %for.body30.i
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, 48(%rcx)
	je	.LBB11_18
# %bb.12:                               # %if.then34.i
                                        #   in Loop: Header=BB11_11 Depth=1
	movq	8(%rcx), %rdi
	movl	96(%rdi), %edi
	testl	%edi, %edi
	js	.LBB11_13
# %bb.16:                               # %if.then44.i
                                        #   in Loop: Header=BB11_11 Depth=1
	movq	(%rcx), %rdi
	jne	.LBB11_15
# %bb.17:                               # %if.then50.i
                                        #   in Loop: Header=BB11_11 Depth=1
	addq	%rsi, %rdi
	subq	528(%r15), %rdi
	incq	%rdx
	movq	%rdi, %rsi
	jmp	.LBB11_18
	.p2align	4, 0x90
.LBB11_13:                              # %land.lhs.true.i
                                        #   in Loop: Header=BB11_11 Depth=1
	movq	16(%rcx), %rdi
	cmpl	$0, 96(%rdi)
	jg	.LBB11_18
# %bb.14:                               # %if.then44.thread.i
                                        #   in Loop: Header=BB11_11 Depth=1
	movq	(%rcx), %rdi
.LBB11_15:                              # %if.else54.i
                                        #   in Loop: Header=BB11_11 Depth=1
	addq	%rdi, %rsi
.LBB11_18:                              # %for.inc62.i
                                        #   in Loop: Header=BB11_11 Depth=1
	addq	$72, %rcx
	decq	%rax
	jne	.LBB11_11
	jmp	.LBB11_19
.LBB11_1:
	movq	$-1, %rax
	jmp	.LBB11_20
.LBB11_9:
	xorl	%edx, %edx
	xorl	%esi, %esi
.LBB11_19:                              # %flow_cost.exit
	vcvtsi2sdq	528(%r15), %xmm0, %xmm2
	vcvtsi2sdq	%rdx, %xmm0, %xmm1
	vcvtsi2sdq	%rsi, %xmm0, %xmm0
	movl	$.L.str.33, %esi
	movq	%r14, %rdi
	movb	$1, %al
	vfmadd231sd	%xmm2, %xmm1, %xmm0 # xmm0 = (xmm1 * xmm2) + xmm0
	callq	fprintf
	movq	%r14, %rdi
	callq	fclose
	xorl	%eax, %eax
.LBB11_20:                              # %cleanup
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end11:
	.size	write_objective_value, .Lfunc_end11-write_objective_value
	.cfi_endproc
                                        # -- End function
	.globl	refresh_neighbour_lists # -- Begin function refresh_neighbour_lists
	.p2align	4, 0x90
	.type	refresh_neighbour_lists,@function
refresh_neighbour_lists:                # @refresh_neighbour_lists
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	552(%rdi), %rax
	movq	560(%rdi), %rcx
	movq	%rsi, %r14
	movq	%rdi, %r15
	cmpq	%rcx, %rax
	jae	.LBB12_3
# %bb.1:                                # %for.body.preheader
	vxorps	%xmm0, %xmm0, %xmm0
	.p2align	4, 0x90
.LBB12_2:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	vmovups	%xmm0, 56(%rax)
	addq	$104, %rax
	cmpq	%rcx, %rax
	jb	.LBB12_2
.LBB12_3:                               # %for.end
	cmpq	$0, 424(%r15)
	jle	.LBB12_6
# %bb.4:                                # %for.body4.preheader
	movq	568(%r15), %rbx
	movl	$1, %esi
	movq	%r15, %rdi
	movl	$1, %r12d
	movq	16(%rbx), %rax
	movq	56(%rax), %rcx
	movq	%rcx, 40(%rbx)
	movq	%rbx, 56(%rax)
	movq	24(%rbx), %rax
	movq	64(%rax), %rcx
	movq	%rcx, 48(%rbx)
	movq	%rbx, 64(%rax)
	callq	*%r14
	cmpq	$2, 424(%r15)
	jl	.LBB12_6
	.p2align	4, 0x90
.LBB12_5:                               # %for.body4.for.body4_crit_edge
                                        # =>This Inner Loop Header: Depth=1
	leaq	(%rax,%rax,8), %rax
	movq	568(%r15), %r13
	incq	%r12
	movq	%r15, %rdi
	movq	16(%rbx,%rax,8), %rdx
	leaq	(%rbx,%rax,8), %rcx
	movq	56(%rdx), %rsi
	movq	%rsi, 40(%rbx,%rax,8)
	movq	%rcx, 56(%rdx)
	movq	24(%rbx,%rax,8), %rdx
	movq	64(%rdx), %rsi
	movq	%rsi, 48(%rbx,%rax,8)
	movq	%r12, %rsi
	movq	%rcx, 64(%rdx)
	callq	*%r14
	cmpq	%r12, 424(%r15)
	movq	%r13, %rbx
	jg	.LBB12_5
.LBB12_6:                               # %for.end14
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end12:
	.size	refresh_neighbour_lists, .Lfunc_end12-refresh_neighbour_lists
	.cfi_endproc
                                        # -- End function
	.globl	start                   # -- Begin function start
	.p2align	4, 0x90
	.type	start,@function
start:                                  # @start
	.cfi_startproc
# %bb.0:                                # %entry
	xorl	%eax, %eax
	retq
.Lfunc_end13:
	.size	start, .Lfunc_end13-start
	.cfi_endproc
                                        # -- End function
	.globl	getArcPosition          # -- Begin function getArcPosition
	.p2align	4, 0x90
	.type	getArcPosition,@function
getArcPosition:                         # @getArcPosition
	.cfi_startproc
# %bb.0:                                # %entry
	movq	%rsi, %rax
	cqto
	idivq	624(%rdi)
	movq	632(%rdi), %rsi
	movq	640(%rdi), %rcx
	movq	%rdx, %rdi
	subq	%rsi, %rdi
	jle	.LBB14_2
# %bb.1:                                # %if.then
	imulq	%rcx, %rsi
	decq	%rcx
	imulq	%rdi, %rcx
	addq	%rsi, %rcx
	jmp	.LBB14_3
.LBB14_2:                               # %if.else
	imulq	%rdx, %rcx
.LBB14_3:                               # %if.end
	addq	%rax, %rcx
	movq	%rcx, %rax
	retq
.Lfunc_end14:
	.size	getArcPosition, .Lfunc_end14-getArcPosition
	.cfi_endproc
                                        # -- End function
	.globl	flow_org_cost           # -- Begin function flow_org_cost
	.p2align	4, 0x90
	.type	flow_org_cost,@function
flow_org_cost:                          # @flow_org_cost
	.cfi_startproc
# %bb.0:                                # %entry
	movq	424(%rdi), %r9
	movq	568(%rdi), %rcx
	testq	%r9, %r9
	jle	.LBB15_3
# %bb.1:                                # %for.body.preheader
	leaq	56(%rcx), %rdx
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB15_2:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpw	$2, -24(%rdx)
	sete	%al
	incq	%rsi
	movq	%rax, (%rdx)
	addq	$72, %rdx
	cmpq	%rsi, %r9
	jg	.LBB15_2
.LBB15_3:                               # %for.end
	movq	400(%rdi), %r8
	testq	%r8, %r8
	jle	.LBB15_6
# %bb.4:                                # %for.body14.preheader
	movq	552(%rdi), %rsi
	xorl	%edx, %edx
	addq	$80, %rsi
	.p2align	4, 0x90
.LBB15_5:                               # %for.body14
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rsi), %r10
	movq	(%rsi), %rax
	incq	%rdx
	addq	$104, %rsi
	cmpq	%rdx, %r8
	movq	%rax, 56(%r10)
	jg	.LBB15_5
.LBB15_6:                               # %for.cond25.preheader
	testq	%r9, %r9
	jle	.LBB15_7
# %bb.8:                                # %for.body30.lr.ph
	addq	$64, %rcx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	.p2align	4, 0x90
.LBB15_9:                               # %for.body30
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -8(%rcx)
	je	.LBB15_16
# %bb.10:                               # %if.then34
                                        #   in Loop: Header=BB15_9 Depth=1
	movq	-48(%rcx), %rax
	movl	96(%rax), %eax
	testl	%eax, %eax
	js	.LBB15_11
# %bb.14:                               # %if.then44
                                        #   in Loop: Header=BB15_9 Depth=1
	movq	(%rcx), %rsi
	jne	.LBB15_13
# %bb.15:                               # %if.then50
                                        #   in Loop: Header=BB15_9 Depth=1
	addq	%rdx, %rsi
	subq	528(%rdi), %rsi
	incq	%r8
	movq	%rsi, %rdx
	jmp	.LBB15_16
	.p2align	4, 0x90
.LBB15_11:                              # %land.lhs.true
                                        #   in Loop: Header=BB15_9 Depth=1
	movq	-40(%rcx), %rax
	cmpl	$0, 96(%rax)
	jg	.LBB15_16
# %bb.12:                               # %if.then44.thread
                                        #   in Loop: Header=BB15_9 Depth=1
	movq	(%rcx), %rsi
.LBB15_13:                              # %if.else54
                                        #   in Loop: Header=BB15_9 Depth=1
	addq	%rsi, %rdx
.LBB15_16:                              # %for.inc62
                                        #   in Loop: Header=BB15_9 Depth=1
	addq	$72, %rcx
	decq	%r9
	jne	.LBB15_9
	jmp	.LBB15_17
.LBB15_7:
	xorl	%r8d, %r8d
	xorl	%edx, %edx
.LBB15_17:                              # %for.end64
	pushq	%rax
	.cfi_def_cfa_offset 16
	vcvtsi2sdq	528(%rdi), %xmm0, %xmm1
	vcvtsi2sdq	%r8, %xmm0, %xmm2
	vcvtsi2sdq	%rdx, %xmm0, %xmm0
	movl	$.L.str.18, %edi
	movb	$1, %al
	vfmadd231sd	%xmm1, %xmm2, %xmm0 # xmm0 = (xmm2 * xmm1) + xmm0
	vmovsd	%xmm0, (%rsp)           # 8-byte Spill
	callq	printf
	vmovsd	(%rsp), %xmm0           # 8-byte Reload
                                        # xmm0 = mem[0],zero
	popq	%rax
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end15:
	.size	flow_org_cost, .Lfunc_end15-flow_org_cost
	.cfi_endproc
                                        # -- End function
	.globl	primal_feasible         # -- Begin function primal_feasible
	.p2align	4, 0x90
	.type	primal_feasible,@function
primal_feasible:                        # @primal_feasible
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	552(%rdi), %rbx
	movq	560(%rdi), %r12
	movq	%rdi, %r14
	addq	$104, %rbx
	cmpq	%r12, %rbx
	jae	.LBB16_7
# %bb.1:                                # %for.body.lr.ph
	movq	512(%r14), %rbp
	movq	592(%r14), %rcx
	movq	600(%r14), %rdx
	movq	%rbp, %r13
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	negq	%r13
	.p2align	4, 0x90
.LBB16_2:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	48(%rbx), %rax
	movq	80(%rbx), %r15
	cmpq	%rcx, %rax
	jb	.LBB16_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB16_2 Depth=1
	cmpq	%rdx, %rax
	jae	.LBB16_8
# %bb.4:                                # %if.then
                                        #   in Loop: Header=BB16_2 Depth=1
	movq	%r15, %rax
	negq	%rax
	cmovlq	%r15, %rax
	cmpq	%rbp, %rax
	jle	.LBB16_6
# %bb.5:                                # %if.then7
                                        #   in Loop: Header=BB16_2 Depth=1
	movl	$.L.str.19, %edi
	xorl	%eax, %eax
	callq	printf
	movl	96(%rbx), %esi
	movl	$.L.str.20, %edi
	movq	%r15, %rdx
	xorl	%eax, %eax
	callq	printf
	movq	8(%rsp), %rdx           # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	jmp	.LBB16_6
	.p2align	4, 0x90
.LBB16_8:                               # %if.else
                                        #   in Loop: Header=BB16_2 Depth=1
	cmpq	%r13, %r15
	jl	.LBB16_10
# %bb.9:                                # %if.else
                                        #   in Loop: Header=BB16_2 Depth=1
	leaq	-1(%r15), %rax
	cmpq	%rbp, %rax
	jg	.LBB16_10
.LBB16_6:                               # %for.inc
                                        #   in Loop: Header=BB16_2 Depth=1
	addq	$104, %rbx
	cmpq	%r12, %rbx
	jb	.LBB16_2
.LBB16_7:                               # %for.end
	movq	$1, 488(%r14)
	xorl	%eax, %eax
.LBB16_11:                              # %cleanup
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.LBB16_10:                              # %if.then15
	.cfi_def_cfa_offset 80
	movl	$.L.str.19, %edi
	xorl	%eax, %eax
	callq	printf
	movl	$.L.str.21, %edi
	movq	%r15, %rsi
	xorl	%eax, %eax
	callq	printf
	movl	$1, %eax
	movq	$0, 488(%r14)
	jmp	.LBB16_11
.Lfunc_end16:
	.size	primal_feasible, .Lfunc_end16-primal_feasible
	.cfi_endproc
                                        # -- End function
	.globl	dual_feasible           # -- Begin function dual_feasible
	.p2align	4, 0x90
	.type	dual_feasible,@function
dual_feasible:                          # @dual_feasible
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	568(%rdi), %rax
	movq	576(%rdi), %rcx
	xorl	%ebx, %ebx
	cmpq	%rcx, %rax
	jb	.LBB17_2
	jmp	.LBB17_8
	.p2align	4, 0x90
.LBB17_5:                               # %for.inc
                                        #   in Loop: Header=BB17_2 Depth=1
	addq	$72, %rax
	cmpq	%rcx, %rax
	jae	.LBB17_8
.LBB17_2:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	16(%rax), %rsi
	movq	24(%rax), %r9
	movq	8(%rax), %rdx
	movswl	32(%rax), %r8d
	subq	(%rsi), %rdx
	addq	(%r9), %rdx
	cmpl	$2, %r8d
	jae	.LBB17_3
# %bb.6:                                # %sw.bb
                                        #   in Loop: Header=BB17_2 Depth=1
	xorl	%esi, %esi
	subq	512(%rdi), %rsi
	cmpq	%rsi, %rdx
	jge	.LBB17_5
	jmp	.LBB17_7
	.p2align	4, 0x90
.LBB17_3:                               # %for.body
                                        #   in Loop: Header=BB17_2 Depth=1
	jne	.LBB17_5
# %bb.4:                                # %sw.bb5
                                        #   in Loop: Header=BB17_2 Depth=1
	cmpq	512(%rdi), %rdx
	jle	.LBB17_5
.LBB17_7:                               # %DUAL_INFEAS
	movq	stderr(%rip), %rcx
	movl	$.L.str.22, %edi
	movl	$22, %esi
	movl	$1, %edx
	movl	$1, %ebx
	callq	fwrite
	movq	stderr(%rip), %rcx
	movl	$.L.str.23, %edi
	movl	$22, %esi
	movl	$1, %edx
	callq	fwrite
.LBB17_8:                               # %cleanup
	movq	%rbx, %rax
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end17:
	.size	dual_feasible, .Lfunc_end17-dual_feasible
	.cfi_endproc
                                        # -- End function
	.globl	refreshArcPointers      # -- Begin function refreshArcPointers
	.p2align	4, 0x90
	.type	refreshArcPointers,@function
refreshArcPointers:                     # @refreshArcPointers
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	cmpq	$0, 400(%rdi)
	js	.LBB18_12
# %bb.1:                                # %for.body.lr.ph
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %r13
	movq	$-1, %r12
	movl	$64, %ebx
	.p2align	4, 0x90
.LBB18_2:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	552(%r13), %rbp
	movq	-16(%rbp,%rbx), %rax
	testq	%rax, %rax
	je	.LBB18_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB18_2 Depth=1
	movslq	(%rax), %rsi
	testq	%rsi, %rsi
	js	.LBB18_5
# %bb.4:                                # %if.then
                                        #   in Loop: Header=BB18_2 Depth=1
	movq	%r13, %rdi
	callq	*%r15
	leaq	(%rax,%rax,8), %rax
	leaq	(%r14,%rax,8), %rax
	movq	%rax, -16(%rbp,%rbx)
.LBB18_5:                               # %if.end
                                        #   in Loop: Header=BB18_2 Depth=1
	movq	(%rbp,%rbx), %rax
	testq	%rax, %rax
	je	.LBB18_8
# %bb.6:                                # %land.lhs.true7
                                        #   in Loop: Header=BB18_2 Depth=1
	movslq	(%rax), %rsi
	testq	%rsi, %rsi
	js	.LBB18_8
# %bb.7:                                # %if.then12
                                        #   in Loop: Header=BB18_2 Depth=1
	movq	%r13, %rdi
	callq	*%r15
	leaq	(%rax,%rax,8), %rax
	leaq	(%r14,%rax,8), %rax
	movq	%rax, (%rbp,%rbx)
.LBB18_8:                               # %if.end19
                                        #   in Loop: Header=BB18_2 Depth=1
	movq	-8(%rbp,%rbx), %rax
	testq	%rax, %rax
	je	.LBB18_11
# %bb.9:                                # %land.lhs.true21
                                        #   in Loop: Header=BB18_2 Depth=1
	movslq	(%rax), %rsi
	testq	%rsi, %rsi
	js	.LBB18_11
# %bb.10:                               # %if.then26
                                        #   in Loop: Header=BB18_2 Depth=1
	movq	%r13, %rdi
	callq	*%r15
	leaq	(%rax,%rax,8), %rax
	leaq	(%r14,%rax,8), %rax
	movq	%rax, -8(%rbp,%rbx)
.LBB18_11:                              # %for.inc
                                        #   in Loop: Header=BB18_2 Depth=1
	incq	%r12
	addq	$104, %rbx
	cmpq	400(%r13), %r12
	jl	.LBB18_2
.LBB18_12:                              # %for.end
	xorl	%eax, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end18:
	.size	refreshArcPointers, .Lfunc_end18-refreshArcPointers
	.cfi_endproc
                                        # -- End function
	.globl	marc_arcs               # -- Begin function marc_arcs
	.p2align	4, 0x90
	.type	marc_arcs,@function
marc_arcs:                              # @marc_arcs
	.cfi_startproc
# %bb.0:                                # %entry
	cmpq	$15001, 408(%rdi)       # imm = 0x3A99
	movq	$-1000000, %rax         # imm = 0xFFF0BDC0
	movq	$-4000000, %r8          # imm = 0xFFC2F700
	cmovlq	%rax, %r8
	xorl	%eax, %eax
	addq	448(%rdi), %r8
	movq	$0, (%rsi)
	movq	(%rdx), %r9
	movq	%r9, (%rsi)
	jle	.LBB19_8
# %bb.1:                                # %entry
	testq	%r9, %r9
	jle	.LBB19_8
# %bb.2:                                # %while.body.lr.ph
	movq	(%rcx), %r9
	movq	424(%rdi), %r10
	xorl	%eax, %eax
	.p2align	4, 0x90
.LBB19_3:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	cmpq	(%rdx), %rax
	jge	.LBB19_4
# %bb.5:                                # %if.then14
                                        #   in Loop: Header=BB19_3 Depth=1
	movq	(%r9,%rax,8), %r11
	jmp	.LBB19_6
	.p2align	4, 0x90
.LBB19_4:                               #   in Loop: Header=BB19_3 Depth=1
	xorl	%r11d, %r11d
.LBB19_6:                               # %for.end32
                                        #   in Loop: Header=BB19_3 Depth=1
	leal	(%r10,%rax), %ecx
	incq	%rax
	cmpq	%r8, %rax
	movl	%ecx, (%r11)
	movq	$1, 56(%r11)
	jge	.LBB19_8
# %bb.7:                                # %for.end32
                                        #   in Loop: Header=BB19_3 Depth=1
	cmpq	(%rsi), %rax
	jl	.LBB19_3
.LBB19_8:                               # %while.end
	movq	%rax, (%rsi)
	movq	$4000, 640(%rdi)        # imm = 0xFA0
	movabsq	$2361183241434822607, %r9 # imm = 0x20C49BA5E353F7CF
	movq	(%rsi), %rax
	movq	424(%rdi), %rcx
	leaq	-1(%rax,%rcx), %rax
	imulq	%r9
	movq	%rdx, %rax
	sarq	$9, %rdx
	shrq	$63, %rax
	leaq	1(%rdx,%rax), %r8
	movq	%r8, 624(%rdi)
	addq	(%rsi), %rcx
	leaq	(%rdx,%rax), %rsi
	movq	%rcx, %rax
	imulq	%r9
	movq	%rdx, %rax
	sarq	$9, %rdx
	shrq	$63, %rax
	addq	%rax, %rdx
	imulq	$4000, %rdx, %rax       # imm = 0xFA0
	subq	%rax, %rcx
	leaq	-3999(%rcx,%rsi), %rcx
	cmoveq	%r8, %rcx
	testq	%rcx, %rcx
	movq	%rcx, 632(%rdi)
	js	.LBB19_9
# %bb.15:                               # %while.end76
	retq
.LBB19_9:                               # %while.body70.preheader
	movq	%rcx, %rax
	xorl	%edx, %edx
	movl	$4000, %esi             # imm = 0xFA0
	notq	%rax
	divq	%r8
	incq	%rax
	cmpq	$16, %rax
	jb	.LBB19_13
# %bb.10:                               # %vector.ph
	movq	%rax, %rdx
	vpxor	%xmm1, %xmm1, %xmm1
	vpcmpeqd	%ymm2, %ymm2, %ymm2
	vpxor	%xmm3, %xmm3, %xmm3
	vpxor	%xmm4, %xmm4, %xmm4
	andq	$-16, %rdx
	movq	%rdx, %rsi
	imulq	%r8, %rsi
	addq	%rsi, %rcx
	movl	$4000, %esi             # imm = 0xFA0
	vmovq	%rsi, %xmm0
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB19_11:                              # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	addq	$16, %rsi
	vpaddq	%ymm2, %ymm0, %ymm0
	vpaddq	%ymm2, %ymm1, %ymm1
	vpaddq	%ymm2, %ymm3, %ymm3
	vpaddq	%ymm2, %ymm4, %ymm4
	cmpq	%rdx, %rsi
	jne	.LBB19_11
# %bb.12:                               # %middle.block
	vpaddq	%ymm0, %ymm1, %ymm0
	cmpq	%rdx, %rax
	vpaddq	%ymm0, %ymm3, %ymm0
	vpaddq	%ymm0, %ymm4, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpaddq	%ymm1, %ymm0, %ymm0
	vpshufd	$78, %xmm0, %xmm1       # xmm1 = xmm0[2,3,0,1]
	vpaddq	%xmm1, %xmm0, %xmm0
	vmovq	%xmm0, %rsi
	je	.LBB19_14
	.p2align	4, 0x90
.LBB19_13:                              # %while.body70
                                        # =>This Inner Loop Header: Depth=1
	decq	%rsi
	addq	%r8, %rcx
	js	.LBB19_13
.LBB19_14:                              # %while.cond66.while.end76_crit_edge
	movq	%rcx, 632(%rdi)
	movq	%rsi, 640(%rdi)
	vzeroupper
	retq
.Lfunc_end19:
	.size	marc_arcs, .Lfunc_end19-marc_arcs
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function arc_compare
	.type	arc_compare,@function
arc_compare:                            # @arc_compare
	.cfi_startproc
# %bb.0:                                # %entry
	movq	(%rsi), %rcx
	movq	(%rdi), %rdx
	movl	$1, %eax
	movq	56(%rcx), %rsi
	cmpq	%rsi, 56(%rdx)
	jg	.LBB20_3
# %bb.1:                                # %if.end
	movl	$-1, %eax
	jl	.LBB20_3
# %bb.2:                                # %if.end6
	movl	(%rdx), %eax
	xorl	%edx, %edx
	cmpl	(%rcx), %eax
	setge	%dl
	leal	-1(%rdx,%rdx), %eax
.LBB20_3:                               # %return
	retq
.Lfunc_end20:
	.size	arc_compare, .Lfunc_end20-arc_compare
	.cfi_endproc
                                        # -- End function
	.globl	resize_prob             # -- Begin function resize_prob
	.p2align	4, 0x90
	.type	resize_prob,@function
resize_prob:                            # @resize_prob
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movq	456(%rdi), %rax
	movq	568(%rdi), %rdi
	movq	416(%rbx), %rcx
	addq	%rax, %rcx
	movq	%rcx, 416(%rbx)
	addq	%rax, 448(%rbx)
	shlq	$3, %rcx
	leaq	(%rcx,%rcx,8), %rsi
	callq	realloc
	testq	%rax, %rax
	je	.LBB21_1
# %bb.2:                                # %if.end
	movq	568(%rbx), %r8
	movq	%rax, 568(%rbx)
	movq	424(%rbx), %rcx
	movq	552(%rbx), %rdx
	leaq	(%rcx,%rcx,8), %rcx
	leaq	104(%rdx), %rdi
	leaq	(%rax,%rcx,8), %rcx
	movq	%rcx, 576(%rbx)
	movq	560(%rbx), %rsi
	cmpq	%rsi, %rdi
	jb	.LBB21_4
	jmp	.LBB21_8
	.p2align	4, 0x90
.LBB21_7:                               # %for.inc
                                        #   in Loop: Header=BB21_4 Depth=1
	addq	$104, %rdi
	cmpq	%rsi, %rdi
	jae	.LBB21_8
.LBB21_4:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	48(%rdi), %rcx
	testq	%rcx, %rcx
	je	.LBB21_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB21_4 Depth=1
	cmpq	%rdx, 24(%rdi)
	je	.LBB21_7
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB21_4 Depth=1
	subq	%r8, %rcx
	addq	%rax, %rcx
	movq	%rcx, 48(%rdi)
	jmp	.LBB21_7
.LBB21_8:                               # %for.end
	movq	416(%rbx), %rax
	movq	584(%rbx), %rdi
	shlq	$3, %rax
	leaq	(%rax,%rax,8), %rsi
	callq	realloc
	movq	%rax, 584(%rbx)
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.LBB21_1:                               # %if.then
	.cfi_def_cfa_offset 16
	movl	$.L.str.28, %edi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	callq	printf
	movq	stdout(%rip), %rdi
	callq	fflush
	movq	$-1, %rax
	popq	%rbx
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end21:
	.size	resize_prob, .Lfunc_end21-resize_prob
	.cfi_endproc
                                        # -- End function
	.globl	insert_new_arc          # -- Begin function insert_new_arc
	.p2align	4, 0x90
	.type	insert_new_arc,@function
insert_new_arc:                         # @insert_new_arc
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movl	48(%rsp), %r10d
	leaq	(%rsi,%rsi,8), %rax
	testq	%rsi, %rsi
	movq	%rdx, 16(%rdi,%rax,8)
	movq	%rcx, 24(%rdi,%rax,8)
	movq	%r8, 64(%rdi,%rax,8)
	movq	%r8, 8(%rdi,%rax,8)
	movq	%r9, 56(%rdi,%rax,8)
	movl	%r10d, (%rdi,%rax,8)
	je	.LBB22_4
# %bb.1:                                # %land.rhs.preheader
	leaq	1(%rsi), %r15
	.p2align	4, 0x90
.LBB22_2:                               # %land.rhs
                                        # =>This Inner Loop Header: Depth=1
	movq	%r15, %rax
	shrq	$63, %rax
	addq	%rax, %r15
	sarq	%r15
	leaq	-1(%r15), %r11
	leaq	(%r11,%r11,8), %rbx
	movq	56(%rdi,%rbx,8), %r14
	cmpq	%r9, %r14
	jge	.LBB22_4
# %bb.3:                                # %while.body
                                        #   in Loop: Header=BB22_2 Depth=1
	movq	16(%rdi,%rbx,8), %rax
	leaq	(%rsi,%rsi,8), %rsi
	leaq	56(%rdi,%rbx,8), %r12
	testq	%r11, %r11
	movq	%rax, 16(%rdi,%rsi,8)
	movq	24(%rdi,%rbx,8), %rax
	movq	%rax, 24(%rdi,%rsi,8)
	movq	8(%rdi,%rbx,8), %rax
	movq	%rax, 8(%rdi,%rsi,8)
	movq	8(%rdi,%rbx,8), %rax
	movq	%rax, 64(%rdi,%rsi,8)
	movq	%r14, 56(%rdi,%rsi,8)
	movl	(%rdi,%rbx,8), %eax
	movl	%eax, (%rdi,%rsi,8)
	movq	%r11, %rsi
	movq	%rdx, 16(%rdi,%rbx,8)
	movq	%rcx, 24(%rdi,%rbx,8)
	movq	%r8, 8(%rdi,%rbx,8)
	movq	%r8, 64(%rdi,%rbx,8)
	movq	%r9, (%r12)
	movl	%r10d, (%rdi,%rbx,8)
	jne	.LBB22_2
.LBB22_4:                               # %while.end
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end22:
	.size	insert_new_arc, .Lfunc_end22-insert_new_arc
	.cfi_endproc
                                        # -- End function
	.globl	replace_weaker_arc      # -- Begin function replace_weaker_arc
	.p2align	4, 0x90
	.type	replace_weaker_arc,@function
replace_weaker_arc:                     # @replace_weaker_arc
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r13
	.cfi_def_cfa_offset 32
	pushq	%r12
	.cfi_def_cfa_offset 40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r13, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movl	48(%rsp), %r10d
	movq	%rsi, 16(%rdi)
	movq	%rdx, 24(%rdi)
	movq	%rcx, 64(%rdi)
	movq	%rcx, 8(%rdi)
	movq	%r8, 56(%rdi)
	xorl	%eax, %eax
	movl	%r10d, (%rdi)
	movq	128(%rdi), %rbx
	cmpq	200(%rdi), %rbx
	setg	%al
	xorq	$3, %rax
	cmpq	%r9, %rax
	jg	.LBB23_8
# %bb.1:                                # %land.rhs.preheader
	movl	$1, %r14d
	.p2align	4, 0x90
.LBB23_2:                               # %land.rhs
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %r11
	decq	%rax
	leaq	(%rax,%rax,8), %rax
	movq	56(%rdi,%rax,8), %r13
	cmpq	%r8, %r13
	jle	.LBB23_8
# %bb.3:                                # %while.body
                                        #   in Loop: Header=BB23_2 Depth=1
	movq	16(%rdi,%rax,8), %r12
	leaq	(%r14,%r14,8), %r14
	leaq	56(%rdi,%rax,8), %r15
	movq	%r12, -56(%rdi,%r14,8)
	movq	24(%rdi,%rax,8), %rbx
	movq	%rbx, -48(%rdi,%r14,8)
	movq	8(%rdi,%rax,8), %rbx
	movq	%rbx, -64(%rdi,%r14,8)
	movq	8(%rdi,%rax,8), %rbx
	movq	%rbx, -8(%rdi,%r14,8)
	movq	%r13, -16(%rdi,%r14,8)
	movl	(%rdi,%rax,8), %ebx
	movl	%ebx, -72(%rdi,%r14,8)
	movq	%rsi, 16(%rdi,%rax,8)
	movq	%rdx, 24(%rdi,%rax,8)
	movq	%rcx, 8(%rdi,%rax,8)
	movq	%rcx, 64(%rdi,%rax,8)
	movq	%r8, (%r15)
	leaq	1(%r11,%r11), %r15
	movl	%r10d, (%rdi,%rax,8)
	leaq	(%r11,%r11), %rax
	cmpq	%r9, %r15
	jg	.LBB23_7
# %bb.4:                                # %if.then
                                        #   in Loop: Header=BB23_2 Depth=1
	leaq	(%rax,%rax,8), %r14
	movq	-16(%rdi,%r14,8), %rbx
	cmpq	56(%rdi,%r14,8), %rbx
	jl	.LBB23_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB23_2 Depth=1
	movq	%rax, %r15
.LBB23_6:                               # %if.then
                                        #   in Loop: Header=BB23_2 Depth=1
	movq	%r15, %rax
.LBB23_7:                               # %if.end87
                                        #   in Loop: Header=BB23_2 Depth=1
	movq	%r11, %r14
	cmpq	%r9, %rax
	jle	.LBB23_2
.LBB23_8:                               # %while.end
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end23:
	.size	replace_weaker_arc, .Lfunc_end23-replace_weaker_arc
	.cfi_endproc
                                        # -- End function
	.globl	calculate_max_redcost   # -- Begin function calculate_max_redcost
	.p2align	4, 0x90
	.type	calculate_max_redcost,@function
calculate_max_redcost:                  # @calculate_max_redcost
	.cfi_startproc
# %bb.0:                                # %entry
	testq	%rcx, %rcx
	movq	$0, (%rsi)
	jle	.LBB24_5
# %bb.1:                                # %for.body.preheader
	xorl	%r8d, %r8d
	xorl	%edi, %edi
	.p2align	4, 0x90
.LBB24_2:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rdx,%rdi,8), %rax
	movq	(%rax), %rax
	movq	56(%rax), %rax
	cmpq	%r8, %rax
	jle	.LBB24_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rax, %r8
	movq	%rax, (%rsi)
.LBB24_4:                               # %for.inc
                                        #   in Loop: Header=BB24_2 Depth=1
	incq	%rdi
	cmpq	%rdi, %rcx
	jne	.LBB24_2
.LBB24_5:                               # %for.end
	retq
.Lfunc_end24:
	.size	calculate_max_redcost, .Lfunc_end24-calculate_max_redcost
	.cfi_endproc
                                        # -- End function
	.globl	switch_arcs             # -- Begin function switch_arcs
	.p2align	4, 0x90
	.type	switch_arcs,@function
switch_arcs:                            # @switch_arcs
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	cmpq	$0, 64(%rsp)
	movq	%rsi, -16(%rsp)         # 8-byte Spill
	jle	.LBB25_1
# %bb.2:                                # %for.body.lr.ph
	movq	%rdx, %r11
	movslq	%r8d, %rdx
	xorl	%ebp, %ebp
	xorl	%r8d, %r8d
	movq	%r11, -48(%rsp)         # 8-byte Spill
	.p2align	4, 0x90
.LBB25_3:                               # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_5 Depth 2
                                        #       Child Loop BB25_13 Depth 3
	movq	-16(%rsp), %rax         # 8-byte Reload
	movq	56(%rsp), %rsi
	movq	%rbp, -8(%rsp)          # 8-byte Spill
	movq	(%rax,%rdx,8), %rdi
	cmpq	%rsi, %rdi
	cmovgq	%rsi, %rdi
	testq	%rdi, %rdi
	jle	.LBB25_22
# %bb.4:                                # %for.body8.lr.ph
                                        #   in Loop: Header=BB25_3 Depth=1
	xorl	%ebx, %ebx
	movq	%rdx, -32(%rsp)         # 8-byte Spill
	movq	%rdi, -40(%rsp)         # 8-byte Spill
	.p2align	4, 0x90
.LBB25_5:                               # %for.body8
                                        #   Parent Loop BB25_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_13 Depth 3
	movq	(%r11,%rdx,8), %rbp
	leaq	(%rbx,%rbx,8), %rsi
	cmpw	$0, 32(%rbp,%rsi,8)
	jne	.LBB25_21
# %bb.6:                                # %land.lhs.true
                                        #   in Loop: Header=BB25_5 Depth=2
	movq	56(%rbp,%rsi,8), %r13
	leaq	(%rbp,%rsi,8), %r10
	cmpq	56(%rcx), %r13
	jge	.LBB25_8
# %bb.7:                                # %land.lhs.true.if.then_crit_edge
                                        #   in Loop: Header=BB25_5 Depth=2
	movl	(%r10), %r14d
	jmp	.LBB25_10
.LBB25_8:                               # %lor.lhs.false
                                        #   in Loop: Header=BB25_5 Depth=2
	jne	.LBB25_21
# %bb.9:                                # %land.lhs.true20
                                        #   in Loop: Header=BB25_5 Depth=2
	movl	(%r10), %r14d
	cmpl	(%rcx), %r14d
	jge	.LBB25_21
	.p2align	4, 0x90
.LBB25_10:                              # %if.then
                                        #   in Loop: Header=BB25_5 Depth=2
	movq	8(%rbp,%rsi,8), %rax
	movq	16(%rbp,%rsi,8), %rdx
	movq	24(%rbp,%rsi,8), %r11
	movq	64(%rcx), %rsi
	incq	%r8
	movq	%rsi, 64(%r10)
	xorl	%esi, %esi
	vmovups	(%rcx), %ymm0
	vmovups	32(%rcx), %ymm1
	vmovups	%ymm1, 32(%r10)
	vmovups	%ymm0, (%r10)
	movq	%rdx, 16(%rcx)
	movq	%r11, 24(%rcx)
	movq	%rax, 64(%rcx)
	movq	%rax, 8(%rcx)
	movq	%r13, 56(%rcx)
	movl	%r14d, (%rcx)
	movq	128(%rcx), %rbp
	cmpq	200(%rcx), %rbp
	setg	%sil
	xorq	$3, %rsi
	cmpq	%r9, %rsi
	jle	.LBB25_12
# %bb.11:                               #   in Loop: Header=BB25_5 Depth=2
	movq	-48(%rsp), %r11         # 8-byte Reload
	jmp	.LBB25_20
.LBB25_12:                              # %land.rhs.i.preheader
                                        #   in Loop: Header=BB25_5 Depth=2
	movl	$1, %ebp
	movq	%r8, -24(%rsp)          # 8-byte Spill
	.p2align	4, 0x90
.LBB25_13:                              # %land.rhs.i
                                        #   Parent Loop BB25_3 Depth=1
                                        #     Parent Loop BB25_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rsi, %r10
	decq	%rsi
	leaq	(%rsi,%rsi,8), %rsi
	movq	56(%rcx,%rsi,8), %r8
	cmpq	%r13, %r8
	jle	.LBB25_19
# %bb.14:                               # %while.body.i
                                        #   in Loop: Header=BB25_13 Depth=3
	movq	16(%rcx,%rsi,8), %r12
	leaq	(%rbp,%rbp,8), %rbp
	leaq	56(%rcx,%rsi,8), %r15
	movq	%r12, -56(%rcx,%rbp,8)
	movq	24(%rcx,%rsi,8), %rdi
	movq	%rdi, -48(%rcx,%rbp,8)
	movq	8(%rcx,%rsi,8), %rdi
	movq	%rdi, -64(%rcx,%rbp,8)
	movq	8(%rcx,%rsi,8), %rdi
	movq	%rdi, -8(%rcx,%rbp,8)
	movq	%r8, -16(%rcx,%rbp,8)
	movl	(%rcx,%rsi,8), %edi
	movl	%edi, -72(%rcx,%rbp,8)
	leaq	1(%r10,%r10), %rbp
	movq	%rdx, 16(%rcx,%rsi,8)
	movq	%r11, 24(%rcx,%rsi,8)
	movq	%rax, 8(%rcx,%rsi,8)
	movq	%rax, 64(%rcx,%rsi,8)
	movq	%r13, (%r15)
	movl	%r14d, (%rcx,%rsi,8)
	leaq	(%r10,%r10), %rsi
	cmpq	%r9, %rbp
	jg	.LBB25_18
# %bb.15:                               # %if.then.i
                                        #   in Loop: Header=BB25_13 Depth=3
	leaq	(%rsi,%rsi,8), %rdi
	movq	%rdx, %r8
	movq	-16(%rcx,%rdi,8), %rdx
	cmpq	56(%rcx,%rdi,8), %rdx
	jl	.LBB25_17
# %bb.16:                               # %if.then.i
                                        #   in Loop: Header=BB25_13 Depth=3
	movq	%rsi, %rbp
.LBB25_17:                              # %if.then.i
                                        #   in Loop: Header=BB25_13 Depth=3
	movq	%rbp, %rsi
	movq	%r8, %rdx
.LBB25_18:                              # %if.end87.i
                                        #   in Loop: Header=BB25_13 Depth=3
	movq	%r10, %rbp
	cmpq	%r9, %rsi
	jle	.LBB25_13
.LBB25_19:                              #   in Loop: Header=BB25_5 Depth=2
	movq	-48(%rsp), %r11         # 8-byte Reload
	movq	-24(%rsp), %r8          # 8-byte Reload
.LBB25_20:                              # %for.inc
                                        #   in Loop: Header=BB25_5 Depth=2
	movq	-32(%rsp), %rdx         # 8-byte Reload
	movq	-40(%rsp), %rdi         # 8-byte Reload
.LBB25_21:                              # %for.inc
                                        #   in Loop: Header=BB25_5 Depth=2
	incq	%rbx
	cmpq	%rdi, %rbx
	jl	.LBB25_5
.LBB25_22:                              # %for.inc30
                                        #   in Loop: Header=BB25_3 Depth=1
	movq	-8(%rsp), %rbp          # 8-byte Reload
	movq	64(%rsp), %rsi
	incq	%rdx
	movq	%rdx, %rax
	cqto
	incq	%rbp
	idivq	%rsi
	cmpq	%rsi, %rbp
	jne	.LBB25_3
	jmp	.LBB25_23
.LBB25_1:
	xorl	%r8d, %r8d
.LBB25_23:                              # %for.end32
	movq	%r8, %rax
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	vzeroupper
	retq
.Lfunc_end25:
	.size	switch_arcs, .Lfunc_end25-switch_arcs
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4               # -- Begin function spec_qsort
.LCPI26_0:
	.quad	1                       # 0x1
	.quad	1                       # 0x1
	.text
	.globl	spec_qsort
	.p2align	4, 0x90
	.type	spec_qsort,@function
spec_qsort:                             # @spec_qsort
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$280, %rsp              # imm = 0x118
	.cfi_def_cfa_offset 336
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movl	%edx, %eax
	movq	%rcx, %r15
	movl	%edx, %ecx
	movslq	%edx, %r10
	movq	%rsi, %r14
	movabsq	$2305843009213693950, %r8 # imm = 0x1FFFFFFFFFFFFFFE
	movq	%rdi, %r13
	movq	%rdx, %r9
	movq	%rdx, 16(%rsp)          # 8-byte Spill
	andl	$7, %eax
	movq	%r10, %rsi
	leaq	1(%r8), %rdi
	movq	%r10, 72(%rsp)          # 8-byte Spill
	movq	%r15, 112(%rsp)         # 8-byte Spill
	movq	%rax, 240(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	cmpq	$8, %rdx
	movq	%rdi, 256(%rsp)         # 8-byte Spill
	setne	%al
	andl	$3, %ecx
	vmovd	%eax, %xmm0
	movq	%rcx, 232(%rsp)         # 8-byte Spill
	xorl	%ecx, %ecx
	cmpq	$4, %rdx
	movq	%r8, %rax
	movq	%r10, %r8
	setne	%cl
	shrq	$2, %rsi
	xorl	%ebp, %ebp
	notq	%r8
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	%r8, 264(%rsp)          # 8-byte Spill
	vpinsrb	$8, %ecx, %xmm0, %xmm0
	movq	%r10, %rcx
	vpand	.LCPI26_0(%rip), %xmm0, %xmm0
	shrq	$3, %rcx
	testq	%rcx, %rcx
	movq	%rcx, 56(%rsp)          # 8-byte Spill
	sete	%bpl
	cmoveq	%rdi, %rax
	negq	%r9
	xorl	%ebx, %ebx
	addq	%rcx, %rax
	addq	%rcx, %rbp
	movabsq	$4611686018427387902, %rcx # imm = 0x3FFFFFFFFFFFFFFE
	testq	%rsi, %rsi
	movq	%r9, (%rsp)             # 8-byte Spill
	leaq	1(%rcx), %rdi
	sete	%bl
	leaq	16(,%rax,8), %rax
	movq	%rbp, 40(%rsp)          # 8-byte Spill
	cmoveq	%rdi, %rcx
	addq	%rsi, %rbx
	movq	%rdi, 248(%rsp)         # 8-byte Spill
	movq	%rax, 144(%rsp)         # 8-byte Spill
	addq	%rsi, %rcx
	cmpq	$-3, %r8
	movq	$-2, %rsi
	movq	%rbx, 96(%rsp)          # 8-byte Spill
	cmovgq	%r8, %rsi
	leaq	8(,%rcx,4), %rax
	movq	%rdx, %rcx
	vpextrd	$2, %xmm0, 224(%rsp)    # 4-byte Folded Spill
	vmovd	%xmm0, 216(%rsp)        # 4-byte Folded Spill
	leaq	2(%rsi,%r10), %r8
	addb	%dl, %sil
	movq	%rax, 120(%rsp)         # 8-byte Spill
	movq	%rdx, %rax
	addb	$2, %sil
	movq	%r8, %rdi
	movq	%r8, 88(%rsp)           # 8-byte Spill
	movzbl	%sil, %esi
	andl	$63, %esi
	subq	%rsi, %r8
	movl	%ebx, %esi
	andl	$15, %esi
	movq	%r8, 136(%rsp)          # 8-byte Spill
	subq	%rsi, %rbx
	movl	%ebp, %esi
	andl	$7, %esi
	movq	%rbx, 176(%rsp)         # 8-byte Spill
	subq	%rsi, %rbp
	movq	%rbp, 168(%rsp)         # 8-byte Spill
	jmp	.LBB26_2
	.p2align	4, 0x90
.LBB26_1:                               # %if.then292
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	%r12, %rax
	xorl	%edx, %edx
	movq	24(%rsp), %r13          # 8-byte Reload
	divq	%rcx
	subq	%r12, %r13
	movq	%rax, %r14
.LBB26_2:                               # %loop
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_218 Depth 2
                                        #     Child Loop BB26_38 Depth 2
                                        #     Child Loop BB26_264 Depth 2
                                        #     Child Loop BB26_74 Depth 2
                                        #     Child Loop BB26_221 Depth 2
                                        #     Child Loop BB26_68 Depth 2
                                        #     Child Loop BB26_78 Depth 2
                                        #       Child Loop BB26_80 Depth 3
                                        #         Child Loop BB26_87 Depth 4
                                        #         Child Loop BB26_90 Depth 4
                                        #         Child Loop BB26_99 Depth 4
                                        #         Child Loop BB26_96 Depth 4
                                        #       Child Loop BB26_104 Depth 3
                                        #         Child Loop BB26_111 Depth 4
                                        #         Child Loop BB26_114 Depth 4
                                        #       Child Loop BB26_118 Depth 3
                                        #         Child Loop BB26_129 Depth 4
                                        #         Child Loop BB26_126 Depth 4
                                        #       Child Loop BB26_136 Depth 3
                                        #       Child Loop BB26_139 Depth 3
                                        #       Child Loop BB26_147 Depth 3
                                        #       Child Loop BB26_145 Depth 3
                                        #     Child Loop BB26_151 Depth 2
                                        #       Child Loop BB26_153 Depth 3
                                        #         Child Loop BB26_163 Depth 4
                                        #         Child Loop BB26_160 Depth 4
                                        #       Child Loop BB26_167 Depth 3
                                        #         Child Loop BB26_178 Depth 4
                                        #         Child Loop BB26_175 Depth 4
                                        #       Child Loop BB26_187 Depth 3
                                        #       Child Loop BB26_185 Depth 3
                                        #     Child Loop BB26_59 Depth 2
                                        #     Child Loop BB26_53 Depth 2
                                        #     Child Loop BB26_41 Depth 2
                                        #     Child Loop BB26_210 Depth 2
                                        #     Child Loop BB26_198 Depth 2
                                        #     Child Loop BB26_224 Depth 2
                                        #     Child Loop BB26_227 Depth 2
                                        #     Child Loop BB26_213 Depth 2
                                        #     Child Loop BB26_216 Depth 2
                                        #     Child Loop BB26_248 Depth 2
                                        #     Child Loop BB26_236 Depth 2
                                        #     Child Loop BB26_256 Depth 2
                                        #     Child Loop BB26_259 Depth 2
                                        #     Child Loop BB26_251 Depth 2
                                        #     Child Loop BB26_254 Depth 2
	movl	%r13d, %eax
	movl	$2, %edx
	andl	$7, %eax
	orq	240(%rsp), %rax         # 8-byte Folded Reload
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movl	$2, %eax
	cmovel	216(%rsp), %eax         # 4-byte Folded Reload
	movl	%eax, 196(%rsp)         # 4-byte Spill
	movl	%r13d, %eax
	andl	$3, %eax
	orq	232(%rsp), %rax         # 8-byte Folded Reload
	cmovel	224(%rsp), %edx         # 4-byte Folded Reload
	cmpq	$6, %r14
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movl	%edx, 192(%rsp)         # 4-byte Spill
	jbe	.LBB26_266
# %bb.3:                                # %if.end48
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	%r14, %rbx
	movq	%r14, 104(%rsp)         # 8-byte Spill
	shrq	%rbx
	imulq	%rcx, %rbx
	addq	%r13, %rbx
	cmpq	$7, %r14
	je	.LBB26_29
# %bb.4:                                # %if.then53
                                        #   in Loop: Header=BB26_2 Depth=1
	leaq	-1(%r14), %rbp
	imulq	%rcx, %rbp
	addq	%r13, %rbp
	cmpq	$41, %r14
	jb	.LBB26_8
# %bb.5:                                # %if.then58
                                        #   in Loop: Header=BB26_2 Depth=1
	shrq	$3, %r14
	movq	%r13, %rdi
	imulq	%rcx, %r14
	leaq	(%r13,%r14), %rsi
	leaq	(%r13,%r14,2), %r12
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	vzeroupper
	callq	*%r15
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%r12, %rsi
	movl	%eax, 24(%rsp)          # 4-byte Spill
	callq	*%r15
	cmpl	$0, 24(%rsp)            # 4-byte Folded Reload
	js	.LBB26_9
# %bb.6:                                # %cond.false11.i
                                        #   in Loop: Header=BB26_2 Depth=1
	testl	%eax, %eax
	jg	.LBB26_12
# %bb.7:                                # %cond.false15.i
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	%r13, %rdi
	movq	%r12, %rsi
	callq	*%r15
	testl	%eax, %eax
	cmovsq	%r13, %r12
	jmp	.LBB26_11
	.p2align	4, 0x90
.LBB26_8:                               #   in Loop: Header=BB26_2 Depth=1
	movq	%r13, %rdi
	jmp	.LBB26_24
.LBB26_9:                               # %cond.true.i
                                        #   in Loop: Header=BB26_2 Depth=1
	testl	%eax, %eax
	js	.LBB26_12
# %bb.10:                               # %cond.false.i
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	%r13, %rdi
	movq	%r12, %rsi
	callq	*%r15
	testl	%eax, %eax
	cmovnsq	%r13, %r12
.LBB26_11:                              # %med3.exit
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	%r12, 8(%rsp)           # 8-byte Spill
.LBB26_12:                              # %med3.exit
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	%r14, %rax
	movq	%rbx, %r12
	movq	%rbx, %rsi
	negq	%rax
	subq	%r14, %r12
	movq	%rax, 80(%rsp)          # 8-byte Spill
	leaq	(%rbx,%r14), %rax
	movq	%r12, %rdi
	leaq	(%r14,%r14), %r14
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	*%r15
	movq	24(%rsp), %rsi          # 8-byte Reload
	movq	%rbx, %rdi
	movl	%eax, 32(%rsp)          # 4-byte Spill
	callq	*%r15
	cmpl	$0, 32(%rsp)            # 4-byte Folded Reload
	js	.LBB26_15
# %bb.13:                               # %cond.false11.i582
                                        #   in Loop: Header=BB26_2 Depth=1
	testl	%eax, %eax
	jg	.LBB26_17
# %bb.14:                               # %cond.false15.i586
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	24(%rsp), %rbx          # 8-byte Reload
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	*%r15
	testl	%eax, %eax
	cmovsq	%r12, %rbx
	jmp	.LBB26_17
.LBB26_15:                              # %cond.true.i576
                                        #   in Loop: Header=BB26_2 Depth=1
	testl	%eax, %eax
	js	.LBB26_17
# %bb.16:                               # %cond.false.i580
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	24(%rsp), %rbx          # 8-byte Reload
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	*%r15
	testl	%eax, %eax
	cmovsq	%rbx, %r12
	movq	%r12, %rbx
.LBB26_17:                              # %med3.exit588
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	%rbp, %r12
	subq	%r14, %r12
	movq	80(%rsp), %r14          # 8-byte Reload
	movq	%r12, %rdi
	addq	%rbp, %r14
	movq	%r14, %rsi
	callq	*%r15
	movq	%r14, %rdi
	movq	%rbp, %rsi
	movl	%eax, 24(%rsp)          # 4-byte Spill
	callq	*%r15
	cmpl	$0, 24(%rsp)            # 4-byte Folded Reload
	js	.LBB26_20
# %bb.18:                               # %cond.false11.i599
                                        #   in Loop: Header=BB26_2 Depth=1
	testl	%eax, %eax
	jg	.LBB26_22
# %bb.19:                               # %cond.false15.i603
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	%r12, %rdi
	movq	%rbp, %rsi
	callq	*%r15
	testl	%eax, %eax
	cmovsq	%r12, %rbp
	jmp	.LBB26_23
.LBB26_20:                              # %cond.true.i593
                                        #   in Loop: Header=BB26_2 Depth=1
	testl	%eax, %eax
	js	.LBB26_22
# %bb.21:                               # %cond.false.i597
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	%r12, %rdi
	movq	%rbp, %rsi
	callq	*%r15
	testl	%eax, %eax
	cmovnsq	%r12, %rbp
	jmp	.LBB26_23
.LBB26_22:                              #   in Loop: Header=BB26_2 Depth=1
	movq	%r14, %rbp
.LBB26_23:                              # %if.end75
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	104(%rsp), %r14         # 8-byte Reload
	movq	8(%rsp), %rdi           # 8-byte Reload
.LBB26_24:                              # %if.end75
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	%rbx, %rsi
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	vzeroupper
	callq	*%r15
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	movl	%eax, %r12d
	callq	*%r15
	testl	%r12d, %r12d
	js	.LBB26_27
# %bb.25:                               # %cond.false11.i616
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	(%rsp), %r9             # 8-byte Reload
	testl	%eax, %eax
	jg	.LBB26_29
# %bb.26:                               # %cond.false15.i620
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	8(%rsp), %rbx           # 8-byte Reload
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	callq	*%r15
	movq	(%rsp), %r9             # 8-byte Reload
	testl	%eax, %eax
	cmovsq	%rbx, %rbp
	movq	%rbp, %rbx
	cmpl	$0, 196(%rsp)           # 4-byte Folded Reload
	jne	.LBB26_30
	.p2align	4, 0x90
.LBB26_39:                              # %for.cond95.us.preheader
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	(%rbx), %rcx
	movq	(%r13), %rax
	leaq	-1(%r14), %r12
	movl	$0, 8(%rsp)             # 4-byte Folded Spill
	movq	%rcx, (%r13)
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rbx)
	imulq	%rcx, %r12
	leaq	(%r13,%rcx), %rax
	movq	%rax, %rbp
	movq	%rax, %r14
	movq	%rax, 128(%rsp)         # 8-byte Spill
	addq	%r13, %r12
	movq	%r12, %rbx
	cmpq	%rbx, %rbp
	jbe	.LBB26_41
	jmp	.LBB26_46
	.p2align	4, 0x90
.LBB26_45:                              # %if.end149.us
                                        #   in Loop: Header=BB26_2 Depth=1
	addq	%r9, %rbx
.LBB26_46:                              # %while.cond122.us
                                        #   in Loop: Header=BB26_2 Depth=1
	cmpq	%rbx, %rbp
	ja	.LBB26_189
.LBB26_47:                              # %land.rhs125.us
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	%rbx, %rdi
	movq	%r13, %rsi
	vzeroupper
	callq	*%r15
	testl	%eax, %eax
	js	.LBB26_50
# %bb.48:                               # %while.body130.us
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	(%rsp), %r9             # 8-byte Reload
	jne	.LBB26_45
# %bb.49:                               # %if.then136.us
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	(%rbx), %rax
	movq	(%r12), %rcx
	movl	$1, 8(%rsp)             # 4-byte Folded Spill
	movq	%rcx, (%rbx)
	movq	%rax, (%r12)
	addq	%r9, %r12
	jmp	.LBB26_45
.LBB26_50:                              # %if.then159.us
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	(%rbx), %rcx
	movq	(%rbp), %rax
	movq	(%rsp), %r9             # 8-byte Reload
	movl	$1, 8(%rsp)             # 4-byte Folded Spill
	movq	%rcx, (%rbp)
	addq	16(%rsp), %rbp          # 8-byte Folded Reload
	movq	%rax, (%rbx)
	addq	%r9, %rbx
	cmpq	%rbx, %rbp
	ja	.LBB26_46
	.p2align	4, 0x90
.LBB26_41:                              # %land.rhs98.us
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbp, %rdi
	movq	%r13, %rsi
	vzeroupper
	callq	*%r15
	testl	%eax, %eax
	jg	.LBB26_44
# %bb.42:                               # %while.body.us
                                        #   in Loop: Header=BB26_41 Depth=2
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	(%rsp), %r9             # 8-byte Reload
	jne	.LBB26_40
# %bb.43:                               # %if.then108.us
                                        #   in Loop: Header=BB26_41 Depth=2
	movq	(%rbp), %rcx
	movq	(%r14), %rax
	movl	$1, 8(%rsp)             # 4-byte Folded Spill
	movq	%rcx, (%r14)
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	%rax, (%rbp)
	addq	%rcx, %r14
.LBB26_40:                              # %if.end120.us
                                        #   in Loop: Header=BB26_41 Depth=2
	addq	%rcx, %rbp
	cmpq	%rbx, %rbp
	jbe	.LBB26_41
	jmp	.LBB26_46
.LBB26_44:                              #   in Loop: Header=BB26_2 Depth=1
	movq	(%rsp), %r9             # 8-byte Reload
	cmpq	%rbx, %rbp
	jbe	.LBB26_47
	jmp	.LBB26_189
.LBB26_27:                              # %cond.true.i610
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	(%rsp), %r9             # 8-byte Reload
	testl	%eax, %eax
	js	.LBB26_29
# %bb.28:                               # %cond.false.i614
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	8(%rsp), %rbx           # 8-byte Reload
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	callq	*%r15
	movq	(%rsp), %r9             # 8-byte Reload
	testl	%eax, %eax
	cmovsq	%rbp, %rbx
	.p2align	4, 0x90
.LBB26_29:                              # %if.end77
                                        #   in Loop: Header=BB26_2 Depth=1
	cmpl	$0, 196(%rsp)           # 4-byte Folded Reload
	je	.LBB26_39
.LBB26_30:                              # %if.else82
                                        #   in Loop: Header=BB26_2 Depth=1
	cmpl	$0, 192(%rsp)           # 4-byte Folded Reload
	je	.LBB26_51
# %bb.31:                               # %if.else87
                                        #   in Loop: Header=BB26_2 Depth=1
	cmpq	$0, 208(%rsp)           # 8-byte Folded Reload
	je	.LBB26_63
# %bb.32:                               # %if.else.i634
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	176(%rsp), %rbp         # 8-byte Reload
	cmpq	$0, 184(%rsp)           # 8-byte Folded Reload
	je	.LBB26_69
# %bb.33:                               # %do.body27.i652.preheader
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	88(%rsp), %rcx          # 8-byte Reload
	cmpq	$63, %rcx
	jbe	.LBB26_36
# %bb.34:                               # %vector.memcheck2467
                                        #   in Loop: Header=BB26_2 Depth=1
	leaq	(%rbx,%rcx), %rax
	cmpq	%rax, %r13
	jae	.LBB26_217
# %bb.35:                               # %vector.memcheck2467
                                        #   in Loop: Header=BB26_2 Depth=1
	leaq	(%r13,%rcx), %rax
	cmpq	%rax, %rbx
	jae	.LBB26_217
.LBB26_36:                              #   in Loop: Header=BB26_2 Depth=1
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	%r13, %rbp
	movq	%rbx, %rcx
.LBB26_37:                              # %do.body27.i652.preheader2786
                                        #   in Loop: Header=BB26_2 Depth=1
	incq	%rax
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_38:                              # %do.body27.i652
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%rbp,%rsi), %ebx
	movzbl	(%rcx,%rsi), %edx
	decq	%rax
	movb	%dl, (%rbp,%rsi)
	movb	%bl, (%rcx,%rsi)
	incq	%rsi
	cmpq	$1, %rax
	jg	.LBB26_38
	jmp	.LBB26_75
	.p2align	4, 0x90
.LBB26_51:                              # %for.cond95.us1190.preheader
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	(%rbx), %ecx
	movl	(%r13), %eax
	leaq	-1(%r14), %r12
	movl	$0, 8(%rsp)             # 4-byte Folded Spill
	movl	%ecx, (%r13)
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rbx)
	imulq	%rcx, %r12
	leaq	(%r13,%rcx), %rax
	movq	%rax, %rbp
	movq	%rax, %r14
	movq	%rax, 128(%rsp)         # 8-byte Spill
	addq	%r13, %r12
	movq	%r12, %rbx
	cmpq	%rbx, %rbp
	jbe	.LBB26_53
	jmp	.LBB26_58
	.p2align	4, 0x90
.LBB26_57:                              #   in Loop: Header=BB26_2 Depth=1
	movq	(%rsp), %r9             # 8-byte Reload
	addq	%r9, %rbx
.LBB26_58:                              # %while.cond122.us967.us
                                        #   in Loop: Header=BB26_2 Depth=1
	cmpq	%rbx, %rbp
	ja	.LBB26_189
.LBB26_59:                              # %land.rhs125.us972.us
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbx, %rdi
	movq	%r13, %rsi
	vzeroupper
	callq	*%r15
	testl	%eax, %eax
	js	.LBB26_62
# %bb.60:                               # %while.body130.us975.us
                                        #   in Loop: Header=BB26_59 Depth=2
	jne	.LBB26_57
# %bb.61:                               # %if.then141.us1007.us
                                        #   in Loop: Header=BB26_59 Depth=2
	movl	(%rbx), %eax
	movl	(%r12), %ecx
	movq	(%rsp), %r9             # 8-byte Reload
	movl	$1, 8(%rsp)             # 4-byte Folded Spill
	movl	%ecx, (%rbx)
	movl	%eax, (%r12)
	addq	%r9, %r12
	addq	%r9, %rbx
	cmpq	%rbx, %rbp
	jbe	.LBB26_59
	jmp	.LBB26_189
.LBB26_62:                              # %if.end169.us
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	(%rbx), %ecx
	movl	(%rbp), %eax
	movq	(%rsp), %r9             # 8-byte Reload
	movl	$1, 8(%rsp)             # 4-byte Folded Spill
	movl	%ecx, (%rbp)
	addq	16(%rsp), %rbp          # 8-byte Folded Reload
	movl	%eax, (%rbx)
	addq	%r9, %rbx
	cmpq	%rbx, %rbp
	ja	.LBB26_58
	.p2align	4, 0x90
.LBB26_53:                              # %land.rhs98.us1201
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rbp, %rdi
	movq	%r13, %rsi
	vzeroupper
	callq	*%r15
	testl	%eax, %eax
	jg	.LBB26_56
# %bb.54:                               # %while.body.us1204
                                        #   in Loop: Header=BB26_53 Depth=2
	movq	16(%rsp), %rcx          # 8-byte Reload
	jne	.LBB26_52
# %bb.55:                               # %if.then113.us
                                        #   in Loop: Header=BB26_53 Depth=2
	movl	(%rbp), %ecx
	movl	(%r14), %eax
	movl	$1, 8(%rsp)             # 4-byte Folded Spill
	movl	%ecx, (%r14)
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	%eax, (%rbp)
	addq	%rcx, %r14
.LBB26_52:                              # %if.end120.us1207
                                        #   in Loop: Header=BB26_53 Depth=2
	movq	(%rsp), %r9             # 8-byte Reload
	addq	%rcx, %rbp
	cmpq	%rbx, %rbp
	jbe	.LBB26_53
	jmp	.LBB26_58
.LBB26_56:                              #   in Loop: Header=BB26_2 Depth=1
	movq	(%rsp), %r9             # 8-byte Reload
	cmpq	%rbx, %rbp
	jbe	.LBB26_59
	jmp	.LBB26_189
.LBB26_63:                              # %if.then.i625
                                        #   in Loop: Header=BB26_2 Depth=1
	cmpq	$8, 40(%rsp)            # 8-byte Folded Reload
	jb	.LBB26_66
# %bb.64:                               # %vector.memcheck2389
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	144(%rsp), %rcx         # 8-byte Reload
	leaq	(%rbx,%rcx), %rax
	cmpq	%rax, %r13
	jae	.LBB26_220
# %bb.65:                               # %vector.memcheck2389
                                        #   in Loop: Header=BB26_2 Depth=1
	leaq	(%r13,%rcx), %rax
	cmpq	%rax, %rbx
	jae	.LBB26_220
.LBB26_66:                              #   in Loop: Header=BB26_2 Depth=1
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	%rbx, %rax
	movq	%r13, %rcx
.LBB26_67:                              # %do.body.i633.preheader
                                        #   in Loop: Header=BB26_2 Depth=1
	incq	%rdx
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_68:                              # %do.body.i633
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rcx,%rsi), %rdi
	movq	(%rax,%rsi), %rbp
	decq	%rdx
	movq	%rbp, (%rcx,%rsi)
	movq	%rdi, (%rax,%rsi)
	addq	$8, %rsi
	cmpq	$1, %rdx
	jg	.LBB26_68
	jmp	.LBB26_75
.LBB26_69:                              # %if.then6.i636
                                        #   in Loop: Header=BB26_2 Depth=1
	cmpq	$16, 96(%rsp)           # 8-byte Folded Reload
	jb	.LBB26_72
# %bb.70:                               # %vector.memcheck2428
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	120(%rsp), %rcx         # 8-byte Reload
	leaq	(%rbx,%rcx), %rax
	cmpq	%rax, %r13
	jae	.LBB26_263
# %bb.71:                               # %vector.memcheck2428
                                        #   in Loop: Header=BB26_2 Depth=1
	leaq	(%r13,%rcx), %rax
	cmpq	%rax, %rbx
	jae	.LBB26_263
.LBB26_72:                              #   in Loop: Header=BB26_2 Depth=1
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	%r13, %rcx
	movq	%rbx, %rdx
.LBB26_73:                              # %do.body12.i644.preheader
                                        #   in Loop: Header=BB26_2 Depth=1
	incq	%rax
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_74:                              # %do.body12.i644
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	(%rcx,%rsi), %edi
	movl	(%rdx,%rsi), %ebp
	decq	%rax
	movl	%ebp, (%rcx,%rsi)
	movl	%edi, (%rdx,%rsi)
	addq	$4, %rsi
	cmpq	$1, %rax
	jg	.LBB26_74
.LBB26_75:                              # %if.end90.split.split
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	16(%rsp), %rcx          # 8-byte Reload
	leaq	-1(%r14), %r12
	imulq	%rcx, %r12
	leaq	(%r13,%rcx), %rdx
	movq	%rdx, 128(%rsp)         # 8-byte Spill
	addq	%r13, %r12
	cmpq	$0, 208(%rsp)           # 8-byte Folded Reload
	je	.LBB26_149
# %bb.76:                               # %for.cond95.preheader
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	%rdx, %rbp
	movq	%rdx, %r14
	movl	$0, 8(%rsp)             # 4-byte Folded Spill
	movq	%r12, 24(%rsp)          # 8-byte Spill
	movq	%rdx, 64(%rsp)          # 8-byte Spill
	jmp	.LBB26_78
	.p2align	4, 0x90
.LBB26_77:                              # %if.end169
                                        #   in Loop: Header=BB26_78 Depth=2
	movq	16(%rsp), %rcx          # 8-byte Reload
	addq	%r9, %rbx
	movl	$1, 8(%rsp)             # 4-byte Folded Spill
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	addq	%rcx, %rbp
	movq	%rbp, 64(%rsp)          # 8-byte Spill
.LBB26_78:                              # %for.cond95
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_80 Depth 3
                                        #         Child Loop BB26_87 Depth 4
                                        #         Child Loop BB26_90 Depth 4
                                        #         Child Loop BB26_99 Depth 4
                                        #         Child Loop BB26_96 Depth 4
                                        #       Child Loop BB26_104 Depth 3
                                        #         Child Loop BB26_111 Depth 4
                                        #         Child Loop BB26_114 Depth 4
                                        #       Child Loop BB26_118 Depth 3
                                        #         Child Loop BB26_129 Depth 4
                                        #         Child Loop BB26_126 Depth 4
                                        #       Child Loop BB26_136 Depth 3
                                        #       Child Loop BB26_139 Depth 3
                                        #       Child Loop BB26_147 Depth 3
                                        #       Child Loop BB26_145 Depth 3
	movq	88(%rsp), %r8           # 8-byte Reload
	xorl	%r9d, %r9d
	movl	%r8d, %eax
	movq	%r8, %rdx
	andl	$63, %eax
	subq	%rax, %rdx
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movq	%rdx, 160(%rsp)         # 8-byte Spill
	cmpq	24(%rsp), %rbp          # 8-byte Folded Reload
	jbe	.LBB26_80
	jmp	.LBB26_101
.LBB26_98:                              # %vector.ph2311
                                        #   in Loop: Header=BB26_80 Depth=3
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	176(%rsp), %rbx         # 8-byte Reload
	xorl	%edi, %edi
	movl	%edx, %esi
	andl	$15, %esi
	subq	%rsi, %rdx
	subq	%rdx, %rax
	leaq	(%r14,%rdx,4), %rcx
	leaq	(%rbp,%rdx,4), %rdx
	.p2align	4, 0x90
.LBB26_99:                              # %vector.body2294
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_78 Depth=2
                                        #       Parent Loop BB26_80 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	vmovdqu	(%r14,%rdi,4), %ymm0
	vmovups	32(%r14,%rdi,4), %ymm1
	vmovups	(%rbp,%rdi,4), %ymm2
	vmovups	32(%rbp,%rdi,4), %ymm3
	vmovups	%ymm2, (%r14,%rdi,4)
	vmovups	%ymm3, 32(%r14,%rdi,4)
	vmovdqu	%ymm0, (%rbp,%rdi,4)
	vmovups	%ymm1, 32(%rbp,%rdi,4)
	addq	$16, %rdi
	cmpq	%rdi, %rbx
	jne	.LBB26_99
# %bb.100:                              # %middle.block2295
                                        #   in Loop: Header=BB26_80 Depth=3
	testq	%rsi, %rsi
	jne	.LBB26_95
	jmp	.LBB26_97
	.p2align	4, 0x90
.LBB26_80:                              # %land.rhs98
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_78 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_87 Depth 4
                                        #         Child Loop BB26_90 Depth 4
                                        #         Child Loop BB26_99 Depth 4
                                        #         Child Loop BB26_96 Depth 4
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rcx, %r15
	movq	%rbp, %rdi
	movq	%r13, %rsi
	movq	%r9, 80(%rsp)           # 8-byte Spill
	imulq	%r9, %r15
	leaq	(%r8,%r15), %rbx
	leaq	(%rax,%r15), %rcx
	addq	120(%rsp), %r15         # 8-byte Folded Reload
	addq	%rax, %rbx
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	addq	%rax, %r15
	vzeroupper
	callq	*112(%rsp)              # 8-byte Folded Reload
	movq	80(%rsp), %r9           # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	testl	%eax, %eax
	jg	.LBB26_101
# %bb.81:                               # %while.body
                                        #   in Loop: Header=BB26_80 Depth=3
	jne	.LBB26_79
# %bb.82:                               # %if.else.i665
                                        #   in Loop: Header=BB26_80 Depth=3
	cmpq	$0, 184(%rsp)           # 8-byte Folded Reload
	je	.LBB26_91
# %bb.83:                               # %do.body27.i683.preheader
                                        #   in Loop: Header=BB26_80 Depth=3
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	%r14, %rdi
	movq	%rbp, %rdx
	cmpq	$63, %r8
	jbe	.LBB26_89
# %bb.84:                               # %vector.memcheck2350
                                        #   in Loop: Header=BB26_80 Depth=3
	cmpq	%rbx, %r14
	jae	.LBB26_86
# %bb.85:                               # %vector.memcheck2350
                                        #   in Loop: Header=BB26_80 Depth=3
	movq	72(%rsp), %rax          # 8-byte Reload
	leaq	(%r14,%r8), %rsi
	movq	%r14, %rdi
	movq	%rbp, %rdx
	cmpq	%rsi, 32(%rsp)          # 8-byte Folded Reload
	jb	.LBB26_89
.LBB26_86:                              # %vector.ph2351
                                        #   in Loop: Header=BB26_80 Depth=3
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	72(%rsp), %rax          # 8-byte Reload
	xorl	%esi, %esi
	subq	%rcx, %rax
	leaq	(%r14,%rcx), %rdi
	leaq	(%rbp,%rcx), %rdx
	movq	136(%rsp), %rcx         # 8-byte Reload
	.p2align	4, 0x90
.LBB26_87:                              # %vector.body2336
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_78 Depth=2
                                        #       Parent Loop BB26_80 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	vmovdqu	(%r14,%rsi), %ymm0
	vmovups	32(%r14,%rsi), %ymm1
	vmovups	(%rbp,%rsi), %ymm2
	vmovups	32(%rbp,%rsi), %ymm3
	vmovups	%ymm2, (%r14,%rsi)
	vmovups	%ymm3, 32(%r14,%rsi)
	vmovdqu	%ymm0, (%rbp,%rsi)
	vmovups	%ymm1, 32(%rbp,%rsi)
	addq	$64, %rsi
	cmpq	%rsi, %rcx
	jne	.LBB26_87
# %bb.88:                               # %middle.block2337
                                        #   in Loop: Header=BB26_80 Depth=3
	cmpq	$0, 152(%rsp)           # 8-byte Folded Reload
	je	.LBB26_97
	.p2align	4, 0x90
.LBB26_89:                              # %do.body27.i683.preheader2769
                                        #   in Loop: Header=BB26_80 Depth=3
	incq	%rax
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_90:                              # %do.body27.i683
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_78 Depth=2
                                        #       Parent Loop BB26_80 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movzbl	(%rdi,%rsi), %ebx
	movzbl	(%rdx,%rsi), %ecx
	decq	%rax
	movb	%cl, (%rdi,%rsi)
	movb	%bl, (%rdx,%rsi)
	incq	%rsi
	cmpq	$1, %rax
	jg	.LBB26_90
	jmp	.LBB26_97
.LBB26_91:                              # %if.then6.i667
                                        #   in Loop: Header=BB26_80 Depth=3
	cmpq	$16, 96(%rsp)           # 8-byte Folded Reload
	jb	.LBB26_94
# %bb.92:                               # %vector.memcheck2310
                                        #   in Loop: Header=BB26_80 Depth=3
	cmpq	%r15, %r14
	jae	.LBB26_98
# %bb.93:                               # %vector.memcheck2310
                                        #   in Loop: Header=BB26_80 Depth=3
	movq	120(%rsp), %rax         # 8-byte Reload
	leaq	(%r14,%rax), %rax
	cmpq	%rax, 32(%rsp)          # 8-byte Folded Reload
	jae	.LBB26_98
.LBB26_94:                              #   in Loop: Header=BB26_80 Depth=3
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	%r14, %rcx
	movq	%rbp, %rdx
.LBB26_95:                              # %do.body12.i675.preheader
                                        #   in Loop: Header=BB26_80 Depth=3
	incq	%rax
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_96:                              # %do.body12.i675
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_78 Depth=2
                                        #       Parent Loop BB26_80 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	(%rcx,%rsi), %edi
	movl	(%rdx,%rsi), %ebx
	decq	%rax
	movl	%ebx, (%rcx,%rsi)
	movl	%edi, (%rdx,%rsi)
	addq	$4, %rsi
	cmpq	$1, %rax
	jg	.LBB26_96
.LBB26_97:                              # %if.end118
                                        #   in Loop: Header=BB26_80 Depth=3
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	$1, 8(%rsp)             # 4-byte Folded Spill
	addq	%rcx, %r14
.LBB26_79:                              # %if.end120
                                        #   in Loop: Header=BB26_80 Depth=3
	addq	%rcx, %rbp
	incq	%r9
	cmpq	24(%rsp), %rbp          # 8-byte Folded Reload
	jbe	.LBB26_80
.LBB26_101:                             # %while.cond122.preheader
                                        #   in Loop: Header=BB26_78 Depth=2
	cmpq	$0, 184(%rsp)           # 8-byte Folded Reload
	je	.LBB26_116
# %bb.102:                              # %while.cond122.preheader2776
                                        #   in Loop: Header=BB26_78 Depth=2
	movl	%r8d, %eax
	movq	24(%rsp), %rbx          # 8-byte Reload
	movq	(%rsp), %r9             # 8-byte Reload
	andl	$63, %eax
	subq	%rax, %r8
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	%r8, 152(%rsp)          # 8-byte Spill
	subq	%r8, %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	cmpq	%rbx, %rbp
	ja	.LBB26_189
	.p2align	4, 0x90
.LBB26_104:                             # %land.rhs125
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_78 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_111 Depth 4
                                        #         Child Loop BB26_114 Depth 4
	movq	%r9, %r15
	movq	%rax, 80(%rsp)          # 8-byte Spill
	movq	%rbx, %rdi
	movq	%r13, %rsi
	imulq	%rax, %r15
	movq	24(%rsp), %rax          # 8-byte Reload
	leaq	(%rax,%r15), %rcx
	addq	88(%rsp), %r15          # 8-byte Folded Reload
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	addq	%rax, %r15
	vzeroupper
	callq	*112(%rsp)              # 8-byte Folded Reload
	testl	%eax, %eax
	js	.LBB26_131
# %bb.105:                              # %while.body130
                                        #   in Loop: Header=BB26_104 Depth=3
	je	.LBB26_107
# %bb.106:                              #   in Loop: Header=BB26_104 Depth=3
	movq	(%rsp), %r9             # 8-byte Reload
	jmp	.LBB26_103
	.p2align	4, 0x90
.LBB26_107:                             # %do.body27.i714.preheader
                                        #   in Loop: Header=BB26_104 Depth=3
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	(%rsp), %r9             # 8-byte Reload
	cmpq	$64, 88(%rsp)           # 8-byte Folded Reload
	movq	%rbx, %r8
	movq	%r12, %rdi
	jb	.LBB26_113
# %bb.108:                              # %vector.memcheck2268
                                        #   in Loop: Header=BB26_104 Depth=3
	movq	88(%rsp), %rax          # 8-byte Reload
	leaq	(%r12,%rax), %rax
	cmpq	%rax, 32(%rsp)          # 8-byte Folded Reload
	jae	.LBB26_110
# %bb.109:                              # %vector.memcheck2268
                                        #   in Loop: Header=BB26_104 Depth=3
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	%rbx, %r8
	movq	%r12, %rdi
	cmpq	%r15, %r12
	jb	.LBB26_113
.LBB26_110:                             # %vector.ph2269
                                        #   in Loop: Header=BB26_104 Depth=3
	movq	152(%rsp), %rax         # 8-byte Reload
	xorl	%edx, %edx
	leaq	(%rbx,%rax), %r8
	leaq	(%r12,%rax), %rdi
	movq	136(%rsp), %rax         # 8-byte Reload
	.p2align	4, 0x90
.LBB26_111:                             # %vector.body2252
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_78 Depth=2
                                        #       Parent Loop BB26_104 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	vmovdqu	(%rbx,%rdx), %ymm0
	vmovups	32(%rbx,%rdx), %ymm1
	vmovups	(%r12,%rdx), %ymm2
	vmovups	32(%r12,%rdx), %ymm3
	vmovups	%ymm2, (%rbx,%rdx)
	vmovups	%ymm3, 32(%rbx,%rdx)
	vmovdqu	%ymm0, (%r12,%rdx)
	vmovups	%ymm1, 32(%r12,%rdx)
	addq	$64, %rdx
	cmpq	%rdx, %rax
	jne	.LBB26_111
# %bb.112:                              # %middle.block2253
                                        #   in Loop: Header=BB26_104 Depth=3
	movq	160(%rsp), %rdx         # 8-byte Reload
	cmpq	$0, 64(%rsp)            # 8-byte Folded Reload
	je	.LBB26_115
	.p2align	4, 0x90
.LBB26_113:                             # %do.body27.i714.preheader2768
                                        #   in Loop: Header=BB26_104 Depth=3
	incq	%rdx
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_114:                             # %do.body27.i714
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_78 Depth=2
                                        #       Parent Loop BB26_104 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movzbl	(%r8,%rsi), %eax
	movzbl	(%rdi,%rsi), %ecx
	decq	%rdx
	movb	%cl, (%r8,%rsi)
	movb	%al, (%rdi,%rsi)
	incq	%rsi
	cmpq	$1, %rdx
	jg	.LBB26_114
.LBB26_115:                             # %if.end146
                                        #   in Loop: Header=BB26_104 Depth=3
	addq	%r9, %r12
	movl	$1, 8(%rsp)             # 4-byte Folded Spill
.LBB26_103:                             # %if.end149
                                        #   in Loop: Header=BB26_104 Depth=3
	movq	80(%rsp), %rax          # 8-byte Reload
	addq	%r9, %rbx
	incq	%rax
	cmpq	%rbx, %rbp
	jbe	.LBB26_104
	jmp	.LBB26_189
	.p2align	4, 0x90
.LBB26_116:                             # %while.cond122.us1417.preheader
                                        #   in Loop: Header=BB26_78 Depth=2
	movq	96(%rsp), %rax          # 8-byte Reload
	movq	24(%rsp), %rbx          # 8-byte Reload
	movq	(%rsp), %r9             # 8-byte Reload
	movl	%eax, %ecx
	andl	$15, %ecx
	subq	%rcx, %rax
	movq	%rcx, 64(%rsp)          # 8-byte Spill
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	%rax, 152(%rsp)         # 8-byte Spill
	subq	%rax, %rcx
	movq	120(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	xorl	%ecx, %ecx
	cmpq	%rbx, %rbp
	jbe	.LBB26_118
	jmp	.LBB26_189
.LBB26_128:                             # %vector.ph2227
                                        #   in Loop: Header=BB26_118 Depth=3
	movq	152(%rsp), %rax         # 8-byte Reload
	xorl	%edx, %edx
	leaq	(%rbx,%rax,4), %r8
	leaq	(%r12,%rax,4), %rcx
	movq	176(%rsp), %rax         # 8-byte Reload
	.p2align	4, 0x90
.LBB26_129:                             # %vector.body2210
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_78 Depth=2
                                        #       Parent Loop BB26_118 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	vmovdqu	(%rbx,%rdx,4), %ymm0
	vmovups	32(%rbx,%rdx,4), %ymm1
	vmovups	(%r12,%rdx,4), %ymm2
	vmovups	32(%r12,%rdx,4), %ymm3
	vmovups	%ymm2, (%rbx,%rdx,4)
	vmovups	%ymm3, 32(%rbx,%rdx,4)
	vmovdqu	%ymm0, (%r12,%rdx,4)
	vmovups	%ymm1, 32(%r12,%rdx,4)
	addq	$16, %rdx
	cmpq	%rdx, %rax
	jne	.LBB26_129
# %bb.130:                              # %middle.block2211
                                        #   in Loop: Header=BB26_118 Depth=3
	movq	160(%rsp), %rdx         # 8-byte Reload
	cmpq	$0, 64(%rsp)            # 8-byte Folded Reload
	jne	.LBB26_125
	jmp	.LBB26_127
	.p2align	4, 0x90
.LBB26_118:                             # %land.rhs125.us1423
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_78 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_129 Depth 4
                                        #         Child Loop BB26_126 Depth 4
	movq	24(%rsp), %rsi          # 8-byte Reload
	movq	%r9, %r15
	movq	%rbx, %rdi
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	imulq	%rcx, %r15
	leaq	(%rsi,%r15), %rdx
	addq	%rax, %r15
	addq	%rsi, %r15
	movq	%r13, %rsi
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	vzeroupper
	callq	*112(%rsp)              # 8-byte Folded Reload
	testl	%eax, %eax
	js	.LBB26_131
# %bb.119:                              # %while.body130.us1426
                                        #   in Loop: Header=BB26_118 Depth=3
	je	.LBB26_121
# %bb.120:                              #   in Loop: Header=BB26_118 Depth=3
	movq	(%rsp), %r9             # 8-byte Reload
	jmp	.LBB26_117
	.p2align	4, 0x90
.LBB26_121:                             # %if.then6.i698.us1440
                                        #   in Loop: Header=BB26_118 Depth=3
	movq	(%rsp), %r9             # 8-byte Reload
	cmpq	$16, 96(%rsp)           # 8-byte Folded Reload
	jb	.LBB26_124
# %bb.122:                              # %vector.memcheck2226
                                        #   in Loop: Header=BB26_118 Depth=3
	movq	120(%rsp), %rax         # 8-byte Reload
	leaq	(%r12,%rax), %rax
	cmpq	%rax, 32(%rsp)          # 8-byte Folded Reload
	jae	.LBB26_128
# %bb.123:                              # %vector.memcheck2226
                                        #   in Loop: Header=BB26_118 Depth=3
	cmpq	%r15, %r12
	jae	.LBB26_128
.LBB26_124:                             #   in Loop: Header=BB26_118 Depth=3
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	%rbx, %r8
	movq	%r12, %rcx
.LBB26_125:                             # %do.body12.i706.us1441.preheader
                                        #   in Loop: Header=BB26_118 Depth=3
	incq	%rdx
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_126:                             # %do.body12.i706.us1441
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_78 Depth=2
                                        #       Parent Loop BB26_118 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	(%r8,%rsi), %edi
	movl	(%rcx,%rsi), %eax
	decq	%rdx
	movl	%eax, (%r8,%rsi)
	movl	%edi, (%rcx,%rsi)
	addq	$4, %rsi
	cmpq	$1, %rdx
	jg	.LBB26_126
.LBB26_127:                             # %if.end146.us1460
                                        #   in Loop: Header=BB26_118 Depth=3
	addq	%r9, %r12
	movl	$1, 8(%rsp)             # 4-byte Folded Spill
.LBB26_117:                             # %if.end149.us1462
                                        #   in Loop: Header=BB26_118 Depth=3
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	120(%rsp), %rax         # 8-byte Reload
	addq	%r9, %rbx
	incq	%rcx
	cmpq	%rbx, %rbp
	jbe	.LBB26_118
	jmp	.LBB26_189
	.p2align	4, 0x90
.LBB26_131:                             # %if.else166
                                        #   in Loop: Header=BB26_78 Depth=2
	movq	(%rsp), %r9             # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	176(%rsp), %rcx         # 8-byte Reload
	cmpq	$0, 184(%rsp)           # 8-byte Folded Reload
	je	.LBB26_140
# %bb.132:                              # %do.body27.i745.preheader
                                        #   in Loop: Header=BB26_78 Depth=2
	movq	72(%rsp), %rax          # 8-byte Reload
	cmpq	$63, 88(%rsp)           # 8-byte Folded Reload
	movq	%rbp, %r8
	movq	%rbx, %rcx
	jbe	.LBB26_138
# %bb.133:                              # %vector.memcheck2184
                                        #   in Loop: Header=BB26_78 Depth=2
	movq	88(%rsp), %rax          # 8-byte Reload
	leaq	(%rbx,%rax), %rax
	cmpq	%rax, %rbp
	jae	.LBB26_135
# %bb.134:                              # %vector.memcheck2184
                                        #   in Loop: Header=BB26_78 Depth=2
	movq	88(%rsp), %rax          # 8-byte Reload
	movq	%rbp, %r8
	movq	%rbx, %rcx
	leaq	(%rbp,%rax), %rsi
	movq	72(%rsp), %rax          # 8-byte Reload
	cmpq	%rsi, %rbx
	jb	.LBB26_138
.LBB26_135:                             # %vector.ph2185
                                        #   in Loop: Header=BB26_78 Depth=2
	movq	88(%rsp), %rcx          # 8-byte Reload
	movq	72(%rsp), %rax          # 8-byte Reload
	xorl	%edi, %edi
	movl	%ecx, %esi
	andl	$63, %esi
	subq	%rsi, %rcx
	subq	%rcx, %rax
	leaq	(%rbp,%rcx), %r8
	addq	%rbx, %rcx
	.p2align	4, 0x90
.LBB26_136:                             # %vector.body2171
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovdqu	(%rbp,%rdi), %ymm0
	vmovups	32(%rbp,%rdi), %ymm1
	vmovups	(%rbx,%rdi), %ymm2
	vmovups	32(%rbx,%rdi), %ymm3
	vmovups	%ymm2, (%rbp,%rdi)
	vmovups	%ymm3, 32(%rbp,%rdi)
	vmovdqu	%ymm0, (%rbx,%rdi)
	vmovups	%ymm1, 32(%rbx,%rdi)
	addq	$64, %rdi
	cmpq	%rdi, %rdx
	jne	.LBB26_136
# %bb.137:                              # %middle.block2172
                                        #   in Loop: Header=BB26_78 Depth=2
	testq	%rsi, %rsi
	je	.LBB26_77
	.p2align	4, 0x90
.LBB26_138:                             # %do.body27.i745.preheader2773
                                        #   in Loop: Header=BB26_78 Depth=2
	incq	%rax
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_139:                             # %do.body27.i745
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movzbl	(%r8,%rsi), %edi
	movzbl	(%rcx,%rsi), %edx
	decq	%rax
	movb	%dl, (%r8,%rsi)
	movb	%dil, (%rcx,%rsi)
	incq	%rsi
	cmpq	$1, %rax
	jg	.LBB26_139
	jmp	.LBB26_77
.LBB26_140:                             # %if.then6.i729
                                        #   in Loop: Header=BB26_78 Depth=2
	cmpq	$16, 96(%rsp)           # 8-byte Folded Reload
	jb	.LBB26_143
# %bb.141:                              # %vector.memcheck2145
                                        #   in Loop: Header=BB26_78 Depth=2
	movq	120(%rsp), %rdx         # 8-byte Reload
	leaq	(%rbx,%rdx), %rax
	cmpq	%rax, %rbp
	jae	.LBB26_146
# %bb.142:                              # %vector.memcheck2145
                                        #   in Loop: Header=BB26_78 Depth=2
	leaq	(%rbp,%rdx), %rax
	cmpq	%rax, %rbx
	jae	.LBB26_146
.LBB26_143:                             #   in Loop: Header=BB26_78 Depth=2
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	%rbp, %r8
	movq	%rbx, %rdx
.LBB26_144:                             # %do.body12.i737.preheader
                                        #   in Loop: Header=BB26_78 Depth=2
	incq	%rax
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_145:                             # %do.body12.i737
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	(%r8,%rsi), %edi
	movl	(%rdx,%rsi), %ecx
	decq	%rax
	movl	%ecx, (%r8,%rsi)
	movl	%edi, (%rdx,%rsi)
	addq	$4, %rsi
	cmpq	$1, %rax
	jg	.LBB26_145
	jmp	.LBB26_77
.LBB26_146:                             # %vector.ph2146
                                        #   in Loop: Header=BB26_78 Depth=2
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	48(%rsp), %rax          # 8-byte Reload
	xorl	%edi, %edi
	movl	%edx, %esi
	andl	$15, %esi
	subq	%rsi, %rdx
	subq	%rdx, %rax
	leaq	(%rbp,%rdx,4), %r8
	leaq	(%rbx,%rdx,4), %rdx
	.p2align	4, 0x90
.LBB26_147:                             # %vector.body2132
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovdqu	(%rbp,%rdi,4), %ymm0
	vmovups	32(%rbp,%rdi,4), %ymm1
	vmovups	(%rbx,%rdi,4), %ymm2
	vmovups	32(%rbx,%rdi,4), %ymm3
	vmovups	%ymm2, (%rbp,%rdi,4)
	vmovups	%ymm3, 32(%rbp,%rdi,4)
	vmovdqu	%ymm0, (%rbx,%rdi,4)
	vmovups	%ymm1, 32(%rbx,%rdi,4)
	addq	$16, %rdi
	cmpq	%rdi, %rcx
	jne	.LBB26_147
# %bb.148:                              # %middle.block2133
                                        #   in Loop: Header=BB26_78 Depth=2
	testq	%rsi, %rsi
	jne	.LBB26_144
	jmp	.LBB26_77
.LBB26_149:                             # %for.cond95.us1231.preheader
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	%rdx, %rbp
	movq	%rdx, %r14
	movl	$0, 8(%rsp)             # 4-byte Folded Spill
	movq	%r12, 24(%rsp)          # 8-byte Spill
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	movl	%eax, %esi
	movq	%rax, %r10
	andl	$7, %esi
	subq	%rsi, %r10
	movq	%rsi, 272(%rsp)         # 8-byte Spill
	movq	%r10, 200(%rsp)         # 8-byte Spill
	jmp	.LBB26_151
	.p2align	4, 0x90
.LBB26_150:                             # %if.end169.us1404
                                        #   in Loop: Header=BB26_151 Depth=2
	movq	16(%rsp), %rcx          # 8-byte Reload
	addq	%r9, %rbx
	movl	$1, 8(%rsp)             # 4-byte Folded Spill
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	addq	%rcx, %rbp
	movq	%rbp, 32(%rsp)          # 8-byte Spill
.LBB26_151:                             # %for.cond95.us1231
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_153 Depth 3
                                        #         Child Loop BB26_163 Depth 4
                                        #         Child Loop BB26_160 Depth 4
                                        #       Child Loop BB26_167 Depth 3
                                        #         Child Loop BB26_178 Depth 4
                                        #         Child Loop BB26_175 Depth 4
                                        #       Child Loop BB26_187 Depth 3
                                        #       Child Loop BB26_185 Depth 3
	movq	56(%rsp), %rax          # 8-byte Reload
	xorl	%r8d, %r8d
	subq	%r10, %rax
	movq	%rax, 64(%rsp)          # 8-byte Spill
	cmpq	24(%rsp), %rbp          # 8-byte Folded Reload
	jbe	.LBB26_153
	jmp	.LBB26_165
.LBB26_162:                             # %vector.ph2107
                                        #   in Loop: Header=BB26_153 Depth=3
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %rsi         # 8-byte Reload
	xorl	%edx, %edx
	leaq	(%rbp,%rcx,8), %rax
	leaq	(%r14,%rcx,8), %rcx
	.p2align	4, 0x90
.LBB26_163:                             # %vector.body2090
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_151 Depth=2
                                        #       Parent Loop BB26_153 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	vmovdqu	(%r14,%rdx,8), %ymm0
	vmovups	32(%r14,%rdx,8), %ymm1
	vmovups	(%rbp,%rdx,8), %ymm2
	vmovups	32(%rbp,%rdx,8), %ymm3
	vmovups	%ymm2, (%r14,%rdx,8)
	vmovups	%ymm3, 32(%r14,%rdx,8)
	vmovdqu	%ymm0, (%rbp,%rdx,8)
	vmovups	%ymm1, 32(%rbp,%rdx,8)
	addq	$8, %rdx
	cmpq	%rdx, %rsi
	jne	.LBB26_163
# %bb.164:                              # %middle.block2091
                                        #   in Loop: Header=BB26_153 Depth=3
	movq	64(%rsp), %rdx          # 8-byte Reload
	cmpq	$0, 272(%rsp)           # 8-byte Folded Reload
	jne	.LBB26_159
	jmp	.LBB26_161
	.p2align	4, 0x90
.LBB26_153:                             # %land.rhs98.us1243
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_151 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_163 Depth 4
                                        #         Child Loop BB26_160 Depth 4
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	%rcx, %r15
	movq	%rbp, %rdi
	movq	%r13, %rsi
	movq	%r8, 80(%rsp)           # 8-byte Spill
	imulq	%r8, %r15
	leaq	(%rax,%r15), %rbx
	addq	144(%rsp), %r15         # 8-byte Folded Reload
	addq	%rax, %r15
	vzeroupper
	callq	*112(%rsp)              # 8-byte Folded Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	(%rsp), %r9             # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	testl	%eax, %eax
	jg	.LBB26_165
# %bb.154:                              # %while.body.us1246
                                        #   in Loop: Header=BB26_153 Depth=3
	jne	.LBB26_152
# %bb.155:                              # %if.then.i656.us1271
                                        #   in Loop: Header=BB26_153 Depth=3
	cmpq	$8, 40(%rsp)            # 8-byte Folded Reload
	jb	.LBB26_158
# %bb.156:                              # %vector.memcheck2106
                                        #   in Loop: Header=BB26_153 Depth=3
	cmpq	%r15, %r14
	jae	.LBB26_162
# %bb.157:                              # %vector.memcheck2106
                                        #   in Loop: Header=BB26_153 Depth=3
	movq	144(%rsp), %rax         # 8-byte Reload
	leaq	(%r14,%rax), %rax
	cmpq	%rax, %rbx
	jae	.LBB26_162
.LBB26_158:                             #   in Loop: Header=BB26_153 Depth=3
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	%rbp, %rax
	movq	%r14, %rcx
.LBB26_159:                             # %do.body.i664.us1272.preheader
                                        #   in Loop: Header=BB26_153 Depth=3
	incq	%rdx
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_160:                             # %do.body.i664.us1272
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_151 Depth=2
                                        #       Parent Loop BB26_153 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movq	(%rcx,%rsi), %rdi
	movq	(%rax,%rsi), %rbx
	decq	%rdx
	movq	%rbx, (%rcx,%rsi)
	movq	%rdi, (%rax,%rsi)
	addq	$8, %rsi
	cmpq	$1, %rdx
	jg	.LBB26_160
.LBB26_161:                             # %if.end118.us1282
                                        #   in Loop: Header=BB26_153 Depth=3
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	$1, 8(%rsp)             # 4-byte Folded Spill
	addq	%rcx, %r14
.LBB26_152:                             # %if.end120.us1284
                                        #   in Loop: Header=BB26_153 Depth=3
	addq	%rcx, %rbp
	incq	%r8
	cmpq	24(%rsp), %rbp          # 8-byte Folded Reload
	jbe	.LBB26_153
.LBB26_165:                             # %while.cond122.us1296.preheader
                                        #   in Loop: Header=BB26_151 Depth=2
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	24(%rsp), %rbx          # 8-byte Reload
	movl	%eax, %ecx
	andl	$7, %ecx
	subq	%rcx, %rax
	movq	%rcx, 64(%rsp)          # 8-byte Spill
	subq	%rax, %rdx
	movq	%rax, 152(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rdx, 160(%rsp)         # 8-byte Spill
	cmpq	%rbx, %rbp
	jbe	.LBB26_167
	jmp	.LBB26_189
.LBB26_177:                             # %vector.ph2065
                                        #   in Loop: Header=BB26_167 Depth=3
	movq	152(%rsp), %rax         # 8-byte Reload
	xorl	%edx, %edx
	leaq	(%r12,%rax,8), %r8
	leaq	(%rbx,%rax,8), %rcx
	movq	168(%rsp), %rax         # 8-byte Reload
	.p2align	4, 0x90
.LBB26_178:                             # %vector.body2050
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_151 Depth=2
                                        #       Parent Loop BB26_167 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	vmovdqu	(%rbx,%rdx,8), %ymm0
	vmovups	32(%rbx,%rdx,8), %ymm1
	vmovups	(%r12,%rdx,8), %ymm2
	vmovups	32(%r12,%rdx,8), %ymm3
	vmovups	%ymm2, (%rbx,%rdx,8)
	vmovups	%ymm3, 32(%rbx,%rdx,8)
	vmovdqu	%ymm0, (%r12,%rdx,8)
	vmovups	%ymm1, 32(%r12,%rdx,8)
	addq	$8, %rdx
	cmpq	%rdx, %rax
	jne	.LBB26_178
# %bb.179:                              # %middle.block2051
                                        #   in Loop: Header=BB26_167 Depth=3
	movq	160(%rsp), %rdx         # 8-byte Reload
	cmpq	$0, 64(%rsp)            # 8-byte Folded Reload
	jne	.LBB26_174
	jmp	.LBB26_176
	.p2align	4, 0x90
.LBB26_167:                             # %land.rhs125.us1302
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_151 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_178 Depth 4
                                        #         Child Loop BB26_175 Depth 4
	movq	%r9, %r15
	movq	%rax, 80(%rsp)          # 8-byte Spill
	movq	%rbx, %rdi
	movq	%r13, %rsi
	imulq	%rax, %r15
	movq	24(%rsp), %rax          # 8-byte Reload
	leaq	(%rax,%r15), %rcx
	addq	144(%rsp), %r15         # 8-byte Folded Reload
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	addq	%rax, %r15
	vzeroupper
	callq	*112(%rsp)              # 8-byte Folded Reload
	testl	%eax, %eax
	js	.LBB26_180
# %bb.168:                              # %while.body130.us1308
                                        #   in Loop: Header=BB26_167 Depth=3
	je	.LBB26_170
# %bb.169:                              #   in Loop: Header=BB26_167 Depth=3
	movq	(%rsp), %r9             # 8-byte Reload
	jmp	.LBB26_166
	.p2align	4, 0x90
.LBB26_170:                             # %if.then.i687.us1332
                                        #   in Loop: Header=BB26_167 Depth=3
	movq	(%rsp), %r9             # 8-byte Reload
	cmpq	$8, 40(%rsp)            # 8-byte Folded Reload
	jb	.LBB26_173
# %bb.171:                              # %vector.memcheck2064
                                        #   in Loop: Header=BB26_167 Depth=3
	movq	144(%rsp), %rax         # 8-byte Reload
	leaq	(%r12,%rax), %rax
	cmpq	%rax, 32(%rsp)          # 8-byte Folded Reload
	jae	.LBB26_177
# %bb.172:                              # %vector.memcheck2064
                                        #   in Loop: Header=BB26_167 Depth=3
	cmpq	%r15, %r12
	jae	.LBB26_177
.LBB26_173:                             #   in Loop: Header=BB26_167 Depth=3
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	%r12, %r8
	movq	%rbx, %rcx
.LBB26_174:                             # %do.body.i695.us1333.preheader
                                        #   in Loop: Header=BB26_167 Depth=3
	incq	%rdx
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_175:                             # %do.body.i695.us1333
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_151 Depth=2
                                        #       Parent Loop BB26_167 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movq	(%rcx,%rsi), %rdi
	movq	(%r8,%rsi), %rax
	decq	%rdx
	movq	%rax, (%rcx,%rsi)
	movq	%rdi, (%r8,%rsi)
	addq	$8, %rsi
	cmpq	$1, %rdx
	jg	.LBB26_175
.LBB26_176:                             # %if.end146.us1342
                                        #   in Loop: Header=BB26_167 Depth=3
	addq	%r9, %r12
	movl	$1, 8(%rsp)             # 4-byte Folded Spill
.LBB26_166:                             # %if.end149.us1344
                                        #   in Loop: Header=BB26_167 Depth=3
	movq	80(%rsp), %rax          # 8-byte Reload
	addq	%r9, %rbx
	incq	%rax
	cmpq	%rbx, %rbp
	jbe	.LBB26_167
	jmp	.LBB26_189
	.p2align	4, 0x90
.LBB26_180:                             # %if.else166.us1367
                                        #   in Loop: Header=BB26_151 Depth=2
	cmpq	$8, 40(%rsp)            # 8-byte Folded Reload
	jb	.LBB26_183
# %bb.181:                              # %vector.memcheck2024
                                        #   in Loop: Header=BB26_151 Depth=2
	movq	144(%rsp), %rcx         # 8-byte Reload
	leaq	(%rbx,%rcx), %rax
	cmpq	%rax, %rbp
	jae	.LBB26_186
# %bb.182:                              # %vector.memcheck2024
                                        #   in Loop: Header=BB26_151 Depth=2
	leaq	(%rbp,%rcx), %rax
	cmpq	%rax, %rbx
	jae	.LBB26_186
.LBB26_183:                             #   in Loop: Header=BB26_151 Depth=2
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	(%rsp), %r9             # 8-byte Reload
	movq	200(%rsp), %r10         # 8-byte Reload
	movq	%rbx, %r8
	movq	%rbp, %rcx
.LBB26_184:                             # %do.body.i726.us1394.preheader
                                        #   in Loop: Header=BB26_151 Depth=2
	incq	%rdx
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_185:                             # %do.body.i726.us1394
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_151 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	(%rcx,%rsi), %rdi
	movq	(%r8,%rsi), %rax
	decq	%rdx
	movq	%rax, (%rcx,%rsi)
	movq	%rdi, (%r8,%rsi)
	addq	$8, %rsi
	cmpq	$1, %rdx
	jg	.LBB26_185
	jmp	.LBB26_150
.LBB26_186:                             # %vector.ph2025
                                        #   in Loop: Header=BB26_151 Depth=2
	movq	40(%rsp), %rdi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	168(%rsp), %rax         # 8-byte Reload
	movl	%edi, %esi
	andl	$7, %esi
	subq	%rsi, %rdi
	leaq	(%rbx,%rdi,8), %r8
	leaq	(%rbp,%rdi,8), %rcx
	subq	%rdi, %rdx
	xorl	%edi, %edi
	.p2align	4, 0x90
.LBB26_187:                             # %vector.body2011
                                        #   Parent Loop BB26_2 Depth=1
                                        #     Parent Loop BB26_151 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovdqu	(%rbp,%rdi,8), %ymm0
	vmovups	32(%rbp,%rdi,8), %ymm1
	vmovups	(%rbx,%rdi,8), %ymm2
	vmovups	32(%rbx,%rdi,8), %ymm3
	vmovups	%ymm2, (%rbp,%rdi,8)
	vmovups	%ymm3, 32(%rbp,%rdi,8)
	vmovdqu	%ymm0, (%rbx,%rdi,8)
	vmovups	%ymm1, 32(%rbx,%rdi,8)
	addq	$8, %rdi
	cmpq	%rdi, %rax
	jne	.LBB26_187
# %bb.188:                              # %middle.block2012
                                        #   in Loop: Header=BB26_151 Depth=2
	movq	(%rsp), %r9             # 8-byte Reload
	movq	200(%rsp), %r10         # 8-byte Reload
	testq	%rsi, %rsi
	jne	.LBB26_184
	jmp	.LBB26_150
	.p2align	4, 0x90
.LBB26_189:                             #   in Loop: Header=BB26_2 Depth=1
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	104(%rsp), %rax         # 8-byte Reload
	imulq	%rcx, %rax
	cmpl	$0, 8(%rsp)             # 4-byte Folded Reload
	movq	%rax, 104(%rsp)         # 8-byte Spill
	leaq	(%r13,%rax), %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	je	.LBB26_315
# %bb.190:                              # %if.end225
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	%rbp, %rax
	subq	%r14, %rax
	subq	%r13, %r14
	cmpq	%rax, %r14
	cmovgq	%rax, %r14
	testq	%r14, %r14
	je	.LBB26_228
# %bb.191:                              # %if.then247
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	%r14, %r8
	movq	%rbp, %r15
	movslq	%r14d, %rdx
	negq	%r8
	subq	%r14, %r15
	cmpq	$0, 208(%rsp)           # 8-byte Folded Reload
	je	.LBB26_199
# %bb.192:                              # %if.else.i789
                                        #   in Loop: Header=BB26_2 Depth=1
	cmpq	$0, 184(%rsp)           # 8-byte Folded Reload
	je	.LBB26_201
# %bb.193:                              # %do.body27.i807.preheader
                                        #   in Loop: Header=BB26_2 Depth=1
	cmpq	$2, %rdx
	movl	$1, %esi
	movl	$1, %r9d
	cmovlq	%rdx, %rsi
	subq	%rsi, %r9
	addq	%rdx, %r9
	cmpq	$63, %r9
	jbe	.LBB26_196
# %bb.194:                              # %vector.memcheck1985
                                        #   in Loop: Header=BB26_2 Depth=1
	cmpq	$2, %rdx
	movl	$1, %esi
	notq	%r14
	cmovlq	%rdx, %rsi
	notq	%rsi
	addq	%rsi, %r14
	addq	%rdx, %r14
	leaq	3(%rbp,%r14), %rdi
	cmpq	%rdi, %r13
	jae	.LBB26_209
# %bb.195:                              # %vector.memcheck1985
                                        #   in Loop: Header=BB26_2 Depth=1
	addq	%rdx, %rsi
	leaq	2(%r13,%rsi), %rsi
	cmpq	%rsi, %r15
	jae	.LBB26_209
.LBB26_196:                             #   in Loop: Header=BB26_2 Depth=1
	movq	(%rsp), %r9             # 8-byte Reload
	movq	%rdx, %rdi
	movq	%r13, %r11
.LBB26_197:                             # %do.body27.i807.preheader2783
                                        #   in Loop: Header=BB26_2 Depth=1
	incq	%rdi
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB26_198:                             # %do.body27.i807
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%r11,%rdx), %esi
	movzbl	(%r15,%rdx), %ecx
	decq	%rdi
	movb	%cl, (%r11,%rdx)
	movb	%sil, (%r15,%rdx)
	incq	%rdx
	cmpq	$1, %rdi
	jg	.LBB26_198
	jmp	.LBB26_228
	.p2align	4, 0x90
.LBB26_199:                             # %if.then.i780
                                        #   in Loop: Header=BB26_2 Depth=1
	xorl	%r10d, %r10d
	shrq	$3, %rdx
	sete	%r10b
	addq	%rdx, %r10
	cmpq	$8, %r10
	jb	.LBB26_200
# %bb.203:                              # %vector.memcheck1903
                                        #   in Loop: Header=BB26_2 Depth=1
	testq	%rdx, %rdx
	movabsq	$2305843009213693950, %rsi # imm = 0x1FFFFFFFFFFFFFFE
	notq	%r14
	cmoveq	256(%rsp), %rsi         # 8-byte Folded Reload
	addq	%rdx, %rsi
	leaq	(%r14,%rsi,8), %rdi
	leaq	17(%rbp,%rdi), %rdi
	cmpq	%rdi, %r13
	jae	.LBB26_212
# %bb.204:                              # %vector.memcheck1903
                                        #   in Loop: Header=BB26_2 Depth=1
	leaq	16(%r13,%rsi,8), %rsi
	cmpq	%rsi, %r15
	jae	.LBB26_212
.LBB26_200:                             #   in Loop: Header=BB26_2 Depth=1
	movq	%r13, %r11
.LBB26_215:                             # %do.body.i788.preheader
                                        #   in Loop: Header=BB26_2 Depth=1
	incq	%rdx
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_216:                             # %do.body.i788
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%r11,%rsi), %r8
	movq	(%r15,%rsi), %rdi
	decq	%rdx
	movq	%rdi, (%r11,%rsi)
	movq	%r8, (%r15,%rsi)
	addq	$8, %rsi
	cmpq	$1, %rdx
	jg	.LBB26_216
	jmp	.LBB26_228
.LBB26_201:                             # %if.then6.i791
                                        #   in Loop: Header=BB26_2 Depth=1
	xorl	%r10d, %r10d
	shrq	$2, %rdx
	sete	%r10b
	addq	%rdx, %r10
	cmpq	$16, %r10
	jb	.LBB26_202
# %bb.206:                              # %vector.memcheck1944
                                        #   in Loop: Header=BB26_2 Depth=1
	testq	%rdx, %rdx
	movabsq	$4611686018427387902, %rsi # imm = 0x3FFFFFFFFFFFFFFE
	notq	%r14
	cmoveq	248(%rsp), %rsi         # 8-byte Folded Reload
	addq	%rdx, %rsi
	leaq	(%r14,%rsi,4), %rdi
	leaq	9(%rbp,%rdi), %rdi
	cmpq	%rdi, %r13
	jae	.LBB26_223
# %bb.207:                              # %vector.memcheck1944
                                        #   in Loop: Header=BB26_2 Depth=1
	leaq	8(%r13,%rsi,4), %rsi
	cmpq	%rsi, %r15
	jae	.LBB26_223
.LBB26_202:                             #   in Loop: Header=BB26_2 Depth=1
	movq	%r13, %r11
.LBB26_226:                             # %do.body12.i799.preheader
                                        #   in Loop: Header=BB26_2 Depth=1
	incq	%rdx
	xorl	%edi, %edi
	.p2align	4, 0x90
.LBB26_227:                             # %do.body12.i799
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	(%r11,%rdi), %r8d
	movl	(%r15,%rdi), %esi
	decq	%rdx
	movl	%esi, (%r11,%rdi)
	movl	%r8d, (%r15,%rdi)
	addq	$4, %rdi
	cmpq	$1, %rdx
	jg	.LBB26_227
	.p2align	4, 0x90
.LBB26_228:                             # %if.end251
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %r15         # 8-byte Reload
	subq	%r12, %rdi
	subq	16(%rsp), %rdi          # 8-byte Folded Reload
	subq	%rbx, %r12
	cmpq	%rdi, %r12
	cmovleq	%r12, %rdi
	testq	%rdi, %rdi
	je	.LBB26_260
# %bb.229:                              # %if.then274
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	%rdi, %r8
	movslq	%edi, %rdx
	negq	%r8
	subq	%rdi, %rcx
	cmpq	$0, 208(%rsp)           # 8-byte Folded Reload
	je	.LBB26_237
# %bb.230:                              # %if.else.i820
                                        #   in Loop: Header=BB26_2 Depth=1
	cmpq	$0, 184(%rsp)           # 8-byte Folded Reload
	je	.LBB26_239
# %bb.231:                              # %do.body27.i838.preheader
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	104(%rsp), %r14         # 8-byte Reload
	cmpq	$2, %rdx
	movl	$1, %ebx
	movl	$1, %esi
	cmovlq	%rdx, %rbx
	subq	%rbx, %rsi
	addq	%rdx, %rsi
	cmpq	$63, %rsi
	jbe	.LBB26_234
# %bb.232:                              # %vector.memcheck1862
                                        #   in Loop: Header=BB26_2 Depth=1
	cmpq	$2, %rdx
	movl	$1, %ebx
	notq	%rdi
	cmovlq	%rdx, %rbx
	notq	%rbx
	addq	%rbx, %rdi
	addq	%r14, %rdi
	addq	%rdx, %rdi
	leaq	3(%r13,%rdi), %rdi
	cmpq	%rdi, %rbp
	jae	.LBB26_247
# %bb.233:                              # %vector.memcheck1862
                                        #   in Loop: Header=BB26_2 Depth=1
	addq	%rdx, %rbx
	leaq	2(%rbp,%rbx), %rdi
	cmpq	%rdi, %rcx
	jae	.LBB26_247
.LBB26_234:                             #   in Loop: Header=BB26_2 Depth=1
	movq	%rdx, %rdi
	movq	%rbp, %r11
.LBB26_235:                             # %do.body27.i838.preheader2780
                                        #   in Loop: Header=BB26_2 Depth=1
	incq	%rdi
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB26_236:                             # %do.body27.i838
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%r11,%rdx), %esi
	movzbl	(%rcx,%rdx), %ebx
	decq	%rdi
	movb	%bl, (%r11,%rdx)
	movb	%sil, (%rcx,%rdx)
	incq	%rdx
	cmpq	$1, %rdi
	jg	.LBB26_236
	jmp	.LBB26_260
	.p2align	4, 0x90
.LBB26_237:                             # %if.then.i811
                                        #   in Loop: Header=BB26_2 Depth=1
	xorl	%r10d, %r10d
	shrq	$3, %rdx
	sete	%r10b
	addq	%rdx, %r10
	cmpq	$8, %r10
	jb	.LBB26_238
# %bb.241:                              # %vector.memcheck
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	104(%rsp), %rbx         # 8-byte Reload
	testq	%rdx, %rdx
	movabsq	$2305843009213693950, %rsi # imm = 0x1FFFFFFFFFFFFFFE
	notq	%rdi
	cmoveq	256(%rsp), %rsi         # 8-byte Folded Reload
	addq	%rdx, %rsi
	addq	%rbx, %rdi
	leaq	(%rdi,%rsi,8), %rdi
	leaq	17(%r13,%rdi), %rdi
	cmpq	%rdi, %rbp
	jae	.LBB26_250
# %bb.242:                              # %vector.memcheck
                                        #   in Loop: Header=BB26_2 Depth=1
	leaq	16(%rbp,%rsi,8), %rsi
	cmpq	%rsi, %rcx
	jae	.LBB26_250
.LBB26_238:                             #   in Loop: Header=BB26_2 Depth=1
	movq	%rbp, %rdi
.LBB26_253:                             # %do.body.i819.preheader
                                        #   in Loop: Header=BB26_2 Depth=1
	incq	%rdx
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_254:                             # %do.body.i819
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rdi,%rsi), %rbp
	movq	(%rcx,%rsi), %rbx
	decq	%rdx
	movq	%rbx, (%rdi,%rsi)
	movq	%rbp, (%rcx,%rsi)
	addq	$8, %rsi
	cmpq	$1, %rdx
	jg	.LBB26_254
	jmp	.LBB26_260
.LBB26_239:                             # %if.then6.i822
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	104(%rsp), %rbx         # 8-byte Reload
	xorl	%r10d, %r10d
	shrq	$2, %rdx
	sete	%r10b
	addq	%rdx, %r10
	cmpq	$16, %r10
	jb	.LBB26_240
# %bb.244:                              # %vector.memcheck1821
                                        #   in Loop: Header=BB26_2 Depth=1
	testq	%rdx, %rdx
	movabsq	$4611686018427387902, %rsi # imm = 0x3FFFFFFFFFFFFFFE
	notq	%rdi
	cmoveq	248(%rsp), %rsi         # 8-byte Folded Reload
	addq	%rbx, %rdi
	addq	%rdx, %rsi
	leaq	(%rdi,%rsi,4), %rdi
	leaq	9(%r13,%rdi), %rdi
	cmpq	%rdi, %rbp
	jae	.LBB26_255
# %bb.245:                              # %vector.memcheck1821
                                        #   in Loop: Header=BB26_2 Depth=1
	leaq	8(%rbp,%rsi,4), %rsi
	cmpq	%rsi, %rcx
	jae	.LBB26_255
.LBB26_240:                             #   in Loop: Header=BB26_2 Depth=1
	movq	%rbp, %rdi
.LBB26_258:                             # %do.body12.i830.preheader
                                        #   in Loop: Header=BB26_2 Depth=1
	incq	%rdx
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_259:                             # %do.body12.i830
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	(%rdi,%rsi), %ebp
	movl	(%rcx,%rsi), %ebx
	decq	%rdx
	movl	%ebx, (%rdi,%rsi)
	movl	%ebp, (%rcx,%rsi)
	addq	$4, %rsi
	cmpq	$1, %rdx
	jg	.LBB26_259
	.p2align	4, 0x90
.LBB26_260:                             # %if.end278
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	16(%rsp), %rcx          # 8-byte Reload
	cmpq	%rcx, %rax
	jbe	.LBB26_262
# %bb.261:                              # %if.then284
                                        #   in Loop: Header=BB26_2 Depth=1
	xorl	%edx, %edx
	movq	%r13, %rdi
	divq	%rcx
	movq	%rcx, %rdx
	movq	%r15, %rcx
	movq	%rax, %rsi
	vzeroupper
	callq	spec_qsort
	movq	(%rsp), %r9             # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
.LBB26_262:                             # %if.end286
                                        #   in Loop: Header=BB26_2 Depth=1
	cmpq	%rcx, %r12
	ja	.LBB26_1
	jmp	.LBB26_364
.LBB26_209:                             # %vector.ph1986
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	%r9d, %r10d
	movq	%rdx, %rsi
	movq	%rdx, %rdi
	movq	$-2, %rcx
	andl	$63, %r10d
	notq	%rsi
	subq	%r10, %r9
	subq	%r9, %rdi
	addq	%r9, %r15
	cmpq	$-3, %rsi
	leaq	(%r13,%r9), %r11
	cmovleq	%rcx, %rsi
	leaq	2(%rsi,%rdx), %r9
	leaq	32(%rbp,%r8), %rdx
	xorl	%esi, %esi
	subq	%r10, %r9
	.p2align	4, 0x90
.LBB26_210:                             # %vector.body1970
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovdqu	(%r13,%rsi), %ymm0
	vmovups	32(%r13,%rsi), %ymm1
	vmovups	-32(%rdx,%rsi), %ymm2
	vmovups	(%rdx,%rsi), %ymm3
	vmovups	%ymm2, (%r13,%rsi)
	vmovups	%ymm3, 32(%r13,%rsi)
	vmovdqu	%ymm0, -32(%rdx,%rsi)
	vmovups	%ymm1, (%rdx,%rsi)
	addq	$64, %rsi
	cmpq	%rsi, %r9
	jne	.LBB26_210
# %bb.211:                              # %middle.block1971
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	(%rsp), %r9             # 8-byte Reload
	testq	%r10, %r10
	jne	.LBB26_197
	jmp	.LBB26_228
.LBB26_247:                             # %vector.ph1863
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	%esi, %r9d
	movq	%rdx, %r10
	movq	%rdx, %rdi
	movq	$-2, %rbx
	andl	$63, %r9d
	notq	%r10
	subq	%r9, %rsi
	subq	%rsi, %rdi
	addq	%rsi, %rcx
	cmpq	$-3, %r10
	leaq	(%rbp,%rsi), %r11
	cmovleq	%rbx, %r10
	addq	%r14, %r8
	leaq	2(%r10,%rdx), %r10
	leaq	32(%r13,%r8), %rsi
	xorl	%edx, %edx
	subq	%r9, %r10
	.p2align	4, 0x90
.LBB26_248:                             # %vector.body1847
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovdqu	(%rbp,%rdx), %ymm0
	vmovups	32(%rbp,%rdx), %ymm1
	vmovups	-32(%rsi,%rdx), %ymm2
	vmovups	(%rsi,%rdx), %ymm3
	vmovups	%ymm2, (%rbp,%rdx)
	vmovups	%ymm3, 32(%rbp,%rdx)
	vmovdqu	%ymm0, -32(%rsi,%rdx)
	vmovups	%ymm1, (%rsi,%rdx)
	addq	$64, %rdx
	cmpq	%rdx, %r10
	jne	.LBB26_248
# %bb.249:                              # %middle.block1848
                                        #   in Loop: Header=BB26_2 Depth=1
	testq	%r9, %r9
	movq	(%rsp), %r9             # 8-byte Reload
	jne	.LBB26_235
	jmp	.LBB26_260
.LBB26_212:                             # %vector.ph1904
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	%r10d, %r9d
	leaq	32(%rbp,%r8), %rdi
	xorl	%esi, %esi
	andl	$7, %r9d
	subq	%r9, %r10
	leaq	(%r15,%r10,8), %r15
	leaq	(%r13,%r10,8), %r11
	subq	%r10, %rdx
	.p2align	4, 0x90
.LBB26_213:                             # %vector.body1888
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovdqu	(%r13,%rsi,8), %ymm0
	vmovups	32(%r13,%rsi,8), %ymm1
	vmovups	-32(%rdi,%rsi,8), %ymm2
	vmovups	(%rdi,%rsi,8), %ymm3
	vmovups	%ymm2, (%r13,%rsi,8)
	vmovups	%ymm3, 32(%r13,%rsi,8)
	vmovdqu	%ymm0, -32(%rdi,%rsi,8)
	vmovups	%ymm1, (%rdi,%rsi,8)
	addq	$8, %rsi
	cmpq	%rsi, %r10
	jne	.LBB26_213
# %bb.214:                              # %middle.block1889
                                        #   in Loop: Header=BB26_2 Depth=1
	testq	%r9, %r9
	movq	(%rsp), %r9             # 8-byte Reload
	jne	.LBB26_215
	jmp	.LBB26_228
.LBB26_250:                             # %vector.ph
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	%r10d, %r9d
	addq	%rbx, %r8
	xorl	%ebx, %ebx
	andl	$7, %r9d
	leaq	32(%r13,%r8), %rsi
	subq	%r9, %r10
	leaq	(%rcx,%r10,8), %rcx
	leaq	(%rbp,%r10,8), %rdi
	subq	%r10, %rdx
	.p2align	4, 0x90
.LBB26_251:                             # %vector.body
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovdqu	(%rbp,%rbx,8), %ymm0
	vmovups	32(%rbp,%rbx,8), %ymm1
	vmovups	-32(%rsi,%rbx,8), %ymm2
	vmovups	(%rsi,%rbx,8), %ymm3
	vmovups	%ymm2, (%rbp,%rbx,8)
	vmovups	%ymm3, 32(%rbp,%rbx,8)
	vmovdqu	%ymm0, -32(%rsi,%rbx,8)
	vmovups	%ymm1, (%rsi,%rbx,8)
	addq	$8, %rbx
	cmpq	%rbx, %r10
	jne	.LBB26_251
# %bb.252:                              # %middle.block
                                        #   in Loop: Header=BB26_2 Depth=1
	testq	%r9, %r9
	movq	(%rsp), %r9             # 8-byte Reload
	jne	.LBB26_253
	jmp	.LBB26_260
.LBB26_217:                             # %vector.ph2468
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	72(%rsp), %rax          # 8-byte Reload
	movl	%ecx, %esi
	xorl	%edi, %edi
	andl	$63, %esi
	subq	%rsi, %rcx
	leaq	(%r13,%rcx), %rbp
	subq	%rcx, %rax
	addq	%rbx, %rcx
	.p2align	4, 0x90
.LBB26_218:                             # %vector.body2454
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovdqu	(%r13,%rdi), %ymm0
	vmovups	32(%r13,%rdi), %ymm1
	vmovups	(%rbx,%rdi), %ymm2
	vmovups	32(%rbx,%rdi), %ymm3
	vmovups	%ymm2, (%r13,%rdi)
	vmovups	%ymm3, 32(%r13,%rdi)
	vmovdqu	%ymm0, (%rbx,%rdi)
	vmovups	%ymm1, 32(%rbx,%rdi)
	addq	$64, %rdi
	cmpq	%rdi, %rdx
	jne	.LBB26_218
# %bb.219:                              # %middle.block2455
                                        #   in Loop: Header=BB26_2 Depth=1
	testq	%rsi, %rsi
	jne	.LBB26_37
	jmp	.LBB26_75
.LBB26_220:                             # %vector.ph2390
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	40(%rsp), %rdi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	168(%rsp), %rbp         # 8-byte Reload
	movl	%edi, %esi
	andl	$7, %esi
	subq	%rsi, %rdi
	leaq	(%rbx,%rdi,8), %rax
	leaq	(%r13,%rdi,8), %rcx
	subq	%rdi, %rdx
	xorl	%edi, %edi
	.p2align	4, 0x90
.LBB26_221:                             # %vector.body2376
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovdqu	(%r13,%rdi,8), %ymm0
	vmovups	32(%r13,%rdi,8), %ymm1
	vmovups	(%rbx,%rdi,8), %ymm2
	vmovups	32(%rbx,%rdi,8), %ymm3
	vmovups	%ymm2, (%r13,%rdi,8)
	vmovups	%ymm3, 32(%r13,%rdi,8)
	vmovdqu	%ymm0, (%rbx,%rdi,8)
	vmovups	%ymm1, 32(%rbx,%rdi,8)
	addq	$8, %rdi
	cmpq	%rdi, %rbp
	jne	.LBB26_221
# %bb.222:                              # %middle.block2377
                                        #   in Loop: Header=BB26_2 Depth=1
	testq	%rsi, %rsi
	jne	.LBB26_67
	jmp	.LBB26_75
.LBB26_223:                             # %vector.ph1945
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	%r10d, %r9d
	leaq	32(%rbp,%r8), %rdi
	xorl	%esi, %esi
	andl	$15, %r9d
	subq	%r9, %r10
	subq	%r10, %rdx
	leaq	(%r13,%r10,4), %r11
	leaq	(%r15,%r10,4), %r15
	.p2align	4, 0x90
.LBB26_224:                             # %vector.body1929
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovdqu	(%r13,%rsi,4), %ymm0
	vmovups	32(%r13,%rsi,4), %ymm1
	vmovups	-32(%rdi,%rsi,4), %ymm2
	vmovups	(%rdi,%rsi,4), %ymm3
	vmovups	%ymm2, (%r13,%rsi,4)
	vmovups	%ymm3, 32(%r13,%rsi,4)
	vmovdqu	%ymm0, -32(%rdi,%rsi,4)
	vmovups	%ymm1, (%rdi,%rsi,4)
	addq	$16, %rsi
	cmpq	%rsi, %r10
	jne	.LBB26_224
# %bb.225:                              # %middle.block1930
                                        #   in Loop: Header=BB26_2 Depth=1
	testq	%r9, %r9
	movq	(%rsp), %r9             # 8-byte Reload
	jne	.LBB26_226
	jmp	.LBB26_228
.LBB26_255:                             # %vector.ph1822
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	%r10d, %r9d
	addq	%rbx, %r8
	xorl	%ebx, %ebx
	andl	$15, %r9d
	leaq	32(%r13,%r8), %rsi
	subq	%r9, %r10
	subq	%r10, %rdx
	leaq	(%rbp,%r10,4), %rdi
	leaq	(%rcx,%r10,4), %rcx
	.p2align	4, 0x90
.LBB26_256:                             # %vector.body1806
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovdqu	(%rbp,%rbx,4), %ymm0
	vmovups	32(%rbp,%rbx,4), %ymm1
	vmovups	-32(%rsi,%rbx,4), %ymm2
	vmovups	(%rsi,%rbx,4), %ymm3
	vmovups	%ymm2, (%rbp,%rbx,4)
	vmovups	%ymm3, 32(%rbp,%rbx,4)
	vmovdqu	%ymm0, -32(%rsi,%rbx,4)
	vmovups	%ymm1, (%rsi,%rbx,4)
	addq	$16, %rbx
	cmpq	%rbx, %r10
	jne	.LBB26_256
# %bb.257:                              # %middle.block1807
                                        #   in Loop: Header=BB26_2 Depth=1
	testq	%r9, %r9
	movq	(%rsp), %r9             # 8-byte Reload
	jne	.LBB26_258
	jmp	.LBB26_260
.LBB26_263:                             # %vector.ph2429
                                        #   in Loop: Header=BB26_2 Depth=1
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	48(%rsp), %rax          # 8-byte Reload
	xorl	%edi, %edi
	movl	%edx, %esi
	andl	$15, %esi
	subq	%rsi, %rdx
	subq	%rdx, %rax
	leaq	(%r13,%rdx,4), %rcx
	leaq	(%rbx,%rdx,4), %rdx
	.p2align	4, 0x90
.LBB26_264:                             # %vector.body2415
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovdqu	(%r13,%rdi,4), %ymm0
	vmovups	32(%r13,%rdi,4), %ymm1
	vmovups	(%rbx,%rdi,4), %ymm2
	vmovups	32(%rbx,%rdi,4), %ymm3
	vmovups	%ymm2, (%r13,%rdi,4)
	vmovups	%ymm3, 32(%r13,%rdi,4)
	vmovdqu	%ymm0, (%rbx,%rdi,4)
	vmovups	%ymm1, 32(%rbx,%rdi,4)
	addq	$16, %rdi
	cmpq	%rdi, %rbp
	jne	.LBB26_264
# %bb.265:                              # %middle.block2416
                                        #   in Loop: Header=BB26_2 Depth=1
	testq	%rsi, %rsi
	jne	.LBB26_73
	jmp	.LBB26_75
.LBB26_266:                             # %for.cond.preheader
	movq	56(%rsp), %rax          # 8-byte Reload
	imulq	%rcx, %r14
	xorl	%esi, %esi
	movabsq	$2305843009213693950, %rdx # imm = 0x1FFFFFFFFFFFFFFE
	movq	%r13, %rbx
	addq	%r13, %r14
	movq	%r14, 104(%rsp)         # 8-byte Spill
	testq	%rax, %rax
	cmoveq	256(%rsp), %rdx         # 8-byte Folded Reload
	sete	%sil
	xorl	%edi, %edi
	addq	%rax, %rsi
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	addq	%rax, %rdx
	leaq	16(%rcx,%rdx,8), %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	leaq	16(,%rdx,8), %rax
	movabsq	$4611686018427387902, %rdx # imm = 0x3FFFFFFFFFFFFFFE
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movq	48(%rsp), %rax          # 8-byte Reload
	testq	%rax, %rax
	cmoveq	248(%rsp), %rdx         # 8-byte Folded Reload
	sete	%dil
	addq	%rax, %rdi
	movq	%rdi, 120(%rsp)         # 8-byte Spill
	addq	%rax, %rdx
	leaq	8(%rcx,%rdx,4), %rax
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	8(,%rdx,4), %rax
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movq	$-2, %rax
	cmpq	$-3, %rdx
	cmovgq	%rdx, %rax
	movq	72(%rsp), %rdx          # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	leaq	2(%rdx,%rcx), %rcx
	leaq	2(%rax,%rdx), %rbp
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	%rbp, 8(%rsp)           # 8-byte Spill
	addb	%cl, %al
	addb	$2, %al
	movzbl	%al, %eax
	andl	$63, %eax
	subq	%rax, %rbp
	leaq	(%r9,%rcx), %rax
	leaq	32(%r13,%rax), %rax
	movq	%rbp, 240(%rsp)         # 8-byte Spill
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movl	%edi, %eax
	andl	$15, %eax
	subq	%rax, %rdi
	movl	%esi, %eax
	andl	$7, %eax
	movq	%rdi, 216(%rsp)         # 8-byte Spill
	subq	%rax, %rsi
	leaq	32(%r9), %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	xorl	%eax, %eax
	movq	%rsi, 232(%rsp)         # 8-byte Spill
	movq	%rax, 144(%rsp)         # 8-byte Spill
	jmp	.LBB26_268
	.p2align	4, 0x90
.LBB26_267:                             # %for.inc45
                                        #   in Loop: Header=BB26_268 Depth=1
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	104(%rsp), %r14         # 8-byte Reload
	movq	88(%rsp), %rbx          # 8-byte Reload
	incq	144(%rsp)               # 8-byte Folded Spill
	addq	%rcx, 64(%rsp)          # 8-byte Folded Spill
.LBB26_268:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_281 Depth 2
                                        #       Child Loop BB26_289 Depth 3
                                        #       Child Loop BB26_287 Depth 3
                                        #     Child Loop BB26_305 Depth 2
                                        #       Child Loop BB26_313 Depth 3
                                        #       Child Loop BB26_311 Depth 3
                                        #     Child Loop BB26_293 Depth 2
                                        #       Child Loop BB26_301 Depth 3
                                        #       Child Loop BB26_299 Depth 3
                                        #     Child Loop BB26_278 Depth 2
                                        #     Child Loop BB26_275 Depth 2
	addq	%rcx, %rbx
	cmpq	%r14, %rbx
	jae	.LBB26_364
# %bb.269:                              # %for.cond21.preheader
                                        #   in Loop: Header=BB26_268 Depth=1
	cmpl	$0, 196(%rsp)           # 4-byte Folded Reload
	movq	%rbx, 88(%rsp)          # 8-byte Spill
	je	.LBB26_275
# %bb.270:                              # %for.cond21.preheader.split
                                        #   in Loop: Header=BB26_268 Depth=1
	cmpl	$0, 192(%rsp)           # 4-byte Folded Reload
	je	.LBB26_278
# %bb.271:                              # %for.cond21.preheader1023
                                        #   in Loop: Header=BB26_268 Depth=1
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	%rax, %rcx
	imulq	144(%rsp), %rcx         # 8-byte Folded Reload
	cmpq	$0, 208(%rsp)           # 8-byte Folded Reload
	leaq	(%rcx,%rax), %rax
	movq	%rax, 112(%rsp)         # 8-byte Spill
	je	.LBB26_291
# %bb.272:                              # %for.cond21.preheader1023.split
                                        #   in Loop: Header=BB26_268 Depth=1
	movq	88(%rsp), %rbx          # 8-byte Reload
	cmpq	$0, 184(%rsp)           # 8-byte Folded Reload
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	je	.LBB26_303
# %bb.273:                              # %for.cond21.preheader2759
                                        #   in Loop: Header=BB26_268 Depth=1
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	64(%rsp), %r12          # 8-byte Reload
	xorl	%r14d, %r14d
	leaq	(%rax,%rcx), %rax
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movq	8(%rsp), %rax           # 8-byte Reload
	leaq	(%rax,%rcx), %rcx
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movl	%eax, %ecx
	andl	$63, %ecx
	subq	%rcx, %rax
	movq	%rcx, 128(%rsp)         # 8-byte Spill
	subq	%rax, %rdx
	movq	%rax, 96(%rsp)          # 8-byte Spill
	movq	%rdx, 136(%rsp)         # 8-byte Spill
	cmpq	%r13, %rbx
	ja	.LBB26_281
	jmp	.LBB26_267
	.p2align	4, 0x90
.LBB26_274:                             # %if.then27.us
                                        #   in Loop: Header=BB26_275 Depth=2
	movq	(%rbx), %rax
	movq	(%rbx,%r9), %rcx
	movq	%rcx, (%rbx)
	movq	%rax, (%rbx,%r9)
	movq	%rbp, %rbx
.LBB26_275:                             # %for.cond21.us
                                        #   Parent Loop BB26_268 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	%r13, %rbx
	jbe	.LBB26_267
# %bb.276:                              # %land.rhs.us
                                        #   in Loop: Header=BB26_275 Depth=2
	leaq	(%rbx,%r9), %rbp
	movq	%rbx, %rsi
	movq	%rbp, %rdi
	vzeroupper
	callq	*%r15
	movq	(%rsp), %r9             # 8-byte Reload
	testl	%eax, %eax
	jg	.LBB26_274
	jmp	.LBB26_267
	.p2align	4, 0x90
.LBB26_277:                             # %if.then33.us916
                                        #   in Loop: Header=BB26_278 Depth=2
	movl	(%rbx), %eax
	movl	(%rbx,%r9), %ecx
	movl	%ecx, (%rbx)
	movl	%eax, (%rbx,%r9)
	movq	%rbp, %rbx
.LBB26_278:                             # %for.cond21.us879
                                        #   Parent Loop BB26_268 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	%r13, %rbx
	jbe	.LBB26_267
# %bb.279:                              # %land.rhs.us882
                                        #   in Loop: Header=BB26_278 Depth=2
	leaq	(%rbx,%r9), %rbp
	movq	%rbx, %rsi
	movq	%rbp, %rdi
	vzeroupper
	callq	*%r15
	movq	(%rsp), %r9             # 8-byte Reload
	testl	%eax, %eax
	jg	.LBB26_277
	jmp	.LBB26_267
	.p2align	4, 0x90
.LBB26_288:                             # %vector.ph2730
                                        #   in Loop: Header=BB26_281 Depth=2
	movq	96(%rsp), %rax          # 8-byte Reload
	xorl	%edx, %edx
	leaq	(%rbx,%rax), %rdi
	leaq	(%rbp,%rax), %rcx
	movq	240(%rsp), %rax         # 8-byte Reload
	.p2align	4, 0x90
.LBB26_289:                             # %vector.body2712
                                        #   Parent Loop BB26_268 Depth=1
                                        #     Parent Loop BB26_281 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovdqu	(%rbx,%rdx), %ymm0
	vmovups	32(%rbx,%rdx), %ymm1
	vmovups	-32(%r12,%rdx), %ymm2
	vmovups	(%r12,%rdx), %ymm3
	vmovups	%ymm2, (%rbx,%rdx)
	vmovups	%ymm3, 32(%rbx,%rdx)
	vmovdqu	%ymm0, -32(%r12,%rdx)
	vmovups	%ymm1, (%r12,%rdx)
	addq	$64, %rdx
	cmpq	%rdx, %rax
	jne	.LBB26_289
# %bb.290:                              # %middle.block2713
                                        #   in Loop: Header=BB26_281 Depth=2
	movq	136(%rsp), %rdx         # 8-byte Reload
	cmpq	$0, 128(%rsp)           # 8-byte Folded Reload
	jne	.LBB26_286
	jmp	.LBB26_280
	.p2align	4, 0x90
.LBB26_281:                             # %land.rhs
                                        #   Parent Loop BB26_268 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_289 Depth 3
                                        #       Child Loop BB26_287 Depth 3
	leaq	(%rbx,%r9), %rbp
	movq	%rbx, %rsi
	movq	%rbp, %rdi
	vzeroupper
	callq	*%r15
	movq	(%rsp), %r9             # 8-byte Reload
	testl	%eax, %eax
	jle	.LBB26_267
# %bb.282:                              # %do.body27.i.preheader
                                        #   in Loop: Header=BB26_281 Depth=2
	cmpq	$64, 8(%rsp)            # 8-byte Folded Reload
	jb	.LBB26_285
# %bb.283:                              # %vector.memcheck2729
                                        #   in Loop: Header=BB26_281 Depth=2
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	32(%rsp), %rdx          # 8-byte Reload
	movq	%r9, %rax
	imulq	%r14, %rax
	leaq	(%rcx,%rax), %rcx
	leaq	(%rdx,%rax), %rdx
	addq	%r13, %rcx
	addq	%r13, %rdx
	cmpq	%rdx, %rcx
	jae	.LBB26_288
# %bb.284:                              # %vector.memcheck2729
                                        #   in Loop: Header=BB26_281 Depth=2
	movq	40(%rsp), %rcx          # 8-byte Reload
	leaq	(%rcx,%rax), %rcx
	addq	80(%rsp), %rax          # 8-byte Folded Reload
	addq	%r13, %rcx
	addq	%r13, %rax
	cmpq	%rcx, %rax
	jae	.LBB26_288
.LBB26_285:                             #   in Loop: Header=BB26_281 Depth=2
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	%rbx, %rdi
	movq	%rbp, %rcx
.LBB26_286:                             # %do.body27.i.preheader2755
                                        #   in Loop: Header=BB26_281 Depth=2
	incq	%rdx
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_287:                             # %do.body27.i
                                        #   Parent Loop BB26_268 Depth=1
                                        #     Parent Loop BB26_281 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movzbl	(%rdi,%rsi), %ebx
	movzbl	(%rcx,%rsi), %eax
	decq	%rdx
	movb	%al, (%rdi,%rsi)
	movb	%bl, (%rcx,%rsi)
	incq	%rsi
	cmpq	$1, %rdx
	jg	.LBB26_287
.LBB26_280:                             # %for.cond21.loopexit
                                        #   in Loop: Header=BB26_281 Depth=2
	incq	%r14
	addq	%r9, %r12
	movq	%rbp, %rbx
	cmpq	%r13, %rbx
	ja	.LBB26_281
	jmp	.LBB26_267
.LBB26_291:                             # %for.cond21.us1092.preheader
                                        #   in Loop: Header=BB26_268 Depth=1
	movq	168(%rsp), %rax         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	88(%rsp), %rbx          # 8-byte Reload
	movq	%rcx, %r14
	xorl	%r12d, %r12d
	leaq	(%rax,%rcx), %rax
	movq	%rax, 40(%rsp)          # 8-byte Spill
	leaq	(%rdx,%rcx), %rax
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ecx
	andl	$7, %ecx
	subq	%rcx, %rax
	movq	%rcx, 128(%rsp)         # 8-byte Spill
	subq	%rax, %rdx
	movq	%rax, 96(%rsp)          # 8-byte Spill
	movq	%rdx, 136(%rsp)         # 8-byte Spill
	cmpq	%r13, %rbx
	ja	.LBB26_293
	jmp	.LBB26_267
	.p2align	4, 0x90
.LBB26_300:                             # %vector.ph2644
                                        #   in Loop: Header=BB26_293 Depth=2
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	232(%rsp), %rdi         # 8-byte Reload
	xorl	%esi, %esi
	leaq	(%rbp,%rcx,8), %rax
	leaq	(%rbx,%rcx,8), %rcx
	leaq	(%rbx,%rdx), %rdx
	.p2align	4, 0x90
.LBB26_301:                             # %vector.body2624
                                        #   Parent Loop BB26_268 Depth=1
                                        #     Parent Loop BB26_293 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovdqu	(%rbx,%rsi,8), %ymm0
	vmovups	32(%rbx,%rsi,8), %ymm1
	vmovups	-32(%rdx,%rsi,8), %ymm2
	vmovups	(%rdx,%rsi,8), %ymm3
	vmovups	%ymm2, (%rbx,%rsi,8)
	vmovups	%ymm3, 32(%rbx,%rsi,8)
	vmovdqu	%ymm0, -32(%rdx,%rsi,8)
	vmovups	%ymm1, (%rdx,%rsi,8)
	addq	$8, %rsi
	cmpq	%rsi, %rdi
	jne	.LBB26_301
# %bb.302:                              # %middle.block2625
                                        #   in Loop: Header=BB26_293 Depth=2
	movq	136(%rsp), %rdx         # 8-byte Reload
	cmpq	$0, 128(%rsp)           # 8-byte Folded Reload
	jne	.LBB26_298
	jmp	.LBB26_292
	.p2align	4, 0x90
.LBB26_293:                             # %land.rhs.us1095
                                        #   Parent Loop BB26_268 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_301 Depth 3
                                        #       Child Loop BB26_299 Depth 3
	leaq	(%rbx,%r9), %rbp
	movq	%rbx, %rsi
	movq	%rbp, %rdi
	vzeroupper
	callq	*%r15
	movq	(%rsp), %r9             # 8-byte Reload
	testl	%eax, %eax
	jle	.LBB26_267
# %bb.294:                              # %if.then.i.us
                                        #   in Loop: Header=BB26_293 Depth=2
	cmpq	$8, 24(%rsp)            # 8-byte Folded Reload
	jb	.LBB26_297
# %bb.295:                              # %vector.memcheck2643
                                        #   in Loop: Header=BB26_293 Depth=2
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	32(%rsp), %rdx          # 8-byte Reload
	movq	%r9, %rax
	imulq	%r12, %rax
	leaq	(%rcx,%rax), %rcx
	leaq	(%rdx,%rax), %rdx
	addq	%r13, %rcx
	addq	%r13, %rdx
	cmpq	%rdx, %rcx
	jae	.LBB26_300
# %bb.296:                              # %vector.memcheck2643
                                        #   in Loop: Header=BB26_293 Depth=2
	movq	40(%rsp), %rcx          # 8-byte Reload
	leaq	(%rcx,%rax), %rcx
	addq	%r14, %rax
	addq	%r13, %rcx
	addq	%r13, %rax
	cmpq	%rcx, %rax
	jae	.LBB26_300
.LBB26_297:                             #   in Loop: Header=BB26_293 Depth=2
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	%rbp, %rax
	movq	%rbx, %rcx
.LBB26_298:                             # %do.body.i.us.preheader
                                        #   in Loop: Header=BB26_293 Depth=2
	incq	%rdx
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_299:                             # %do.body.i.us
                                        #   Parent Loop BB26_268 Depth=1
                                        #     Parent Loop BB26_293 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	(%rcx,%rsi), %rdi
	movq	(%rax,%rsi), %rbx
	decq	%rdx
	movq	%rbx, (%rcx,%rsi)
	movq	%rdi, (%rax,%rsi)
	addq	$8, %rsi
	cmpq	$1, %rdx
	jg	.LBB26_299
.LBB26_292:                             # %for.cond21.us1092.loopexit
                                        #   in Loop: Header=BB26_293 Depth=2
	incq	%r12
	movq	%rbp, %rbx
	cmpq	%r13, %rbx
	ja	.LBB26_293
	jmp	.LBB26_267
.LBB26_303:                             # %for.cond21.us1099.preheader
                                        #   in Loop: Header=BB26_268 Depth=1
	movq	160(%rsp), %rax         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	64(%rsp), %r12          # 8-byte Reload
	xorl	%r14d, %r14d
	leaq	(%rax,%rcx), %rax
	movq	%rax, 40(%rsp)          # 8-byte Spill
	leaq	(%rdx,%rcx), %rax
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movq	120(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ecx
	andl	$15, %ecx
	subq	%rcx, %rax
	movq	%rcx, 128(%rsp)         # 8-byte Spill
	subq	%rax, %rdx
	movq	%rax, 96(%rsp)          # 8-byte Spill
	movq	%rdx, 136(%rsp)         # 8-byte Spill
	cmpq	%r13, %rbx
	ja	.LBB26_305
	jmp	.LBB26_267
	.p2align	4, 0x90
.LBB26_312:                             # %vector.ph2687
                                        #   in Loop: Header=BB26_305 Depth=2
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	xorl	%edx, %edx
	leaq	(%rbx,%rcx,4), %rax
	leaq	(%rbp,%rcx,4), %rcx
	.p2align	4, 0x90
.LBB26_313:                             # %vector.body2669
                                        #   Parent Loop BB26_268 Depth=1
                                        #     Parent Loop BB26_305 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovdqu	(%rbx,%rdx,4), %ymm0
	vmovups	32(%rbx,%rdx,4), %ymm1
	vmovups	-32(%r12,%rdx,4), %ymm2
	vmovups	(%r12,%rdx,4), %ymm3
	vmovups	%ymm2, (%rbx,%rdx,4)
	vmovups	%ymm3, 32(%rbx,%rdx,4)
	vmovdqu	%ymm0, -32(%r12,%rdx,4)
	vmovups	%ymm1, (%r12,%rdx,4)
	addq	$16, %rdx
	cmpq	%rdx, %rsi
	jne	.LBB26_313
# %bb.314:                              # %middle.block2670
                                        #   in Loop: Header=BB26_305 Depth=2
	movq	136(%rsp), %rdx         # 8-byte Reload
	cmpq	$0, 128(%rsp)           # 8-byte Folded Reload
	jne	.LBB26_310
	jmp	.LBB26_304
	.p2align	4, 0x90
.LBB26_305:                             # %land.rhs.us1103
                                        #   Parent Loop BB26_268 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_313 Depth 3
                                        #       Child Loop BB26_311 Depth 3
	leaq	(%rbx,%r9), %rbp
	movq	%rbx, %rsi
	movq	%rbp, %rdi
	vzeroupper
	callq	*%r15
	movq	(%rsp), %r9             # 8-byte Reload
	testl	%eax, %eax
	jle	.LBB26_267
# %bb.306:                              # %if.then6.i.us1119
                                        #   in Loop: Header=BB26_305 Depth=2
	cmpq	$16, 120(%rsp)          # 8-byte Folded Reload
	jb	.LBB26_309
# %bb.307:                              # %vector.memcheck2686
                                        #   in Loop: Header=BB26_305 Depth=2
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	32(%rsp), %rdx          # 8-byte Reload
	movq	%r9, %rax
	imulq	%r14, %rax
	leaq	(%rcx,%rax), %rcx
	leaq	(%rdx,%rax), %rdx
	addq	%r13, %rcx
	addq	%r13, %rdx
	cmpq	%rdx, %rcx
	jae	.LBB26_312
# %bb.308:                              # %vector.memcheck2686
                                        #   in Loop: Header=BB26_305 Depth=2
	movq	40(%rsp), %rcx          # 8-byte Reload
	leaq	(%rcx,%rax), %rcx
	addq	80(%rsp), %rax          # 8-byte Folded Reload
	addq	%r13, %rcx
	addq	%r13, %rax
	cmpq	%rcx, %rax
	jae	.LBB26_312
.LBB26_309:                             #   in Loop: Header=BB26_305 Depth=2
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	%rbx, %rax
	movq	%rbp, %rcx
.LBB26_310:                             # %do.body12.i.us1120.preheader
                                        #   in Loop: Header=BB26_305 Depth=2
	incq	%rdx
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_311:                             # %do.body12.i.us1120
                                        #   Parent Loop BB26_268 Depth=1
                                        #     Parent Loop BB26_305 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	(%rax,%rsi), %edi
	movl	(%rcx,%rsi), %ebx
	decq	%rdx
	movl	%ebx, (%rax,%rsi)
	movl	%edi, (%rcx,%rsi)
	addq	$4, %rsi
	cmpq	$1, %rdx
	jg	.LBB26_311
.LBB26_304:                             # %for.cond21.us1099.loopexit
                                        #   in Loop: Header=BB26_305 Depth=2
	incq	%r14
	addq	%r9, %r12
	movq	%rbp, %rbx
	cmpq	%r13, %rbx
	ja	.LBB26_305
	jmp	.LBB26_267
.LBB26_315:                             # %for.cond178.preheader
	movq	56(%rsp), %rax          # 8-byte Reload
	xorl	%esi, %esi
	movabsq	$2305843009213693950, %rdx # imm = 0x1FFFFFFFFFFFFFFE
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %rbx         # 8-byte Reload
	testq	%rax, %rax
	cmoveq	256(%rsp), %rdx         # 8-byte Folded Reload
	sete	%sil
	xorl	%edi, %edi
	addq	%rax, %rsi
	movq	%rsi, 88(%rsp)          # 8-byte Spill
	addq	%rax, %rdx
	leaq	16(,%rdx,8), %rax
	movabsq	$4611686018427387902, %rdx # imm = 0x3FFFFFFFFFFFFFFE
	movq	%rax, 216(%rsp)         # 8-byte Spill
	subq	%rcx, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	movq	48(%rsp), %rax          # 8-byte Reload
	testq	%rax, %rax
	cmoveq	248(%rsp), %rdx         # 8-byte Folded Reload
	sete	%dil
	addq	%rax, %rdi
	movq	%rdi, 144(%rsp)         # 8-byte Spill
	addq	%rax, %rdx
	leaq	8(,%rdx,4), %rax
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	%rax, 168(%rsp)         # 8-byte Spill
	subq	%rcx, %rax
	cmpq	$-3, %r8
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movq	$-2, %rax
	cmovgq	%r8, %rax
	leaq	2(%rax,%rdx), %rdx
	addb	%cl, %al
	addb	$2, %al
	movq	%rdx, %rbp
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	movzbl	%al, %eax
	subq	%rcx, %rbp
	andl	$63, %eax
	movq	%rbp, 224(%rsp)         # 8-byte Spill
	subq	%rax, %rdx
	leaq	32(%r9), %rax
	movq	%rax, 136(%rsp)         # 8-byte Spill
	leaq	32(%rbx,%r9), %rax
	movq	%rdx, 96(%rsp)          # 8-byte Spill
	movq	%rax, 104(%rsp)         # 8-byte Spill
	movl	%edi, %eax
	andl	$15, %eax
	subq	%rax, %rdi
	movl	%esi, %eax
	andl	$7, %eax
	movq	%rdi, 232(%rsp)         # 8-byte Spill
	subq	%rax, %rsi
	xorl	%eax, %eax
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movq	%rsi, 240(%rsp)         # 8-byte Spill
	cmpq	24(%rsp), %rbx          # 8-byte Folded Reload
	jae	.LBB26_364
	.p2align	4, 0x90
.LBB26_317:                             # %for.cond184.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_329 Depth 2
                                        #       Child Loop BB26_338 Depth 3
                                        #       Child Loop BB26_336 Depth 3
                                        #     Child Loop BB26_354 Depth 2
                                        #       Child Loop BB26_362 Depth 3
                                        #       Child Loop BB26_360 Depth 3
                                        #     Child Loop BB26_342 Depth 2
                                        #       Child Loop BB26_350 Depth 3
                                        #       Child Loop BB26_348 Depth 3
                                        #     Child Loop BB26_326 Depth 2
                                        #     Child Loop BB26_323 Depth 2
	cmpl	$0, 196(%rsp)           # 4-byte Folded Reload
	movq	%rbx, 128(%rsp)         # 8-byte Spill
	je	.LBB26_323
# %bb.318:                              # %for.cond184.preheader.split
                                        #   in Loop: Header=BB26_317 Depth=1
	cmpl	$0, 192(%rsp)           # 4-byte Folded Reload
	je	.LBB26_326
# %bb.319:                              # %for.cond184.preheader1028
                                        #   in Loop: Header=BB26_317 Depth=1
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	%rax, %rcx
	imulq	32(%rsp), %rcx          # 8-byte Folded Reload
	leaq	(%r13,%rax), %r12
	movq	%rcx, %rdx
	subq	%rax, %rdx
	cmpq	$0, 208(%rsp)           # 8-byte Folded Reload
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	je	.LBB26_340
# %bb.320:                              # %for.cond184.preheader1028.split
                                        #   in Loop: Header=BB26_317 Depth=1
	movq	128(%rsp), %rbx         # 8-byte Reload
	cmpq	$0, 184(%rsp)           # 8-byte Folded Reload
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	je	.LBB26_352
# %bb.321:                              # %for.cond184.preheader2765
                                        #   in Loop: Header=BB26_317 Depth=1
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %r14         # 8-byte Reload
	xorl	%ebp, %ebp
	leaq	(%rax,%rcx), %rax
	movq	%rax, 40(%rsp)          # 8-byte Spill
	leaq	(%rdx,%rcx), %rax
	movq	%rax, 64(%rsp)          # 8-byte Spill
	cmpq	%r13, %rbx
	ja	.LBB26_329
	jmp	.LBB26_316
	.p2align	4, 0x90
.LBB26_322:                             # %if.then197.us
                                        #   in Loop: Header=BB26_323 Depth=2
	movq	(%rbx), %rax
	movq	(%rbx,%r9), %rcx
	movq	%rcx, (%rbx)
	movq	%rax, (%rbx,%r9)
	movq	%rbp, %rbx
.LBB26_323:                             # %for.cond184.us
                                        #   Parent Loop BB26_317 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	%r13, %rbx
	jbe	.LBB26_316
# %bb.324:                              # %land.rhs187.us
                                        #   in Loop: Header=BB26_323 Depth=2
	leaq	(%rbx,%r9), %rbp
	movq	%rbx, %rsi
	movq	%rbp, %rdi
	vzeroupper
	callq	*112(%rsp)              # 8-byte Folded Reload
	movq	(%rsp), %r9             # 8-byte Reload
	testl	%eax, %eax
	jg	.LBB26_322
	jmp	.LBB26_316
	.p2align	4, 0x90
.LBB26_325:                             # %if.then206.us960
                                        #   in Loop: Header=BB26_326 Depth=2
	movl	(%rbx), %eax
	movl	(%rbx,%r9), %ecx
	movl	%ecx, (%rbx)
	movl	%eax, (%rbx,%r9)
	movq	%rbp, %rbx
.LBB26_326:                             # %for.cond184.us923
                                        #   Parent Loop BB26_317 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	%r13, %rbx
	jbe	.LBB26_316
# %bb.327:                              # %land.rhs187.us926
                                        #   in Loop: Header=BB26_326 Depth=2
	leaq	(%rbx,%r9), %rbp
	movq	%rbx, %rsi
	movq	%rbp, %rdi
	vzeroupper
	callq	*112(%rsp)              # 8-byte Folded Reload
	movq	(%rsp), %r9             # 8-byte Reload
	testl	%eax, %eax
	jg	.LBB26_325
	jmp	.LBB26_316
	.p2align	4, 0x90
.LBB26_337:                             # %vector.ph2599
                                        #   in Loop: Header=BB26_329 Depth=2
	movq	8(%rsp), %rcx           # 8-byte Reload
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	xorl	%edi, %edi
	movl	%ecx, %esi
	andl	$63, %esi
	subq	%rsi, %rcx
	subq	%rcx, %rax
	leaq	(%rbx,%rcx), %rbp
	addq	%r15, %rcx
	.p2align	4, 0x90
.LBB26_338:                             # %vector.body2581
                                        #   Parent Loop BB26_317 Depth=1
                                        #     Parent Loop BB26_329 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovdqu	(%rbx,%rdi), %ymm0
	vmovups	32(%rbx,%rdi), %ymm1
	vmovups	-32(%r14,%rdi), %ymm2
	vmovups	(%r14,%rdi), %ymm3
	vmovups	%ymm2, (%rbx,%rdi)
	vmovups	%ymm3, 32(%rbx,%rdi)
	vmovdqu	%ymm0, -32(%r14,%rdi)
	vmovups	%ymm1, (%r14,%rdi)
	addq	$64, %rdi
	cmpq	%rdi, %rdx
	jne	.LBB26_338
# %bb.339:                              # %middle.block2582
                                        #   in Loop: Header=BB26_329 Depth=2
	testq	%rsi, %rsi
	jne	.LBB26_335
	jmp	.LBB26_328
	.p2align	4, 0x90
.LBB26_329:                             # %land.rhs187
                                        #   Parent Loop BB26_317 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_338 Depth 3
                                        #       Child Loop BB26_336 Depth 3
	leaq	(%rbx,%r9), %r15
	movq	%rbx, %rsi
	movq	%r15, %rdi
	vzeroupper
	callq	*112(%rsp)              # 8-byte Folded Reload
	movq	(%rsp), %r9             # 8-byte Reload
	testl	%eax, %eax
	jle	.LBB26_316
# %bb.330:                              # %do.body27.i776.preheader
                                        #   in Loop: Header=BB26_329 Depth=2
	cmpq	$64, 8(%rsp)            # 8-byte Folded Reload
	jae	.LBB26_332
# %bb.331:                              #   in Loop: Header=BB26_329 Depth=2
	movq	%rbp, %r8
	jmp	.LBB26_334
	.p2align	4, 0x90
.LBB26_332:                             # %vector.memcheck2598
                                        #   in Loop: Header=BB26_329 Depth=2
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	%r9, %rax
	movq	%rbp, %r8
	imulq	%rbp, %rax
	leaq	(%rcx,%rax), %rcx
	leaq	(%rdx,%rax), %rdx
	addq	%r12, %rcx
	addq	%r12, %rdx
	cmpq	%rdx, %rcx
	jae	.LBB26_337
# %bb.333:                              # %vector.memcheck2598
                                        #   in Loop: Header=BB26_329 Depth=2
	movq	40(%rsp), %rcx          # 8-byte Reload
	leaq	(%rcx,%rax), %rcx
	addq	80(%rsp), %rax          # 8-byte Folded Reload
	addq	%r12, %rcx
	addq	%r12, %rax
	cmpq	%rcx, %rax
	jae	.LBB26_337
.LBB26_334:                             #   in Loop: Header=BB26_329 Depth=2
	movq	72(%rsp), %rax          # 8-byte Reload
	movq	%rbx, %rbp
	movq	%r15, %rcx
.LBB26_335:                             # %do.body27.i776.preheader2761
                                        #   in Loop: Header=BB26_329 Depth=2
	incq	%rax
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_336:                             # %do.body27.i776
                                        #   Parent Loop BB26_317 Depth=1
                                        #     Parent Loop BB26_329 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movzbl	(%rbp,%rsi), %ebx
	movzbl	(%rcx,%rsi), %edx
	decq	%rax
	movb	%dl, (%rbp,%rsi)
	movb	%bl, (%rcx,%rsi)
	incq	%rsi
	cmpq	$1, %rax
	jg	.LBB26_336
.LBB26_328:                             # %for.cond184.loopexit
                                        #   in Loop: Header=BB26_329 Depth=2
	movq	%r8, %rbp
	addq	%r9, %r14
	movq	%r15, %rbx
	incq	%rbp
	cmpq	%r13, %rbx
	ja	.LBB26_329
	jmp	.LBB26_316
.LBB26_340:                             # %for.cond184.us1141.preheader
                                        #   in Loop: Header=BB26_317 Depth=1
	movq	216(%rsp), %rax         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	128(%rsp), %rbx         # 8-byte Reload
	movq	%rcx, %r15
	xorl	%r14d, %r14d
	leaq	(%rax,%rcx), %rax
	movq	%rax, 40(%rsp)          # 8-byte Spill
	leaq	(%rdx,%rcx), %rax
	movq	%rax, 64(%rsp)          # 8-byte Spill
	cmpq	%r13, %rbx
	ja	.LBB26_342
	jmp	.LBB26_316
	.p2align	4, 0x90
.LBB26_349:                             # %vector.ph2513
                                        #   in Loop: Header=BB26_342 Depth=2
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	240(%rsp), %r10         # 8-byte Reload
	movl	%esi, %r8d
	andl	$7, %r8d
	subq	%r8, %rsi
	leaq	(%rbp,%rsi,8), %rax
	leaq	(%rbx,%rsi,8), %rcx
	subq	%rsi, %rdx
	movq	136(%rsp), %rsi         # 8-byte Reload
	leaq	(%rbx,%rsi), %rdi
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_350:                             # %vector.body2493
                                        #   Parent Loop BB26_317 Depth=1
                                        #     Parent Loop BB26_342 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovdqu	(%rbx,%rsi,8), %ymm0
	vmovups	32(%rbx,%rsi,8), %ymm1
	vmovups	-32(%rdi,%rsi,8), %ymm2
	vmovups	(%rdi,%rsi,8), %ymm3
	vmovups	%ymm2, (%rbx,%rsi,8)
	vmovups	%ymm3, 32(%rbx,%rsi,8)
	vmovdqu	%ymm0, -32(%rdi,%rsi,8)
	vmovups	%ymm1, (%rdi,%rsi,8)
	addq	$8, %rsi
	cmpq	%rsi, %r10
	jne	.LBB26_350
# %bb.351:                              # %middle.block2494
                                        #   in Loop: Header=BB26_342 Depth=2
	testq	%r8, %r8
	jne	.LBB26_347
	jmp	.LBB26_341
	.p2align	4, 0x90
.LBB26_342:                             # %land.rhs187.us1144
                                        #   Parent Loop BB26_317 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_350 Depth 3
                                        #       Child Loop BB26_348 Depth 3
	leaq	(%rbx,%r9), %rbp
	movq	%rbx, %rsi
	movq	%rbp, %rdi
	vzeroupper
	callq	*112(%rsp)              # 8-byte Folded Reload
	movq	(%rsp), %r9             # 8-byte Reload
	testl	%eax, %eax
	jle	.LBB26_316
# %bb.343:                              # %if.then.i749.us
                                        #   in Loop: Header=BB26_342 Depth=2
	cmpq	$8, 88(%rsp)            # 8-byte Folded Reload
	jb	.LBB26_346
# %bb.344:                              # %vector.memcheck2512
                                        #   in Loop: Header=BB26_342 Depth=2
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	%r9, %rax
	imulq	%r14, %rax
	leaq	(%r15,%rax), %rcx
	addq	%r12, %rcx
	leaq	(%rdx,%rax), %rdx
	addq	%r12, %rdx
	cmpq	%rdx, %rcx
	jae	.LBB26_349
# %bb.345:                              # %vector.memcheck2512
                                        #   in Loop: Header=BB26_342 Depth=2
	movq	40(%rsp), %rcx          # 8-byte Reload
	leaq	(%rcx,%rax), %rcx
	addq	80(%rsp), %rax          # 8-byte Folded Reload
	addq	%r12, %rcx
	addq	%r12, %rax
	cmpq	%rcx, %rax
	jae	.LBB26_349
.LBB26_346:                             #   in Loop: Header=BB26_342 Depth=2
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	%rbp, %rax
	movq	%rbx, %rcx
.LBB26_347:                             # %do.body.i757.us.preheader
                                        #   in Loop: Header=BB26_342 Depth=2
	incq	%rdx
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_348:                             # %do.body.i757.us
                                        #   Parent Loop BB26_317 Depth=1
                                        #     Parent Loop BB26_342 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	(%rcx,%rsi), %rdi
	movq	(%rax,%rsi), %rbx
	decq	%rdx
	movq	%rbx, (%rcx,%rsi)
	movq	%rdi, (%rax,%rsi)
	addq	$8, %rsi
	cmpq	$1, %rdx
	jg	.LBB26_348
.LBB26_341:                             # %for.cond184.us1141.loopexit
                                        #   in Loop: Header=BB26_342 Depth=2
	incq	%r14
	movq	%rbp, %rbx
	cmpq	%r13, %rbx
	ja	.LBB26_342
	jmp	.LBB26_316
.LBB26_352:                             # %for.cond184.us1148.preheader
                                        #   in Loop: Header=BB26_317 Depth=1
	movq	168(%rsp), %rax         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %r14         # 8-byte Reload
	xorl	%r15d, %r15d
	leaq	(%rax,%rcx), %rax
	movq	%rax, 40(%rsp)          # 8-byte Spill
	leaq	(%rdx,%rcx), %rax
	movq	%rax, 64(%rsp)          # 8-byte Spill
	cmpq	%r13, %rbx
	ja	.LBB26_354
	jmp	.LBB26_316
	.p2align	4, 0x90
.LBB26_361:                             # %vector.ph2556
                                        #   in Loop: Header=BB26_354 Depth=2
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	xorl	%edi, %edi
	movl	%edx, %r8d
	andl	$15, %r8d
	subq	%r8, %rdx
	subq	%rdx, %rax
	leaq	(%rbx,%rdx,4), %rcx
	leaq	(%rbp,%rdx,4), %rdx
	.p2align	4, 0x90
.LBB26_362:                             # %vector.body2538
                                        #   Parent Loop BB26_317 Depth=1
                                        #     Parent Loop BB26_354 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovdqu	(%rbx,%rdi,4), %ymm0
	vmovups	32(%rbx,%rdi,4), %ymm1
	vmovups	-32(%r14,%rdi,4), %ymm2
	vmovups	(%r14,%rdi,4), %ymm3
	vmovups	%ymm2, (%rbx,%rdi,4)
	vmovups	%ymm3, 32(%rbx,%rdi,4)
	vmovdqu	%ymm0, -32(%r14,%rdi,4)
	vmovups	%ymm1, (%r14,%rdi,4)
	addq	$16, %rdi
	cmpq	%rdi, %rsi
	jne	.LBB26_362
# %bb.363:                              # %middle.block2539
                                        #   in Loop: Header=BB26_354 Depth=2
	testq	%r8, %r8
	jne	.LBB26_359
	jmp	.LBB26_353
	.p2align	4, 0x90
.LBB26_354:                             # %land.rhs187.us1152
                                        #   Parent Loop BB26_317 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_362 Depth 3
                                        #       Child Loop BB26_360 Depth 3
	leaq	(%rbx,%r9), %rbp
	movq	%rbx, %rsi
	movq	%rbp, %rdi
	vzeroupper
	callq	*112(%rsp)              # 8-byte Folded Reload
	movq	(%rsp), %r9             # 8-byte Reload
	testl	%eax, %eax
	jle	.LBB26_316
# %bb.355:                              # %if.then6.i760.us1168
                                        #   in Loop: Header=BB26_354 Depth=2
	cmpq	$16, 144(%rsp)          # 8-byte Folded Reload
	jb	.LBB26_358
# %bb.356:                              # %vector.memcheck2555
                                        #   in Loop: Header=BB26_354 Depth=2
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	%r9, %rax
	imulq	%r15, %rax
	leaq	(%rcx,%rax), %rcx
	leaq	(%rdx,%rax), %rdx
	addq	%r12, %rcx
	addq	%r12, %rdx
	cmpq	%rdx, %rcx
	jae	.LBB26_361
# %bb.357:                              # %vector.memcheck2555
                                        #   in Loop: Header=BB26_354 Depth=2
	movq	40(%rsp), %rcx          # 8-byte Reload
	leaq	(%rcx,%rax), %rcx
	addq	80(%rsp), %rax          # 8-byte Folded Reload
	addq	%r12, %rcx
	addq	%r12, %rax
	cmpq	%rcx, %rax
	jae	.LBB26_361
.LBB26_358:                             #   in Loop: Header=BB26_354 Depth=2
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	%rbx, %rcx
	movq	%rbp, %rdx
.LBB26_359:                             # %do.body12.i768.us1169.preheader
                                        #   in Loop: Header=BB26_354 Depth=2
	incq	%rax
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB26_360:                             # %do.body12.i768.us1169
                                        #   Parent Loop BB26_317 Depth=1
                                        #     Parent Loop BB26_354 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	(%rcx,%rsi), %edi
	movl	(%rdx,%rsi), %ebx
	decq	%rax
	movl	%ebx, (%rcx,%rsi)
	movl	%edi, (%rdx,%rsi)
	addq	$4, %rsi
	cmpq	$1, %rax
	jg	.LBB26_360
.LBB26_353:                             # %for.cond184.us1148.loopexit
                                        #   in Loop: Header=BB26_354 Depth=2
	incq	%r15
	addq	%r9, %r14
	movq	%rbp, %rbx
	cmpq	%r13, %rbx
	ja	.LBB26_354
	.p2align	4, 0x90
.LBB26_316:                             # %for.inc222
                                        #   in Loop: Header=BB26_317 Depth=1
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	128(%rsp), %rbx         # 8-byte Reload
	incq	32(%rsp)                # 8-byte Folded Spill
	addq	%rax, 104(%rsp)         # 8-byte Folded Spill
	addq	%rax, %rbx
	cmpq	24(%rsp), %rbx          # 8-byte Folded Reload
	jb	.LBB26_317
.LBB26_364:                             # %cleanup
	addq	$280, %rsp              # imm = 0x118
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	vzeroupper
	retq
.Lfunc_end26:
	.size	spec_qsort, .Lfunc_end26-spec_qsort
	.cfi_endproc
                                        # -- End function
	.globl	write_circulations      # -- Begin function write_circulations
	.p2align	4, 0x90
	.type	write_circulations,@function
write_circulations:                     # @write_circulations
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	pushq	%rax
	.cfi_def_cfa_offset 64
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	xorl	%eax, %eax
	subq	440(%rsi), %rax
	movq	%rsi, %r15
	leaq	(%rax,%rax,8), %r12
	shlq	$3, %r12
	addq	576(%rsi), %r12
	movl	$.L.str.29, %esi
	callq	fopen
	movq	%rax, %rcx
	movq	$-1, %rax
	testq	%rcx, %rcx
	movq	%rcx, (%rsp)            # 8-byte Spill
	je	.LBB27_25
# %bb.1:                                # %if.end
	movq	552(%r15), %r8
	movq	560(%r15), %rax
	cmpq	%rax, %r8
	jae	.LBB27_4
# %bb.2:                                # %for.body.i.preheader
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%r8, %rcx
	.p2align	4, 0x90
.LBB27_3:                               # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	vmovups	%xmm0, 56(%rcx)
	addq	$104, %rcx
	cmpq	%rax, %rcx
	jb	.LBB27_3
.LBB27_4:                               # %for.end.i
	movq	424(%r15), %rdi
	testq	%rdi, %rdi
	jle	.LBB27_11
# %bb.5:                                # %for.body4.i.preheader
	movq	640(%r15), %r9
	movq	632(%r15), %rbx
	movq	568(%r15), %rsi
	movq	624(%r15), %r11
	movl	$1, %ecx
	movq	%r9, %r10
	leaq	-1(%r9), %r13
	movq	%rsi, %rax
	imulq	%rbx, %r10
	jmp	.LBB27_6
	.p2align	4, 0x90
.LBB27_10:                              # %for.body4.for.body4_crit_edge.i
                                        #   in Loop: Header=BB27_6 Depth=1
	addq	%rax, %rdx
	incq	%rcx
	leaq	(%rdx,%rdx,8), %rax
	leaq	(%rsi,%rax,8), %rax
.LBB27_6:                               # %for.body4.i
                                        # =>This Inner Loop Header: Depth=1
	movq	16(%rax), %rdx
	movq	56(%rdx), %rbp
	movq	%rbp, 40(%rax)
	movq	%rax, 56(%rdx)
	movq	24(%rax), %rdx
	movq	64(%rdx), %rbp
	movq	%rbp, 48(%rax)
	movq	%rax, 64(%rdx)
	movq	%rcx, %rax
	cqto
	idivq	%r11
	movq	%rdx, %r14
	subq	%rbx, %rdx
	jle	.LBB27_8
# %bb.7:                                # %if.then.i
                                        #   in Loop: Header=BB27_6 Depth=1
	imulq	%r13, %rdx
	addq	%r10, %rdx
	cmpq	%rcx, %rdi
	jne	.LBB27_10
	jmp	.LBB27_11
	.p2align	4, 0x90
.LBB27_8:                               # %if.else.i
                                        #   in Loop: Header=BB27_6 Depth=1
	imulq	%r9, %r14
	movq	%r14, %rdx
	cmpq	%rcx, %rdi
	jne	.LBB27_10
.LBB27_11:                              # %refresh_neighbour_lists.exit
	imulq	$104, 400(%r15), %rax
	movq	56(%r8,%rax), %r13
	testq	%r13, %r13
	jne	.LBB27_13
	jmp	.LBB27_24
	.p2align	4, 0x90
.LBB27_23:                              # %for.inc30
                                        #   in Loop: Header=BB27_13 Depth=1
	movq	40(%r13), %r13
	testq	%r13, %r13
	je	.LBB27_24
.LBB27_13:                              # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_15 Depth 2
                                        #       Child Loop BB27_19 Depth 3
	cmpq	$0, 56(%r13)
	je	.LBB27_23
# %bb.14:                               # %if.then2
                                        #   in Loop: Header=BB27_13 Depth=1
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	$.L.str.30, %edi
	movl	$3, %esi
	movl	$1, %edx
	callq	fwrite_unlocked
	movq	%r13, %rbx
.LBB27_15:                              # %while.body
                                        #   Parent Loop BB27_13 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_19 Depth 3
	cmpq	%r12, %rbx
	jb	.LBB27_17
# %bb.16:                               # %if.then6
                                        #   in Loop: Header=BB27_15 Depth=2
	movq	(%rsp), %rcx            # 8-byte Reload
	movl	$.L.str.31, %edi
	movl	$4, %esi
	movl	$1, %edx
	callq	fwrite_unlocked
.LBB27_17:                              # %if.end8
                                        #   in Loop: Header=BB27_15 Depth=2
	movq	24(%rbx), %rbx
	movq	(%rsp), %rdi            # 8-byte Reload
	xorl	%edx, %edx
	movl	$.L.str.32, %esi
	xorl	%eax, %eax
	subl	96(%rbx), %edx
	callq	fprintf
	imulq	$104, 408(%r15), %rax
	movq	56(%rbx,%rax), %rax
	testq	%rax, %rax
	jne	.LBB27_19
	jmp	.LBB27_21
	.p2align	4, 0x90
.LBB27_20:                              # %for.inc
                                        #   in Loop: Header=BB27_19 Depth=3
	movq	40(%rax), %rax
	testq	%rax, %rax
	je	.LBB27_21
.LBB27_19:                              # %for.body15
                                        #   Parent Loop BB27_13 Depth=1
                                        #     Parent Loop BB27_15 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpq	$0, 56(%rax)
	je	.LBB27_20
# %bb.22:                               # %if.end23
                                        #   in Loop: Header=BB27_15 Depth=2
	movq	24(%rax), %rcx
	movl	$0, %ebx
	cmpl	$0, 96(%rcx)
	cmovneq	%rax, %rbx
	testq	%rbx, %rbx
	jne	.LBB27_15
	jmp	.LBB27_23
.LBB27_21:                              # %if.then21
	movq	(%rsp), %rdi            # 8-byte Reload
	callq	fclose
	movq	$-1, %rax
	jmp	.LBB27_25
.LBB27_24:                              # %for.end32
	movq	(%rsp), %rdi            # 8-byte Reload
	callq	fclose
	xorl	%eax, %eax
.LBB27_25:                              # %cleanup
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end27:
	.size	write_circulations, .Lfunc_end27-write_circulations
	.cfi_endproc
                                        # -- End function
	.globl	update_tree             # -- Begin function update_tree
	.p2align	4, 0x90
	.type	update_tree,@function
update_tree:                            # @update_tree
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	80(%rsp), %r12
	movq	88(%rsp), %r14
	movq	56(%rsp), %r11
	movq	16(%r12), %rax
	testq	%r14, %r14
	jns	.LBB28_2
# %bb.1:                                # %entry
	cmpq	%r9, %rax
	je	.LBB28_4
.LBB28_2:                               # %lor.lhs.false
	testq	%r14, %r14
	jle	.LBB28_5
# %bb.3:                                # %lor.lhs.false
	cmpq	%r8, %rax
	jne	.LBB28_5
.LBB28_4:                               # %if.then
	movq	%r14, %rbp
	movq	%r14, %r15
	negq	%rbp
	jmp	.LBB28_6
.LBB28_5:                               # %if.else
	movq	%r14, %r15
	movq	%r14, %rbp
	negq	%r15
.LBB28_6:                               # %if.end
	movq	64(%rsp), %rax
	testq	%r14, %r14
	cmovsq	%rbp, %r15
	movq	%r11, %rbp
	addq	%r15, (%r11)
	jmp	.LBB28_7
	.p2align	4, 0x90
.LBB28_31:                              # %ITERATION
                                        #   in Loop: Header=BB28_7 Depth=1
	addq	%r15, (%rbx)
	movq	%rbx, %rbp
.LBB28_7:                               # %RECURSION
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_8 Depth 2
	movq	16(%rbp), %rbx
	testq	%rbx, %rbx
	jne	.LBB28_31
	jmp	.LBB28_8
	.p2align	4, 0x90
.LBB28_10:                              # %if.end23
                                        #   in Loop: Header=BB28_8 Depth=2
	movq	24(%rbp), %rbp
.LBB28_8:                               # %TEST.preheader
                                        #   Parent Loop BB28_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	%r11, %rbp
	je	.LBB28_11
# %bb.9:                                # %if.end20
                                        #   in Loop: Header=BB28_8 Depth=2
	movq	32(%rbp), %rbx
	testq	%rbx, %rbx
	je	.LBB28_10
	jmp	.LBB28_31
.LBB28_11:                              # %CONTINUE
	movq	88(%r11), %r11
	cmpq	%rax, %r8
	movq	%rdi, -16(%rsp)         # 8-byte Spill
	je	.LBB28_18
# %bb.12:                               # %while.body.lr.ph
	movq	%rdx, %rdi
	movq	%r11, %r13
	movq	%r9, %r15
	negq	%rdi
	movq	%rdi, -8(%rsp)          # 8-byte Spill
	.p2align	4, 0x90
.LBB28_13:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%r8, %rbx
	movq	24(%r8), %r8
	movq	32(%rbx), %r14
	testq	%r14, %r14
	je	.LBB28_15
# %bb.14:                               # %if.then28
                                        #   in Loop: Header=BB28_13 Depth=1
	movq	40(%rbx), %rbp
	movq	%rbp, 40(%r14)
.LBB28_15:                              # %if.end31
                                        #   in Loop: Header=BB28_13 Depth=1
	movq	40(%rbx), %rbp
	leaq	16(%r8), %r10
	movq	-16(%rsp), %rdi         # 8-byte Reload
	testq	%rbp, %rbp
	leaq	32(%rbp), %rbp
	cmoveq	%r10, %rbp
	movq	%r14, (%rbp)
	movq	%r15, 24(%rbx)
	movq	16(%r15), %rbp
	testq	%rbp, %rbp
	movq	%rbp, 32(%rbx)
	je	.LBB28_17
# %bb.16:                               # %if.then47
                                        #   in Loop: Header=BB28_13 Depth=1
	movq	%rbx, 40(%rbp)
.LBB28_17:                              # %if.end50
                                        #   in Loop: Header=BB28_13 Depth=1
	movq	%rbx, 16(%r15)
	movq	$0, 40(%rbx)
	movq	-8(%rsp), %r14          # 8-byte Reload
	xorl	%ebp, %ebp
	movq	%rbx, %r15
	cmpl	$0, 8(%rbx)
	movq	48(%rbx), %r10
	sete	%bpl
	cmpq	%rdi, %rbp
	cmoveq	%rdx, %r14
	addq	80(%rbx), %r14
	movl	%esi, 8(%rbx)
	movq	%rcx, 80(%rbx)
	movq	%r12, 48(%rbx)
	movq	%r11, %rcx
	movq	%rbp, %rsi
	subq	88(%rbx), %rcx
	movq	%r13, 88(%rbx)
	movq	%r10, %r12
	cmpq	%rax, %r8
	movq	%rcx, %r13
	movq	%r14, %rcx
	jne	.LBB28_13
.LBB28_18:                              # %while.end
	cmpq	96(%rsp), %rdx
	jle	.LBB28_19
# %bb.25:                               # %for.cond.preheader
	movq	72(%rsp), %rbp
	movq	-16(%rsp), %rdi         # 8-byte Reload
	cmpq	%rbp, %rax
	je	.LBB28_28
# %bb.26:                               # %for.body.lr.ph
	movq	%rdx, %rcx
	negq	%rcx
	.p2align	4, 0x90
.LBB28_27:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	subq	%r11, 88(%rax)
	movq	%rdx, %r8
	movslq	8(%rax), %rsi
	cmpq	%rdi, %rsi
	cmoveq	%rcx, %r8
	addq	%r8, 80(%rax)
	movq	24(%rax), %rax
	cmpq	%rbp, %rax
	jne	.LBB28_27
.LBB28_28:                              # %for.cond89.preheader
	cmpq	%rbp, %r9
	je	.LBB28_24
# %bb.29:                               # %for.body92.lr.ph
	movq	%rdx, %rax
	negq	%rax
	.p2align	4, 0x90
.LBB28_30:                              # %for.body92
                                        # =>This Inner Loop Header: Depth=1
	addq	%r11, 88(%r9)
	movq	%rax, %rsi
	movslq	8(%r9), %rcx
	cmpq	%rdi, %rcx
	cmoveq	%rdx, %rsi
	addq	%rsi, 80(%r9)
	movq	24(%r9), %r9
	cmpq	%rbp, %r9
	jne	.LBB28_30
	jmp	.LBB28_24
.LBB28_19:                              # %for.cond110.preheader
	movq	72(%rsp), %rcx
	cmpq	%rcx, %rax
	je	.LBB28_23
	.p2align	4, 0x90
.LBB28_21:                              # %for.body113
                                        # =>This Inner Loop Header: Depth=1
	subq	%r11, 88(%rax)
	movq	24(%rax), %rax
	cmpq	%rcx, %rax
	jne	.LBB28_21
	jmp	.LBB28_23
	.p2align	4, 0x90
.LBB28_22:                              # %for.body122
                                        #   in Loop: Header=BB28_23 Depth=1
	addq	%r11, 88(%r9)
	movq	24(%r9), %r9
.LBB28_23:                              # %for.body122
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%rcx, %r9
	jne	.LBB28_22
.LBB28_24:                              # %if.end128
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	retq
.Lfunc_end28:
	.size	update_tree, .Lfunc_end28-update_tree
	.cfi_endproc
                                        # -- End function
	.globl	primal_iminus           # -- Begin function primal_iminus
	.p2align	4, 0x90
	.type	primal_iminus,@function
primal_iminus:                          # @primal_iminus
	.cfi_startproc
# %bb.0:                                # %entry
	xorl	%eax, %eax
	cmpq	%rcx, %rdx
	je	.LBB29_18
# %bb.1:                                # %while.body.preheader
	movq	%rdx, %r9
	movq	%rcx, %rdx
	.p2align	4, 0x90
.LBB29_2:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	88(%r9), %rcx
	cmpq	88(%rdx), %rcx
	jge	.LBB29_10
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB29_2 Depth=1
	cmpl	$0, 8(%r9)
	je	.LBB29_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB29_2 Depth=1
	movq	80(%r9), %rcx
	cmpq	%rcx, (%rdi)
	jg	.LBB29_8
	jmp	.LBB29_9
	.p2align	4, 0x90
.LBB29_10:                              # %if.else19
                                        #   in Loop: Header=BB29_2 Depth=1
	cmpl	$0, 8(%rdx)
	je	.LBB29_11
# %bb.12:                               # %if.else28
                                        #   in Loop: Header=BB29_2 Depth=1
	movq	24(%rdx), %rcx
	cmpq	$0, 24(%rcx)
	je	.LBB29_16
# %bb.13:                               # %if.then32
                                        #   in Loop: Header=BB29_2 Depth=1
	movl	$1, %ecx
	subq	80(%rdx), %rcx
	cmpq	%rcx, (%rdi)
	jl	.LBB29_16
.LBB29_15:                              # %if.then36
                                        #   in Loop: Header=BB29_2 Depth=1
	movq	%rdx, %rax
	movq	%rcx, (%rdi)
	movq	$1, (%rsi)
.LBB29_16:                              # %if.end41
                                        #   in Loop: Header=BB29_2 Depth=1
	movq	24(%rdx), %rdx
	cmpq	%rdx, %r9
	jne	.LBB29_2
	jmp	.LBB29_18
.LBB29_5:                               # %if.else
                                        #   in Loop: Header=BB29_2 Depth=1
	movq	24(%r9), %rcx
	cmpq	$0, 24(%rcx)
	je	.LBB29_9
# %bb.6:                                # %if.then9
                                        #   in Loop: Header=BB29_2 Depth=1
	movl	$1, %ecx
	subq	80(%r9), %rcx
	cmpq	%rcx, (%rdi)
	jle	.LBB29_9
.LBB29_8:                               # %if.then12
                                        #   in Loop: Header=BB29_2 Depth=1
	movq	%r9, %rax
	movq	%rcx, (%rdi)
	movq	$0, (%rsi)
.LBB29_9:                               # %if.end17
                                        #   in Loop: Header=BB29_2 Depth=1
	movq	24(%r9), %r9
	cmpq	%rdx, %r9
	jne	.LBB29_2
	jmp	.LBB29_18
.LBB29_11:                              # %if.then22
                                        #   in Loop: Header=BB29_2 Depth=1
	movq	80(%rdx), %rcx
	cmpq	%rcx, (%rdi)
	jge	.LBB29_15
	jmp	.LBB29_16
.LBB29_18:                              # %while.end
	movq	%rdx, (%r8)
	retq
.Lfunc_end29:
	.size	primal_iminus, .Lfunc_end29-primal_iminus
	.cfi_endproc
                                        # -- End function
	.globl	primal_update_flow      # -- Begin function primal_update_flow
	.p2align	4, 0x90
	.type	primal_update_flow,@function
primal_update_flow:                     # @primal_update_flow
	.cfi_startproc
# %bb.0:                                # %entry
	cmpq	%rdx, %rdi
	je	.LBB30_4
	.p2align	4, 0x90
.LBB30_2:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$0, 8(%rdi)
	sete	%al
	movq	%rax, 80(%rdi)
	movq	24(%rdi), %rdi
	cmpq	%rdx, %rdi
	jne	.LBB30_2
	jmp	.LBB30_4
	.p2align	4, 0x90
.LBB30_3:                               # %for.body4
                                        #   in Loop: Header=BB30_4 Depth=1
	xorl	%eax, %eax
	cmpl	$0, 8(%rsi)
	setne	%al
	movq	%rax, 80(%rsi)
	movq	24(%rsi), %rsi
.LBB30_4:                               # %for.body4
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%rdx, %rsi
	jne	.LBB30_3
# %bb.5:                                # %for.end14
	retq
.Lfunc_end30:
	.size	primal_update_flow, .Lfunc_end30-primal_update_flow
	.cfi_endproc
                                        # -- End function
	.globl	markBaskets             # -- Begin function markBaskets
	.p2align	4, 0x90
	.type	markBaskets,@function
markBaskets:                            # @markBaskets
	.cfi_startproc
# %bb.0:                                # %entry
	movq	perm_p(%rip), %r10
	cmpq	$1, %rdi
	jle	.LBB31_1
# %bb.5:                                # %for.body.us.preheader
	movl	$1, %r8d
	xorl	%r9d, %r9d
	.p2align	4, 0x90
.LBB31_6:                               # %for.body.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_7 Depth 2
	movq	(%r10), %rcx
	movl	$0, %esi
	movq	(%rcx), %rcx
	movq	24(%rcx), %rdx
	testq	%rdx, %rdx
	cmovnsq	%rsi, %r9
	sarq	$63, %rdx
	andnq	%rcx, %rdx, %rcx
	movl	$1, %edx
	.p2align	4, 0x90
.LBB31_7:                               # %for.body5.us
                                        #   Parent Loop BB31_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%r10,%rdx,8), %rsi
	movq	(%rsi), %rsi
	cmpq	$0, 24(%rsi)
	js	.LBB31_13
# %bb.8:                                # %if.then9.us
                                        #   in Loop: Header=BB31_7 Depth=2
	testq	%rcx, %rcx
	je	.LBB31_12
# %bb.9:                                # %lor.lhs.false.us
                                        #   in Loop: Header=BB31_7 Depth=2
	movq	16(%rcx), %rax
	cmpq	%rax, 16(%rsi)
	jl	.LBB31_13
# %bb.10:                               # %if.end.i.us
                                        #   in Loop: Header=BB31_7 Depth=2
	jg	.LBB31_12
# %bb.11:                               # %if.end6.i.us
                                        #   in Loop: Header=BB31_7 Depth=2
	movq	(%rsi), %rax
	movl	(%rax), %r11d
	movq	(%rcx), %rax
	cmpl	(%rax), %r11d
	jg	.LBB31_13
	.p2align	4, 0x90
.LBB31_12:                              # %cost_compare.exit.thread.us
                                        #   in Loop: Header=BB31_7 Depth=2
	movq	%rsi, %rcx
	movq	%rdx, %r9
.LBB31_13:                              # %for.inc.us
                                        #   in Loop: Header=BB31_7 Depth=2
	incq	%rdx
	cmpq	%rdx, %rdi
	jne	.LBB31_7
# %bb.14:                               # %for.cond3.for.end_crit_edge.us
                                        #   in Loop: Header=BB31_6 Depth=1
	testq	%rcx, %rcx
	je	.LBB31_16
# %bb.15:                               # %if.end16.us
                                        #   in Loop: Header=BB31_6 Depth=1
	movq	%r8, 24(%rcx)
	addq	$8, (%r10,%r9,8)
	cmpq	$60, %r8
	leaq	1(%r8), %r8
	jb	.LBB31_6
	jmp	.LBB31_16
.LBB31_1:                               # %for.body.preheader
	xorl	%ecx, %ecx
	.p2align	4, 0x90
.LBB31_2:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r10), %rax
	movq	(%rax), %rdx
	testq	%rdx, %rdx
	je	.LBB31_16
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB31_2 Depth=1
	movq	24(%rdx), %rax
	testq	%rax, %rax
	js	.LBB31_16
# %bb.4:                                # %if.end16
                                        #   in Loop: Header=BB31_2 Depth=1
	incq	%rcx
	movq	%rcx, 24(%rdx)
	addq	$8, (%r10)
	cmpq	$60, %rcx
	jb	.LBB31_2
.LBB31_16:                              # %cleanup
	retq
.Lfunc_end31:
	.size	markBaskets, .Lfunc_end31-markBaskets
	.cfi_endproc
                                        # -- End function
	.globl	cost_compare            # -- Begin function cost_compare
	.p2align	4, 0x90
	.type	cost_compare,@function
cost_compare:                           # @cost_compare
	.cfi_startproc
# %bb.0:                                # %entry
	movq	(%rsi), %rcx
	movq	(%rdi), %rdx
	movl	$1, %eax
	movq	16(%rcx), %rsi
	cmpq	%rsi, 16(%rdx)
	jl	.LBB32_3
# %bb.1:                                # %if.end
	movl	$-1, %eax
	jg	.LBB32_3
# %bb.2:                                # %if.end6
	movq	(%rdx), %rax
	movq	(%rcx), %rcx
	xorl	%edx, %edx
	movl	(%rax), %eax
	cmpl	(%rcx), %eax
	setg	%dl
	leal	-1(%rdx,%rdx), %eax
.LBB32_3:                               # %return
	retq
.Lfunc_end32:
	.size	cost_compare, .Lfunc_end32-cost_compare
	.cfi_endproc
                                        # -- End function
	.globl	worker                  # -- Begin function worker
	.p2align	4, 0x90
	.type	worker,@function
worker:                                 # @worker
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$32536, %rsp            # imm = 0x7F18
	.cfi_def_cfa_offset 32592
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	568(%rdi), %rax
	movq	basket_sizes(%rip), %rcx
	movl	%edx, %ebp
	movslq	%esi, %r14
	xorl	%edx, %edx
	movq	%rdi, 32(%rsp)          # 8-byte Spill
	movl	%ebp, 12(%rsp)          # 4-byte Spill
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	576(%rdi), %rax
	movq	$0, (%rcx,%r14,8)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movl	$4000, %eax             # imm = 0xFA0
	idivl	%ebp
                                        # kill: def $eax killed $eax def $rax
	cmpl	$-59, %eax
	jl	.LBB33_8
# %bb.1:                                # %for.body.lr.ph
	leal	61(%rax), %edx
	addl	$261, %eax              # imm = 0x105
	movl	$2, %r9d
	imull	%esi, %eax
	movslq	%edx, %r10
	movl	$1, %esi
	incl	%eax
	cmpq	$1, %r10
	movslq	%eax, %rdi
	movq	basket(%rip), %rax
	cmovgq	%r10, %r9
	decq	%r9
	cmpq	$15, %r9
	ja	.LBB33_5
# %bb.2:
	movq	%rdi, %r8
	jmp	.LBB33_3
.LBB33_5:                               # %vector.ph
	movq	%r9, %r11
	xorl	%edx, %edx
	andq	$-16, %r11
	leaq	(%r11,%rdi), %r8
	shlq	$5, %rdi
	leaq	1(%r11), %rsi
	addq	%rax, %rdi
	.p2align	4, 0x90
.LBB33_6:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	64(%rdi), %r15
	leaq	96(%rdi), %rbx
	leaq	32(%rdi), %rbp
	movq	%rdi, %r12
	vmovq	%rbx, %xmm0
	vmovq	%r15, %xmm1
	vmovq	%rbp, %xmm2
	leaq	192(%rdi), %r15
	leaq	224(%rdi), %rbx
	subq	$-128, %r12
	leaq	160(%rdi), %rbp
	vmovq	%r12, %xmm3
	leaq	320(%rdi), %r12
	vpunpcklqdq	%xmm0, %xmm1, %xmm0 # xmm0 = xmm1[0],xmm0[0]
	vmovq	%rdi, %xmm1
	vpunpcklqdq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0]
	vmovq	%r15, %xmm2
	leaq	288(%rdi), %r15
	vinserti128	$1, %xmm0, %ymm1, %ymm0
	vmovq	%rbx, %xmm1
	leaq	352(%rdi), %rbx
	vmovdqu	%ymm0, 56(%rsp,%rdx,8)
	vpunpcklqdq	%xmm1, %xmm2, %xmm1 # xmm1 = xmm2[0],xmm1[0]
	vmovq	%rbp, %xmm2
	leaq	256(%rdi), %rbp
	vmovq	%rbp, %xmm4
	leaq	384(%rdi), %rbp
	vmovq	%rbp, %xmm5
	vpunpcklqdq	%xmm2, %xmm3, %xmm2 # xmm2 = xmm3[0],xmm2[0]
	vmovq	%r12, %xmm3
	leaq	448(%rdi), %r12
	vinserti128	$1, %xmm1, %ymm2, %ymm1
	vmovq	%rbx, %xmm2
	leaq	480(%rdi), %rbx
	vmovdqu	%ymm1, 88(%rsp,%rdx,8)
	vpunpcklqdq	%xmm2, %xmm3, %xmm2 # xmm2 = xmm3[0],xmm2[0]
	vmovq	%r15, %xmm3
	leaq	416(%rdi), %r15
	addq	$512, %rdi              # imm = 0x200
	vpunpcklqdq	%xmm3, %xmm4, %xmm3 # xmm3 = xmm4[0],xmm3[0]
	vmovq	%r12, %xmm4
	vinserti128	$1, %xmm2, %ymm3, %ymm2
	vmovq	%rbx, %xmm3
	vmovdqu	%ymm2, 120(%rsp,%rdx,8)
	vpunpcklqdq	%xmm3, %xmm4, %xmm3 # xmm3 = xmm4[0],xmm3[0]
	vmovq	%r15, %xmm4
	vpunpcklqdq	%xmm4, %xmm5, %xmm4 # xmm4 = xmm5[0],xmm4[0]
	vinserti128	$1, %xmm3, %ymm4, %ymm3
	vmovdqu	%ymm3, 152(%rsp,%rdx,8)
	addq	$16, %rdx
	cmpq	%rdx, %r11
	jne	.LBB33_6
# %bb.7:                                # %middle.block
	cmpq	%r11, %r9
	je	.LBB33_8
.LBB33_3:                               # %for.body.preheader
	shlq	$5, %r8
	addq	%r8, %rax
	.p2align	4, 0x90
.LBB33_4:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, 48(%rsp,%rsi,8)
	incq	%rsi
	addq	$32, %rax
	cmpq	%r10, %rsi
	jl	.LBB33_4
.LBB33_8:                               # %while.cond.preheader
	cmpb	$0, opt(%rip)
	jne	.LBB33_71
# %bb.9:                                # %while.body.lr.ph
	movslq	12(%rsp), %r15          # 4-byte Folded Reload
	movq	16(%rsp), %r10          # 8-byte Reload
	movq	%r15, %rax
	andq	$-16, %rax
	movq	%rax, 40(%rsp)          # 8-byte Spill
	leaq	(,%r15,8), %rax
	leaq	(%rax,%rax,8), %r12
	jmp	.LBB33_10
	.p2align	4, 0x90
.LBB33_70:                              # %if.end.while.body_crit_edge
                                        #   in Loop: Header=BB33_10 Depth=1
	movq	basket_sizes(%rip), %rcx
	movq	%r13, %r10
.LBB33_10:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_11 Depth 2
                                        #     Child Loop BB33_38 Depth 2
                                        #       Child Loop BB33_40 Depth 3
                                        #     Child Loop BB33_21 Depth 2
                                        #       Child Loop BB33_31 Depth 3
                                        #       Child Loop BB33_27 Depth 3
                                        #       Child Loop BB33_29 Depth 3
                                        #     Child Loop BB33_55 Depth 2
                                        #     Child Loop BB33_59 Depth 2
                                        #       Child Loop BB33_60 Depth 3
	movq	32(%rsp), %rsi          # 8-byte Reload
	movl	$1, %edi
	xorl	%r9d, %r9d
	movq	608(%rsi), %rax
	addq	%r14, %rax
	cqto
	idivq	%r15
	movq	640(%rsi), %r8
	jmp	.LBB33_11
	.p2align	4, 0x90
.LBB33_14:                              # %land.lhs.true7.i
                                        #   in Loop: Header=BB33_11 Depth=2
	cmpw	$1, 32(%rbx)
	je	.LBB33_17
	jmp	.LBB33_18
	.p2align	4, 0x90
.LBB33_11:                              # %land.rhs.i
                                        #   Parent Loop BB33_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	(%rcx,%r14,8), %rdi
	jg	.LBB33_19
# %bb.12:                               # %for.body.i
                                        #   in Loop: Header=BB33_11 Depth=2
	movq	48(%rsp,%rdi,8), %rax
	cmpq	$0, 24(%rax)
	jle	.LBB33_18
# %bb.13:                               # %land.lhs.true.i
                                        #   in Loop: Header=BB33_11 Depth=2
	movq	(%rax), %rbx
	movq	16(%rbx), %rsi
	movq	24(%rbx), %r11
	movq	8(%rbx), %rax
	subq	(%rsi), %rax
	addq	(%r11), %rax
	testq	%rax, %rax
	js	.LBB33_14
# %bb.15:                               # %lor.lhs.false.i
                                        #   in Loop: Header=BB33_11 Depth=2
	je	.LBB33_18
# %bb.16:                               # %land.lhs.true12.i
                                        #   in Loop: Header=BB33_11 Depth=2
	cmpw	$2, 32(%rbx)
	jne	.LBB33_18
.LBB33_17:                              # %if.then.i
                                        #   in Loop: Header=BB33_11 Depth=2
	movq	56(%rsp,%r9,8), %rsi
	movq	%rax, %r11
	negq	%r11
	cmovlq	%rax, %r11
	movq	%rbx, (%rsi)
	movq	56(%rsp,%r9,8), %rsi
	incq	%r9
	movq	%rax, 8(%rsi)
	movq	%r11, 16(%rsi)
	movq	$0, 24(%rsi)
.LBB33_18:                              # %for.inc.i
                                        #   in Loop: Header=BB33_11 Depth=2
	cmpq	$60, %rdi
	leaq	1(%rdi), %rdi
	jb	.LBB33_11
.LBB33_19:                              # %for.end.i
                                        #   in Loop: Header=BB33_10 Depth=1
	movq	%r9, (%rcx,%r14,8)
	cmpl	$0, 12(%rsp)            # 4-byte Folded Reload
	movq	%r10, %rsi
	movq	full_group_end_arc(%rip), %r9
	jle	.LBB33_38
# %bb.20:                               # %NEXT.us.i.preheader
                                        #   in Loop: Header=BB33_10 Depth=1
	movq	%r10, %r13
	.p2align	4, 0x90
.LBB33_21:                              # %NEXT.us.i
                                        #   Parent Loop BB33_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_31 Depth 3
                                        #       Child Loop BB33_27 Depth 3
                                        #       Child Loop BB33_29 Depth 3
	leaq	(%rdx,%rdx,8), %rax
	leaq	(%r8,%r8,8), %rsi
	cmpq	%r9, %r13
	leaq	(%r13,%rax,8), %rax
	leaq	(%r13,%rsi,8), %rdi
	leaq	-72(%r13,%rsi,8), %r13
	cmovbq	%rdi, %r13
	cmpq	%r13, %rax
	jb	.LBB33_31
	jmp	.LBB33_23
	.p2align	4, 0x90
.LBB33_37:                              # %for.inc82.us.i
                                        #   in Loop: Header=BB33_31 Depth=3
	addq	%r12, %rax
	cmpq	%r13, %rax
	jae	.LBB33_23
.LBB33_31:                              # %for.body40.us.i
                                        #   Parent Loop BB33_10 Depth=1
                                        #     Parent Loop BB33_21 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movzwl	32(%rax), %edi
	testw	%di, %di
	jle	.LBB33_37
# %bb.32:                               # %if.then45.us.i
                                        #   in Loop: Header=BB33_31 Depth=3
	movq	16(%rax), %rbx
	movq	24(%rax), %r11
	movq	8(%rax), %rsi
	subq	(%rbx), %rsi
	addq	(%r11), %rsi
	js	.LBB33_35
# %bb.33:                               # %lor.rhs.i.us.i
                                        #   in Loop: Header=BB33_31 Depth=3
	cmpw	$2, %di
	jne	.LBB33_37
# %bb.34:                               # %lor.rhs.i.us.i
                                        #   in Loop: Header=BB33_31 Depth=3
	testq	%rsi, %rsi
	jne	.LBB33_36
	jmp	.LBB33_37
	.p2align	4, 0x90
.LBB33_35:                              # %land.lhs.true.i.us.i
                                        #   in Loop: Header=BB33_31 Depth=3
	cmpw	$1, %di
	jne	.LBB33_37
.LBB33_36:                              # %if.then53.us.i
                                        #   in Loop: Header=BB33_31 Depth=3
	movq	(%rcx,%r14,8), %rbx
	movq	%rsi, %rdi
	negq	%rdi
	cmovlq	%rsi, %rdi
	leaq	1(%rbx), %rbp
	movq	%rbp, (%rcx,%r14,8)
	movq	56(%rsp,%rbx,8), %rbp
	movq	%rax, (%rbp)
	movq	56(%rsp,%rbx,8), %rbp
	movq	%rsi, 8(%rbp)
	movq	(%rcx,%r14,8), %rsi
	movq	48(%rsp,%rsi,8), %rsi
	movq	%rdi, 16(%rsi)
	movq	(%rcx,%r14,8), %rsi
	movq	48(%rsp,%rsi,8), %rsi
	movq	$0, 24(%rsi)
	jmp	.LBB33_37
	.p2align	4, 0x90
.LBB33_23:                              # %for.end84.us.i
                                        #   in Loop: Header=BB33_21 Depth=2
	cmpq	24(%rsp), %r13          # 8-byte Folded Reload
	cmovaeq	16(%rsp), %r13          # 8-byte Folded Reload
	cmpq	%r10, %r13
	je	.LBB33_49
# %bb.24:                               # %for.body95.us.i.preheader
                                        #   in Loop: Header=BB33_21 Depth=2
	cmpl	$16, 12(%rsp)           # 4-byte Folded Reload
	jae	.LBB33_26
# %bb.25:                               #   in Loop: Header=BB33_21 Depth=2
	xorl	%eax, %eax
	xorl	%esi, %esi
	jmp	.LBB33_29
	.p2align	4, 0x90
.LBB33_26:                              # %vector.body88.preheader
                                        #   in Loop: Header=BB33_21 Depth=2
	movq	40(%rsp), %rdi          # 8-byte Reload
	vpxor	%xmm0, %xmm0, %xmm0
	xorl	%eax, %eax
	vpxor	%xmm1, %xmm1, %xmm1
	vpxor	%xmm2, %xmm2, %xmm2
	vpxor	%xmm3, %xmm3, %xmm3
	.p2align	4, 0x90
.LBB33_27:                              # %vector.body88
                                        #   Parent Loop BB33_10 Depth=1
                                        #     Parent Loop BB33_21 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vpaddq	(%rcx,%rax,8), %ymm0, %ymm0
	vpaddq	32(%rcx,%rax,8), %ymm1, %ymm1
	vpaddq	64(%rcx,%rax,8), %ymm2, %ymm2
	vpaddq	96(%rcx,%rax,8), %ymm3, %ymm3
	addq	$16, %rax
	cmpq	%rax, %rdi
	jne	.LBB33_27
# %bb.28:                               # %middle.block89
                                        #   in Loop: Header=BB33_21 Depth=2
	vpaddq	%ymm0, %ymm1, %ymm0
	movq	%rdi, %rsi
	cmpq	%r15, %rdi
	vpaddq	%ymm0, %ymm2, %ymm0
	vpaddq	%ymm0, %ymm3, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpaddq	%ymm1, %ymm0, %ymm0
	vpshufd	$78, %xmm0, %xmm1       # xmm1 = xmm0[2,3,0,1]
	vpaddq	%xmm1, %xmm0, %xmm0
	vmovq	%xmm0, %rax
	je	.LBB33_30
	.p2align	4, 0x90
.LBB33_29:                              # %for.body95.us.i
                                        #   Parent Loop BB33_10 Depth=1
                                        #     Parent Loop BB33_21 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	addq	(%rcx,%rsi,8), %rax
	incq	%rsi
	cmpq	%rsi, %r15
	jne	.LBB33_29
.LBB33_30:                              # %for.cond92.for.end100_crit_edge.us.i
                                        #   in Loop: Header=BB33_21 Depth=2
	cmpq	$59, %rax
	jle	.LBB33_21
	jmp	.LBB33_49
	.p2align	4, 0x90
.LBB33_38:                              # %NEXT.i
                                        #   Parent Loop BB33_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_40 Depth 3
	leaq	(%rdx,%rdx,8), %rax
	leaq	(%r8,%r8,8), %rdi
	cmpq	%r9, %rsi
	leaq	(%rsi,%rax,8), %rax
	leaq	(%rsi,%rdi,8), %rbp
	leaq	-72(%rsi,%rdi,8), %rsi
	cmovbq	%rbp, %rsi
	cmpq	%rsi, %rax
	jb	.LBB33_40
	jmp	.LBB33_47
	.p2align	4, 0x90
.LBB33_46:                              # %for.inc82.i
                                        #   in Loop: Header=BB33_40 Depth=3
	addq	%r12, %rax
	cmpq	%rsi, %rax
	jae	.LBB33_47
.LBB33_40:                              # %for.body40.i
                                        #   Parent Loop BB33_10 Depth=1
                                        #     Parent Loop BB33_38 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movzwl	32(%rax), %ebx
	testw	%bx, %bx
	jle	.LBB33_46
# %bb.41:                               # %if.then45.i
                                        #   in Loop: Header=BB33_40 Depth=3
	movq	16(%rax), %rbp
	movq	24(%rax), %r11
	movq	8(%rax), %rdi
	subq	(%rbp), %rdi
	addq	(%r11), %rdi
	js	.LBB33_42
# %bb.43:                               # %lor.rhs.i.i
                                        #   in Loop: Header=BB33_40 Depth=3
	cmpw	$2, %bx
	jne	.LBB33_46
# %bb.44:                               # %lor.rhs.i.i
                                        #   in Loop: Header=BB33_40 Depth=3
	testq	%rdi, %rdi
	jne	.LBB33_45
	jmp	.LBB33_46
	.p2align	4, 0x90
.LBB33_42:                              # %land.lhs.true.i.i
                                        #   in Loop: Header=BB33_40 Depth=3
	cmpw	$1, %bx
	jne	.LBB33_46
.LBB33_45:                              # %if.then53.i
                                        #   in Loop: Header=BB33_40 Depth=3
	movq	(%rcx,%r14,8), %r11
	movq	%rdi, %rbp
	negq	%rbp
	cmovlq	%rdi, %rbp
	leaq	1(%r11), %rbx
	movq	%rbx, (%rcx,%r14,8)
	movq	56(%rsp,%r11,8), %rbx
	movq	%rax, (%rbx)
	movq	56(%rsp,%r11,8), %rbx
	movq	%rdi, 8(%rbx)
	movq	(%rcx,%r14,8), %rdi
	movq	48(%rsp,%rdi,8), %rdi
	movq	%rbp, 16(%rdi)
	movq	(%rcx,%r14,8), %rdi
	movq	48(%rsp,%rdi,8), %rdi
	movq	$0, 24(%rdi)
	jmp	.LBB33_46
	.p2align	4, 0x90
.LBB33_47:                              # %for.end84.i
                                        #   in Loop: Header=BB33_38 Depth=2
	cmpq	24(%rsp), %rsi          # 8-byte Folded Reload
	cmovaeq	16(%rsp), %rsi          # 8-byte Folded Reload
	cmpq	%r10, %rsi
	jne	.LBB33_38
# %bb.48:                               #   in Loop: Header=BB33_10 Depth=1
	movq	%r10, %r13
.LBB33_49:                              # %READY.i
                                        #   in Loop: Header=BB33_10 Depth=1
	movq	(%rcx,%r14,8), %rax
	movq	56(%rsp,%rax,8), %rax
	movq	$-1, 24(%rax)
	movq	(%rcx,%r14,8), %rsi
	testq	%rsi, %rsi
	je	.LBB33_50
# %bb.51:                               # %if.end116.i
                                        #   in Loop: Header=BB33_10 Depth=1
	leaq	56(%rsp), %rbx
	movl	$8, %edx
	movl	$cost_compare, %ecx
	movq	%rbx, %rdi
	vzeroupper
	callq	spec_qsort
	movq	56(%rsp), %rax
	jmp	.LBB33_52
	.p2align	4, 0x90
.LBB33_50:                              #   in Loop: Header=BB33_10 Depth=1
	xorl	%eax, %eax
	leaq	56(%rsp), %rbx
.LBB33_52:                              # %primal_bea_mpp.exit
                                        #   in Loop: Header=BB33_10 Depth=1
	movq	opt_basket(%rip), %rcx
	cmpl	$1, %r14d
	movq	%rax, (%rcx,%r14,8)
	movq	perm_p(%rip), %rax
	movq	%rbx, (%rax,%r14,8)
	jne	.LBB33_69
# %bb.53:                               # %if.then
                                        #   in Loop: Header=BB33_10 Depth=1
	movq	perm_p(%rip), %rax
	cmpl	$1, 12(%rsp)            # 4-byte Folded Reload
	jle	.LBB33_54
# %bb.58:                               # %for.body.us.i.preheader
                                        #   in Loop: Header=BB33_10 Depth=1
	movl	$1, %r8d
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB33_59:                              # %for.body.us.i
                                        #   Parent Loop BB33_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_60 Depth 3
	movq	(%rax), %rsi
	movl	$0, %ebp
	movq	(%rsi), %rsi
	movq	24(%rsi), %rdi
	testq	%rdi, %rdi
	cmovnsq	%rbp, %rdx
	sarq	$63, %rdi
	andnq	%rsi, %rdi, %rbx
	movl	$1, %edi
	.p2align	4, 0x90
.LBB33_60:                              # %for.body5.us.i
                                        #   Parent Loop BB33_10 Depth=1
                                        #     Parent Loop BB33_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	(%rax,%rdi,8), %rsi
	movq	(%rsi), %rsi
	cmpq	$0, 24(%rsi)
	js	.LBB33_66
# %bb.61:                               # %if.then9.us.i
                                        #   in Loop: Header=BB33_60 Depth=3
	testq	%rbx, %rbx
	je	.LBB33_65
# %bb.62:                               # %lor.lhs.false.us.i
                                        #   in Loop: Header=BB33_60 Depth=3
	movq	16(%rbx), %rbp
	cmpq	%rbp, 16(%rsi)
	jl	.LBB33_66
# %bb.63:                               # %if.end.i.us.i
                                        #   in Loop: Header=BB33_60 Depth=3
	jg	.LBB33_65
# %bb.64:                               # %if.end6.i.us.i
                                        #   in Loop: Header=BB33_60 Depth=3
	movq	(%rsi), %rbp
	movq	(%rbx), %rcx
	movl	(%rbp), %ebp
	cmpl	(%rcx), %ebp
	jg	.LBB33_66
	.p2align	4, 0x90
.LBB33_65:                              # %cost_compare.exit.thread.us.i
                                        #   in Loop: Header=BB33_60 Depth=3
	movq	%rsi, %rbx
	movq	%rdi, %rdx
.LBB33_66:                              # %for.inc.us.i
                                        #   in Loop: Header=BB33_60 Depth=3
	incq	%rdi
	cmpq	%rdi, %r15
	jne	.LBB33_60
# %bb.67:                               # %for.cond3.for.end_crit_edge.us.i
                                        #   in Loop: Header=BB33_59 Depth=2
	testq	%rbx, %rbx
	je	.LBB33_69
# %bb.68:                               # %if.end16.us.i
                                        #   in Loop: Header=BB33_59 Depth=2
	movq	%r8, 24(%rbx)
	addq	$8, (%rax,%rdx,8)
	cmpq	$60, %r8
	leaq	1(%r8), %r8
	jb	.LBB33_59
	jmp	.LBB33_69
	.p2align	4, 0x90
.LBB33_54:                              # %for.body.i57.preheader
                                        #   in Loop: Header=BB33_10 Depth=1
	xorl	%ecx, %ecx
	.p2align	4, 0x90
.LBB33_55:                              # %for.body.i57
                                        #   Parent Loop BB33_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rax), %rdx
	movq	(%rdx), %rsi
	testq	%rsi, %rsi
	je	.LBB33_69
# %bb.56:                               # %for.body.i57
                                        #   in Loop: Header=BB33_55 Depth=2
	movq	24(%rsi), %rdi
	testq	%rdi, %rdi
	js	.LBB33_69
# %bb.57:                               # %if.end16.i
                                        #   in Loop: Header=BB33_55 Depth=2
	incq	%rcx
	addq	$8, %rdx
	cmpq	$60, %rcx
	movq	%rcx, 24(%rsi)
	movq	%rdx, (%rax)
	jb	.LBB33_55
	.p2align	4, 0x90
.LBB33_69:                              # %if.end
                                        #   in Loop: Header=BB33_10 Depth=1
	cmpb	$0, opt(%rip)
	je	.LBB33_70
.LBB33_71:                              # %while.end
	addq	$32536, %rsp            # imm = 0x7F18
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	vzeroupper
	retq
.Lfunc_end33:
	.size	worker, .Lfunc_end33-worker
	.cfi_endproc
                                        # -- End function
	.globl	primal_bea_mpp          # -- Begin function primal_bea_mpp
	.p2align	4, 0x90
	.type	primal_bea_mpp,@function
primal_bea_mpp:                         # @primal_bea_mpp
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	104(%rsp), %rbx
	movq	96(%rsp), %r13
	movq	88(%rsp), %r15
	movq	80(%rsp), %r10
	movq	%r8, %r12
	movslq	%r9d, %r9
	movl	$1, %edi
	xorl	%r8d, %r8d
	movq	%rdx, (%rsp)            # 8-byte Spill
	jmp	.LBB34_1
	.p2align	4, 0x90
.LBB34_4:                               # %land.lhs.true7
                                        #   in Loop: Header=BB34_1 Depth=1
	cmpw	$1, 32(%rbp)
	je	.LBB34_7
	jmp	.LBB34_8
	.p2align	4, 0x90
.LBB34_1:                               # %land.rhs
                                        # =>This Inner Loop Header: Depth=1
	cmpq	(%rcx,%r9,8), %rdi
	jg	.LBB34_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	(%r12,%rdi,8), %rdx
	cmpq	$0, 24(%rdx)
	jle	.LBB34_8
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	(%rdx), %rbp
	movq	16(%rbp), %rax
	movq	24(%rbp), %r11
	movq	8(%rbp), %rdx
	subq	(%rax), %rdx
	addq	(%r11), %rdx
	testq	%rdx, %rdx
	js	.LBB34_4
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB34_1 Depth=1
	je	.LBB34_8
# %bb.6:                                # %land.lhs.true12
                                        #   in Loop: Header=BB34_1 Depth=1
	cmpw	$2, 32(%rbp)
	jne	.LBB34_8
.LBB34_7:                               # %if.then
                                        #   in Loop: Header=BB34_1 Depth=1
	movq	8(%r12,%r8,8), %rax
	movq	%rdx, %r11
	negq	%r11
	cmovlq	%rdx, %r11
	movq	%rbp, (%rax)
	movq	8(%r12,%r8,8), %rax
	incq	%r8
	movq	%rdx, 8(%rax)
	movq	%r11, 16(%rax)
	movq	$0, 24(%rax)
.LBB34_8:                               # %for.inc
                                        #   in Loop: Header=BB34_1 Depth=1
	cmpq	$60, %rdi
	leaq	1(%rdi), %rdi
	jb	.LBB34_1
.LBB34_9:                               # %for.end
	movq	%r8, (%rcx,%r9,8)
	testq	%r13, %r13
	movq	(%r10), %r8
	movq	full_group_end_arc(%rip), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	jle	.LBB34_10
# %bb.16:                               # %NEXT.us.preheader
	movq	%r13, %r11
	leaq	(,%r13,8), %rax
	leaq	(%r15,%r15,8), %rdx
	leaq	(%rbx,%rbx,8), %rbx
	movq	%r8, %rdi
	andq	$-16, %r11
	leaq	(%rax,%rax,8), %r14
	movq	%rdx, 16(%rsp)          # 8-byte Spill
	.p2align	4, 0x90
.LBB34_17:                              # %NEXT.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_29 Depth 2
                                        #     Child Loop BB34_25 Depth 2
                                        #     Child Loop BB34_27 Depth 2
	movq	16(%rsp), %rax          # 8-byte Reload
	cmpq	8(%rsp), %rdi           # 8-byte Folded Reload
	leaq	(%rdi,%rbx,8), %rdx
	leaq	(%rdi,%rax,8), %rax
	leaq	-72(%rdi,%rbx,8), %rdi
	cmovbq	%rdx, %rdi
	movq	%rdi, (%r10)
	cmpq	%rdi, %rax
	jb	.LBB34_29
	.p2align	4, 0x90
.LBB34_19:                              # %for.end84.us
                                        #   in Loop: Header=BB34_17 Depth=1
	cmpq	(%rsp), %rdi            # 8-byte Folded Reload
	jb	.LBB34_21
# %bb.20:                               # %if.then87.us
                                        #   in Loop: Header=BB34_17 Depth=1
	movq	%rsi, %rdi
	movq	%rsi, (%r10)
.LBB34_21:                              # %if.end88.us
                                        #   in Loop: Header=BB34_17 Depth=1
	cmpq	%r8, %rdi
	je	.LBB34_43
# %bb.22:                               # %for.body95.us.preheader
                                        #   in Loop: Header=BB34_17 Depth=1
	cmpq	$16, %r13
	jae	.LBB34_24
# %bb.23:                               #   in Loop: Header=BB34_17 Depth=1
	xorl	%eax, %eax
	xorl	%ebp, %ebp
	jmp	.LBB34_27
	.p2align	4, 0x90
.LBB34_35:                              # %for.inc82.us
                                        #   in Loop: Header=BB34_29 Depth=2
	addq	%r14, %rax
	cmpq	%rdi, %rax
	jae	.LBB34_19
.LBB34_29:                              # %for.body40.us
                                        #   Parent Loop BB34_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzwl	32(%rax), %ebp
	testw	%bp, %bp
	jle	.LBB34_35
# %bb.30:                               # %if.then45.us
                                        #   in Loop: Header=BB34_29 Depth=2
	movq	16(%rax), %rdx
	movq	8(%rax), %r15
	subq	(%rdx), %r15
	movq	24(%rax), %rdx
	addq	(%rdx), %r15
	js	.LBB34_33
# %bb.31:                               # %lor.rhs.i.us
                                        #   in Loop: Header=BB34_29 Depth=2
	testq	%r15, %r15
	je	.LBB34_35
# %bb.32:                               # %lor.rhs.i.us
                                        #   in Loop: Header=BB34_29 Depth=2
	cmpw	$2, %bp
	je	.LBB34_34
	jmp	.LBB34_35
	.p2align	4, 0x90
.LBB34_33:                              # %land.lhs.true.i.us
                                        #   in Loop: Header=BB34_29 Depth=2
	cmpw	$1, %bp
	jne	.LBB34_35
.LBB34_34:                              # %if.then53.us
                                        #   in Loop: Header=BB34_29 Depth=2
	movq	(%rcx,%r9,8), %rdi
	movq	%r15, %rdx
	negq	%rdx
	cmovlq	%r15, %rdx
	leaq	1(%rdi), %rbp
	movq	%rbp, (%rcx,%r9,8)
	movq	8(%r12,%rdi,8), %rbp
	movq	%rax, (%rbp)
	movq	8(%r12,%rdi,8), %rdi
	movq	%r15, 8(%rdi)
	movq	(%rcx,%r9,8), %rdi
	movq	(%r12,%rdi,8), %rdi
	movq	%rdx, 16(%rdi)
	movq	(%rcx,%r9,8), %rdx
	movq	(%r12,%rdx,8), %rdx
	movq	$0, 24(%rdx)
	movq	(%r10), %rdi
	jmp	.LBB34_35
	.p2align	4, 0x90
.LBB34_24:                              # %vector.body.preheader
                                        #   in Loop: Header=BB34_17 Depth=1
	vpxor	%xmm0, %xmm0, %xmm0
	xorl	%eax, %eax
	vpxor	%xmm1, %xmm1, %xmm1
	vpxor	%xmm2, %xmm2, %xmm2
	vpxor	%xmm3, %xmm3, %xmm3
	.p2align	4, 0x90
.LBB34_25:                              # %vector.body
                                        #   Parent Loop BB34_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vpaddq	(%rcx,%rax,8), %ymm0, %ymm0
	vpaddq	32(%rcx,%rax,8), %ymm1, %ymm1
	vpaddq	64(%rcx,%rax,8), %ymm2, %ymm2
	vpaddq	96(%rcx,%rax,8), %ymm3, %ymm3
	addq	$16, %rax
	cmpq	%rax, %r11
	jne	.LBB34_25
# %bb.26:                               # %middle.block
                                        #   in Loop: Header=BB34_17 Depth=1
	vpaddq	%ymm0, %ymm1, %ymm0
	movq	%r11, %rbp
	cmpq	%r13, %r11
	vpaddq	%ymm0, %ymm2, %ymm0
	vpaddq	%ymm0, %ymm3, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpaddq	%ymm1, %ymm0, %ymm0
	vpshufd	$78, %xmm0, %xmm1       # xmm1 = xmm0[2,3,0,1]
	vpaddq	%xmm1, %xmm0, %xmm0
	vmovq	%xmm0, %rax
	je	.LBB34_28
	.p2align	4, 0x90
.LBB34_27:                              # %for.body95.us
                                        #   Parent Loop BB34_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addq	(%rcx,%rbp,8), %rax
	incq	%rbp
	cmpq	%rbp, %r13
	jne	.LBB34_27
.LBB34_28:                              # %for.cond92.for.end100_crit_edge.us
                                        #   in Loop: Header=BB34_17 Depth=1
	cmpq	$59, %rax
	jle	.LBB34_17
	jmp	.LBB34_43
.LBB34_10:                              # %NEXT.preheader
	leaq	(%r15,%r15,8), %r11
	movq	(%rsp), %r15            # 8-byte Reload
	shlq	$3, %r13
	leaq	(%rbx,%rbx,8), %r14
	movq	%r8, %rdi
	leaq	(%r13,%r13,8), %r13
	jmp	.LBB34_11
	.p2align	4, 0x90
.LBB34_39:                              # %for.inc82
                                        #   in Loop: Header=BB34_13 Depth=2
	addq	%r13, %rax
	cmpq	%rdi, %rax
	jae	.LBB34_40
.LBB34_13:                              # %for.body40
                                        #   Parent Loop BB34_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzwl	32(%rax), %edx
	testw	%dx, %dx
	jle	.LBB34_39
# %bb.14:                               # %if.then45
                                        #   in Loop: Header=BB34_13 Depth=2
	movq	16(%rax), %rbx
	movq	8(%rax), %rbp
	subq	(%rbx), %rbp
	movq	24(%rax), %rbx
	addq	(%rbx), %rbp
	js	.LBB34_15
# %bb.36:                               # %lor.rhs.i
                                        #   in Loop: Header=BB34_13 Depth=2
	testq	%rbp, %rbp
	je	.LBB34_39
# %bb.37:                               # %lor.rhs.i
                                        #   in Loop: Header=BB34_13 Depth=2
	cmpw	$2, %dx
	je	.LBB34_38
	jmp	.LBB34_39
	.p2align	4, 0x90
.LBB34_15:                              # %land.lhs.true.i
                                        #   in Loop: Header=BB34_13 Depth=2
	cmpw	$1, %dx
	jne	.LBB34_39
.LBB34_38:                              # %if.then53
                                        #   in Loop: Header=BB34_13 Depth=2
	movq	(%rcx,%r9,8), %rdi
	movq	%rbp, %rdx
	negq	%rdx
	cmovlq	%rbp, %rdx
	leaq	1(%rdi), %rbx
	movq	%rbx, (%rcx,%r9,8)
	movq	8(%r12,%rdi,8), %rbx
	movq	%rax, (%rbx)
	movq	8(%r12,%rdi,8), %rdi
	movq	%rbp, 8(%rdi)
	movq	(%rcx,%r9,8), %rdi
	movq	(%r12,%rdi,8), %rdi
	movq	%rdx, 16(%rdi)
	movq	(%rcx,%r9,8), %rdx
	movq	(%r12,%rdx,8), %rdx
	movq	$0, 24(%rdx)
	movq	(%r10), %rdi
	jmp	.LBB34_39
	.p2align	4, 0x90
.LBB34_11:                              # %NEXT
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_13 Depth 2
	cmpq	8(%rsp), %rdi           # 8-byte Folded Reload
	leaq	(%rdi,%r11,8), %rax
	leaq	(%rdi,%r14,8), %rdx
	leaq	-72(%rdi,%r14,8), %rdi
	cmovbq	%rdx, %rdi
	movq	%rdi, (%r10)
	cmpq	%rdi, %rax
	jb	.LBB34_13
	.p2align	4, 0x90
.LBB34_40:                              # %for.end84
                                        #   in Loop: Header=BB34_11 Depth=1
	cmpq	%r15, %rdi
	jb	.LBB34_42
# %bb.41:                               # %if.then87
                                        #   in Loop: Header=BB34_11 Depth=1
	movq	%rsi, %rdi
	movq	%rsi, (%r10)
.LBB34_42:                              # %if.end88
                                        #   in Loop: Header=BB34_11 Depth=1
	cmpq	%r8, %rdi
	jne	.LBB34_11
.LBB34_43:                              # %READY
	movq	(%rcx,%r9,8), %rax
	movq	8(%r12,%rax,8), %rax
	movq	$-1, 24(%rax)
	movq	(%rcx,%r9,8), %rsi
	testq	%rsi, %rsi
	je	.LBB34_44
# %bb.45:                               # %if.end116
	leaq	8(%r12), %rdi
	movl	$8, %edx
	movl	$cost_compare, %ecx
	vzeroupper
	callq	spec_qsort
	movq	8(%r12), %rax
	jmp	.LBB34_46
.LBB34_44:
	xorl	%eax, %eax
.LBB34_46:                              # %cleanup
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	vzeroupper
	retq
.Lfunc_end34:
	.size	primal_bea_mpp, .Lfunc_end34-primal_bea_mpp
	.cfi_endproc
                                        # -- End function
	.globl	master                  # -- Begin function master
	.p2align	4, 0x90
	.type	master,@function
master:                                 # @master
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	pushq	%r15
	.cfi_def_cfa_offset 24
	pushq	%r14
	.cfi_def_cfa_offset 32
	pushq	%r13
	.cfi_def_cfa_offset 40
	pushq	%r12
	.cfi_def_cfa_offset 48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	subq	$32616, %rsp            # imm = 0x7F68
	.cfi_def_cfa_offset 32672
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	.cfi_offset %rbp, -16
	movq	568(%rdi), %rax
	movq	basket_sizes(%rip), %rcx
	xorl	%edx, %edx
	movq	%rdi, 32(%rsp)          # 8-byte Spill
	movl	%esi, %r13d
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movq	576(%rdi), %rax
	movq	$0, (%rcx)
	movq	%rax, 64(%rsp)          # 8-byte Spill
	movl	$4000, %eax             # imm = 0xFA0
	idivl	%esi
	cmpl	$-59, %eax
	jl	.LBB35_7
# %bb.1:                                # %for.body.lr.ph
	movq	basket(%rip), %rdx
	addl	$61, %eax
	movl	$2, %r8d
	movl	$1, %esi
	movslq	%eax, %r9
	cmpq	$1, %r9
	cmovgq	%r9, %r8
	decq	%r8
	cmpq	$15, %r8
	jbe	.LBB35_2
# %bb.4:                                # %vector.ph
	movq	%r8, %r10
	leaq	512(%rdx), %rbx
	xorl	%ebp, %ebp
	andq	$-16, %r10
	leaq	1(%r10), %rsi
	.p2align	4, 0x90
.LBB35_5:                               # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-416(%rbx), %rax
	leaq	-384(%rbx), %rdi
	leaq	-480(%rbx), %r11
	leaq	-448(%rbx), %r14
	vmovq	%rdi, %xmm0
	vmovq	%rax, %xmm1
	vmovq	%r11, %xmm2
	leaq	-288(%rbx), %rax
	leaq	-256(%rbx), %rdi
	leaq	-352(%rbx), %r11
	vmovq	%r11, %xmm3
	leaq	-224(%rbx), %r11
	vmovq	%r11, %xmm4
	leaq	-96(%rbx), %r11
	vpunpcklqdq	%xmm0, %xmm1, %xmm0 # xmm0 = xmm1[0],xmm0[0]
	vmovq	%r14, %xmm1
	leaq	-320(%rbx), %r14
	vmovq	%r11, %xmm5
	vpunpcklqdq	%xmm1, %xmm2, %xmm1 # xmm1 = xmm2[0],xmm1[0]
	vmovq	%rax, %xmm2
	leaq	-160(%rbx), %rax
	vinserti128	$1, %xmm0, %ymm1, %ymm0
	vmovq	%rdi, %xmm1
	leaq	-128(%rbx), %rdi
	vmovdqu	%ymm0, 136(%rsp,%rbp,8)
	vpunpcklqdq	%xmm1, %xmm2, %xmm1 # xmm1 = xmm2[0],xmm1[0]
	vmovq	%r14, %xmm2
	leaq	-192(%rbx), %r14
	vpunpcklqdq	%xmm2, %xmm3, %xmm2 # xmm2 = xmm3[0],xmm2[0]
	vmovq	%rax, %xmm3
	leaq	-32(%rbx), %rax
	vinserti128	$1, %xmm1, %ymm2, %ymm1
	vmovq	%rdi, %xmm2
	leaq	-64(%rbx), %rdi
	vmovdqu	%ymm1, 168(%rsp,%rbp,8)
	vpunpcklqdq	%xmm2, %xmm3, %xmm2 # xmm2 = xmm3[0],xmm2[0]
	vmovq	%r14, %xmm3
	vpunpcklqdq	%xmm3, %xmm4, %xmm3 # xmm3 = xmm4[0],xmm3[0]
	vmovq	%rax, %xmm4
	vinserti128	$1, %xmm2, %ymm3, %ymm2
	vmovq	%rbx, %xmm3
	addq	$512, %rbx              # imm = 0x200
	vmovdqu	%ymm2, 200(%rsp,%rbp,8)
	vpunpcklqdq	%xmm3, %xmm4, %xmm3 # xmm3 = xmm4[0],xmm3[0]
	vmovq	%rdi, %xmm4
	vpunpcklqdq	%xmm4, %xmm5, %xmm4 # xmm4 = xmm5[0],xmm4[0]
	vinserti128	$1, %xmm3, %ymm4, %ymm3
	vmovdqu	%ymm3, 232(%rsp,%rbp,8)
	addq	$16, %rbp
	cmpq	%rbp, %r10
	jne	.LBB35_5
# %bb.6:                                # %middle.block
	cmpq	%r10, %r8
	je	.LBB35_7
.LBB35_2:                               # %for.body.preheader
	movq	%rsi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rdx
	.p2align	4, 0x90
.LBB35_3:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%rdx, 128(%rsp,%rsi,8)
	incq	%rsi
	addq	$32, %rdx
	cmpq	%r9, %rsi
	jl	.LBB35_3
.LBB35_7:                               # %while.cond.preheader
	cmpb	$0, opt(%rip)
	jne	.LBB35_117
# %bb.8:                                # %while.body.lr.ph
	movq	48(%rsp), %r10          # 8-byte Reload
	movslq	%r13d, %r15
	movl	%r13d, 4(%rsp)          # 4-byte Spill
	movq	%r15, %rax
	andq	$-16, %rax
	movq	%rax, 88(%rsp)          # 8-byte Spill
	leaq	(,%r15,8), %rax
	leaq	(%rax,%rax,8), %r14
                                        # implicit-def: $rax
                                        # kill: killed $rax
	jmp	.LBB35_9
	.p2align	4, 0x90
.LBB35_108:                             # %if.end99.while.body_crit_edge
                                        #   in Loop: Header=BB35_9 Depth=1
	movq	basket_sizes(%rip), %rcx
	movq	%r12, %r10
.LBB35_9:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_10 Depth 2
                                        #     Child Loop BB35_37 Depth 2
                                        #       Child Loop BB35_39 Depth 3
                                        #     Child Loop BB35_20 Depth 2
                                        #       Child Loop BB35_30 Depth 3
                                        #       Child Loop BB35_26 Depth 3
                                        #       Child Loop BB35_28 Depth 3
                                        #     Child Loop BB35_53 Depth 2
                                        #     Child Loop BB35_64 Depth 2
                                        #     Child Loop BB35_71 Depth 2
                                        #     Child Loop BB35_91 Depth 2
                                        #       Child Loop BB35_92 Depth 3
                                        #     Child Loop BB35_97 Depth 2
                                        #     Child Loop BB35_115 Depth 2
                                        #     Child Loop BB35_105 Depth 2
                                        #     Child Loop BB35_111 Depth 2
                                        #     Child Loop BB35_114 Depth 2
                                        #     Child Loop BB35_87 Depth 2
                                        #     Child Loop BB35_88 Depth 2
	movq	32(%rsp), %rdx          # 8-byte Reload
	xorl	%r9d, %r9d
	movl	$1, %esi
	movq	608(%rdx), %rax
	movq	640(%rdx), %r8
	cqto
	idivq	%r15
	jmp	.LBB35_10
	.p2align	4, 0x90
.LBB35_13:                              # %land.lhs.true7.i
                                        #   in Loop: Header=BB35_10 Depth=2
	cmpw	$1, 32(%rbp)
	je	.LBB35_16
	jmp	.LBB35_17
	.p2align	4, 0x90
.LBB35_10:                              # %land.rhs.i
                                        #   Parent Loop BB35_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	(%rcx), %rsi
	jg	.LBB35_18
# %bb.11:                               # %for.body.i
                                        #   in Loop: Header=BB35_10 Depth=2
	movq	128(%rsp,%rsi,8), %rdi
	cmpq	$0, 24(%rdi)
	jle	.LBB35_17
# %bb.12:                               # %land.lhs.true.i
                                        #   in Loop: Header=BB35_10 Depth=2
	movq	(%rdi), %rbp
	movq	16(%rbp), %rbx
	movq	24(%rbp), %rax
	movq	8(%rbp), %rdi
	subq	(%rbx), %rdi
	addq	(%rax), %rdi
	testq	%rdi, %rdi
	js	.LBB35_13
# %bb.14:                               # %lor.lhs.false.i
                                        #   in Loop: Header=BB35_10 Depth=2
	je	.LBB35_17
# %bb.15:                               # %land.lhs.true12.i
                                        #   in Loop: Header=BB35_10 Depth=2
	cmpw	$2, 32(%rbp)
	jne	.LBB35_17
.LBB35_16:                              # %if.then.i
                                        #   in Loop: Header=BB35_10 Depth=2
	movq	136(%rsp,%r9,8), %rax
	movq	%rdi, %rbx
	negq	%rbx
	cmovlq	%rdi, %rbx
	movq	%rbp, (%rax)
	movq	136(%rsp,%r9,8), %rax
	incq	%r9
	movq	%rdi, 8(%rax)
	movq	%rbx, 16(%rax)
	movq	$0, 24(%rax)
.LBB35_17:                              # %for.inc.i
                                        #   in Loop: Header=BB35_10 Depth=2
	cmpq	$60, %rsi
	leaq	1(%rsi), %rsi
	jb	.LBB35_10
.LBB35_18:                              # %for.end.i
                                        #   in Loop: Header=BB35_9 Depth=1
	movq	%r9, (%rcx)
	movq	%r10, %rsi
	testl	%r13d, %r13d
	movq	full_group_end_arc(%rip), %r9
	jle	.LBB35_37
# %bb.19:                               # %NEXT.us.i.preheader
                                        #   in Loop: Header=BB35_9 Depth=1
	movq	%r10, %r12
	.p2align	4, 0x90
.LBB35_20:                              # %NEXT.us.i
                                        #   Parent Loop BB35_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_30 Depth 3
                                        #       Child Loop BB35_26 Depth 3
                                        #       Child Loop BB35_28 Depth 3
	leaq	(%rdx,%rdx,8), %rax
	cmpq	%r9, %r12
	leaq	(%r12,%rax,8), %rsi
	leaq	(%r8,%r8,8), %rax
	leaq	(%r12,%rax,8), %rdi
	leaq	-72(%r12,%rax,8), %r12
	cmovbq	%rdi, %r12
	cmpq	%r12, %rsi
	jb	.LBB35_30
	jmp	.LBB35_22
	.p2align	4, 0x90
.LBB35_36:                              # %for.inc82.us.i
                                        #   in Loop: Header=BB35_30 Depth=3
	addq	%r14, %rsi
	cmpq	%r12, %rsi
	jae	.LBB35_22
.LBB35_30:                              # %for.body40.us.i
                                        #   Parent Loop BB35_9 Depth=1
                                        #     Parent Loop BB35_20 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movzwl	32(%rsi), %ebp
	testw	%bp, %bp
	jle	.LBB35_36
# %bb.31:                               # %if.then45.us.i
                                        #   in Loop: Header=BB35_30 Depth=3
	movq	16(%rsi), %rax
	movq	24(%rsi), %r11
	movq	8(%rsi), %rdi
	subq	(%rax), %rdi
	addq	(%r11), %rdi
	js	.LBB35_34
# %bb.32:                               # %lor.rhs.i.us.i
                                        #   in Loop: Header=BB35_30 Depth=3
	cmpw	$2, %bp
	jne	.LBB35_36
# %bb.33:                               # %lor.rhs.i.us.i
                                        #   in Loop: Header=BB35_30 Depth=3
	testq	%rdi, %rdi
	jne	.LBB35_35
	jmp	.LBB35_36
	.p2align	4, 0x90
.LBB35_34:                              # %land.lhs.true.i.us.i
                                        #   in Loop: Header=BB35_30 Depth=3
	cmpw	$1, %bp
	jne	.LBB35_36
.LBB35_35:                              # %if.then53.us.i
                                        #   in Loop: Header=BB35_30 Depth=3
	movq	(%rcx), %rbp
	movq	%rdi, %rax
	negq	%rax
	cmovlq	%rdi, %rax
	leaq	1(%rbp), %rbx
	movq	%rbx, (%rcx)
	movq	136(%rsp,%rbp,8), %rbx
	movq	%rsi, (%rbx)
	movq	136(%rsp,%rbp,8), %rbp
	movq	%rdi, 8(%rbp)
	movq	(%rcx), %rdi
	movq	128(%rsp,%rdi,8), %rdi
	movq	%rax, 16(%rdi)
	movq	(%rcx), %rax
	movq	128(%rsp,%rax,8), %rax
	movq	$0, 24(%rax)
	jmp	.LBB35_36
	.p2align	4, 0x90
.LBB35_22:                              # %for.end84.us.i
                                        #   in Loop: Header=BB35_20 Depth=2
	cmpq	64(%rsp), %r12          # 8-byte Folded Reload
	cmovaeq	48(%rsp), %r12          # 8-byte Folded Reload
	cmpq	%r10, %r12
	je	.LBB35_48
# %bb.23:                               # %for.body95.us.i.preheader
                                        #   in Loop: Header=BB35_20 Depth=2
	cmpl	$16, %r13d
	jae	.LBB35_25
# %bb.24:                               #   in Loop: Header=BB35_20 Depth=2
	xorl	%esi, %esi
	xorl	%edi, %edi
	jmp	.LBB35_28
	.p2align	4, 0x90
.LBB35_25:                              # %vector.body294.preheader
                                        #   in Loop: Header=BB35_20 Depth=2
	movq	88(%rsp), %rax          # 8-byte Reload
	vpxor	%xmm0, %xmm0, %xmm0
	xorl	%esi, %esi
	vpxor	%xmm1, %xmm1, %xmm1
	vpxor	%xmm2, %xmm2, %xmm2
	vpxor	%xmm3, %xmm3, %xmm3
	.p2align	4, 0x90
.LBB35_26:                              # %vector.body294
                                        #   Parent Loop BB35_9 Depth=1
                                        #     Parent Loop BB35_20 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vpaddq	(%rcx,%rsi,8), %ymm0, %ymm0
	vpaddq	32(%rcx,%rsi,8), %ymm1, %ymm1
	vpaddq	64(%rcx,%rsi,8), %ymm2, %ymm2
	vpaddq	96(%rcx,%rsi,8), %ymm3, %ymm3
	addq	$16, %rsi
	cmpq	%rsi, %rax
	jne	.LBB35_26
# %bb.27:                               # %middle.block295
                                        #   in Loop: Header=BB35_20 Depth=2
	vpaddq	%ymm0, %ymm1, %ymm0
	movq	%rax, %rdi
	cmpq	%r15, %rax
	vpaddq	%ymm0, %ymm2, %ymm0
	vpaddq	%ymm0, %ymm3, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpaddq	%ymm1, %ymm0, %ymm0
	vpshufd	$78, %xmm0, %xmm1       # xmm1 = xmm0[2,3,0,1]
	vpaddq	%xmm1, %xmm0, %xmm0
	vmovq	%xmm0, %rsi
	je	.LBB35_29
	.p2align	4, 0x90
.LBB35_28:                              # %for.body95.us.i
                                        #   Parent Loop BB35_9 Depth=1
                                        #     Parent Loop BB35_20 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	addq	(%rcx,%rdi,8), %rsi
	incq	%rdi
	cmpq	%rdi, %r15
	jne	.LBB35_28
.LBB35_29:                              # %for.cond92.for.end100_crit_edge.us.i
                                        #   in Loop: Header=BB35_20 Depth=2
	cmpq	$59, %rsi
	jle	.LBB35_20
	jmp	.LBB35_48
	.p2align	4, 0x90
.LBB35_37:                              # %NEXT.i
                                        #   Parent Loop BB35_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_39 Depth 3
	leaq	(%rdx,%rdx,8), %rax
	cmpq	%r9, %rsi
	leaq	(%rsi,%rax,8), %rdi
	leaq	(%r8,%r8,8), %rax
	leaq	(%rsi,%rax,8), %rbp
	leaq	-72(%rsi,%rax,8), %rsi
	cmovbq	%rbp, %rsi
	cmpq	%rsi, %rdi
	jb	.LBB35_39
	jmp	.LBB35_46
	.p2align	4, 0x90
.LBB35_45:                              # %for.inc82.i
                                        #   in Loop: Header=BB35_39 Depth=3
	addq	%r14, %rdi
	cmpq	%rsi, %rdi
	jae	.LBB35_46
.LBB35_39:                              # %for.body40.i
                                        #   Parent Loop BB35_9 Depth=1
                                        #     Parent Loop BB35_37 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movzwl	32(%rdi), %eax
	testw	%ax, %ax
	jle	.LBB35_45
# %bb.40:                               # %if.then45.i
                                        #   in Loop: Header=BB35_39 Depth=3
	movq	16(%rdi), %rbx
	movq	24(%rdi), %r11
	movq	8(%rdi), %rbp
	subq	(%rbx), %rbp
	addq	(%r11), %rbp
	js	.LBB35_41
# %bb.42:                               # %lor.rhs.i.i
                                        #   in Loop: Header=BB35_39 Depth=3
	cmpw	$2, %ax
	jne	.LBB35_45
# %bb.43:                               # %lor.rhs.i.i
                                        #   in Loop: Header=BB35_39 Depth=3
	testq	%rbp, %rbp
	jne	.LBB35_44
	jmp	.LBB35_45
	.p2align	4, 0x90
.LBB35_41:                              # %land.lhs.true.i.i
                                        #   in Loop: Header=BB35_39 Depth=3
	cmpw	$1, %ax
	jne	.LBB35_45
.LBB35_44:                              # %if.then53.i
                                        #   in Loop: Header=BB35_39 Depth=3
	movq	(%rcx), %r11
	movq	%rbp, %rax
	negq	%rax
	cmovlq	%rbp, %rax
	leaq	1(%r11), %rbx
	movq	%rbx, (%rcx)
	movq	136(%rsp,%r11,8), %rbx
	movq	%rdi, (%rbx)
	movq	136(%rsp,%r11,8), %rbx
	movq	%rbp, 8(%rbx)
	movq	(%rcx), %rbp
	movq	128(%rsp,%rbp,8), %rbp
	movq	%rax, 16(%rbp)
	movq	(%rcx), %rax
	movq	128(%rsp,%rax,8), %rax
	movq	$0, 24(%rax)
	jmp	.LBB35_45
	.p2align	4, 0x90
.LBB35_46:                              # %for.end84.i
                                        #   in Loop: Header=BB35_37 Depth=2
	cmpq	64(%rsp), %rsi          # 8-byte Folded Reload
	cmovaeq	48(%rsp), %rsi          # 8-byte Folded Reload
	cmpq	%r10, %rsi
	jne	.LBB35_37
# %bb.47:                               #   in Loop: Header=BB35_9 Depth=1
	movq	%r10, %r12
.LBB35_48:                              # %READY.i
                                        #   in Loop: Header=BB35_9 Depth=1
	movq	(%rcx), %rax
	movq	136(%rsp,%rax,8), %rax
	movq	$-1, 24(%rax)
	movq	(%rcx), %rsi
	testq	%rsi, %rsi
	je	.LBB35_49
# %bb.50:                               # %if.end116.i
                                        #   in Loop: Header=BB35_9 Depth=1
	leaq	136(%rsp), %rbx
	movl	$8, %edx
	movl	$cost_compare, %ecx
	movq	%rbx, %rdi
	vzeroupper
	callq	spec_qsort
	movq	136(%rsp), %rax
	jmp	.LBB35_51
	.p2align	4, 0x90
.LBB35_49:                              #   in Loop: Header=BB35_9 Depth=1
	xorl	%eax, %eax
	leaq	136(%rsp), %rbx
.LBB35_51:                              # %primal_bea_mpp.exit
                                        #   in Loop: Header=BB35_9 Depth=1
	movq	opt_basket(%rip), %rcx
	testl	%r13d, %r13d
	movq	%rax, (%rcx)
	movq	perm_p(%rip), %rax
	movq	%rbx, (%rax)
	jle	.LBB35_116
# %bb.52:                               # %for.body21.lr.ph
                                        #   in Loop: Header=BB35_9 Depth=1
	movq	opt_basket(%rip), %rax
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB35_53:                              # %for.body21
                                        #   Parent Loop BB35_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rax,%rdx,8), %rsi
	testb	$1, %dil
	je	.LBB35_54
# %bb.55:                               # %lor.lhs.false
                                        #   in Loop: Header=BB35_53 Depth=2
	testq	%rsi, %rsi
	je	.LBB35_60
# %bb.56:                               # %land.lhs.true27
                                        #   in Loop: Header=BB35_53 Depth=2
	movq	16(%rcx), %rdi
	cmpq	%rdi, 16(%rsi)
	jl	.LBB35_60
# %bb.57:                               # %if.end.i
                                        #   in Loop: Header=BB35_53 Depth=2
	jg	.LBB35_59
# %bb.58:                               # %if.end6.i
                                        #   in Loop: Header=BB35_53 Depth=2
	movq	(%rsi), %rdi
	movq	(%rcx), %rbp
	movl	(%rdi), %edi
	cmpl	(%rbp), %edi
	jle	.LBB35_59
	jmp	.LBB35_60
	.p2align	4, 0x90
.LBB35_54:                              # %land.lhs.true
                                        #   in Loop: Header=BB35_53 Depth=2
	testq	%rsi, %rsi
	je	.LBB35_60
.LBB35_59:                              # %if.then
                                        #   in Loop: Header=BB35_53 Depth=2
	movq	%rsi, %rcx
.LBB35_60:                              # %for.inc33
                                        #   in Loop: Header=BB35_53 Depth=2
	incq	%rdx
	testq	%rcx, %rcx
	setne	%dil
	cmpq	%rdx, %r15
	jne	.LBB35_53
# %bb.61:                               # %for.end35
                                        #   in Loop: Header=BB35_9 Depth=1
	testq	%rcx, %rcx
	je	.LBB35_116
# %bb.62:                               # %if.else
                                        #   in Loop: Header=BB35_9 Depth=1
	movq	(%rcx), %rbp
	movq	8(%rcx), %r13
	cmpl	$1, 4(%rsp)             # 4-byte Folded Reload
	jne	.LBB35_67
# %bb.63:                               # %for.body.i207.preheader
                                        #   in Loop: Header=BB35_9 Depth=1
	movq	perm_p(%rip), %rax
	xorl	%ecx, %ecx
	.p2align	4, 0x90
.LBB35_64:                              # %for.body.i207
                                        #   Parent Loop BB35_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rax), %rdx
	movq	(%rdx), %rsi
	testq	%rsi, %rsi
	je	.LBB35_67
# %bb.65:                               # %for.body.i207
                                        #   in Loop: Header=BB35_64 Depth=2
	movq	24(%rsi), %rdi
	testq	%rdi, %rdi
	js	.LBB35_67
# %bb.66:                               # %if.end16.i
                                        #   in Loop: Header=BB35_64 Depth=2
	incq	%rcx
	addq	$8, %rdx
	cmpq	$60, %rcx
	movq	%rcx, 24(%rsi)
	movq	%rdx, (%rax)
	jb	.LBB35_64
.LBB35_67:                              # %if.end43
                                        #   in Loop: Header=BB35_9 Depth=1
	testq	%r13, %r13
	je	.LBB35_116
# %bb.68:                               # %if.then46
                                        #   in Loop: Header=BB35_9 Depth=1
	movq	32(%rsp), %rax          # 8-byte Reload
	xorl	%ecx, %ecx
	incq	608(%rax)
	xorl	%eax, %eax
	testq	%r13, %r13
	setg	%al
	setle	%cl
	movq	16(%rbp,%rax,8), %rax
	movq	16(%rbp,%rcx,8), %r10
	cmpq	%r10, %rax
	je	.LBB35_69
# %bb.70:                               # %while.body.i190.preheader
                                        #   in Loop: Header=BB35_9 Depth=1
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movq	%rax, %rdi
	movq	%r10, %rcx
	xorl	%r11d, %r11d
	movq	%rbp, 16(%rsp)          # 8-byte Spill
	.p2align	4, 0x90
.LBB35_71:                              # %while.body.i190
                                        #   Parent Loop BB35_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	88(%rdi), %rsi
	cmpq	88(%rcx), %rsi
	jge	.LBB35_77
# %bb.72:                               # %if.then.i193
                                        #   in Loop: Header=BB35_71 Depth=2
	cmpl	$0, 8(%rdi)
	je	.LBB35_74
# %bb.73:                               # %if.then3.i
                                        #   in Loop: Header=BB35_71 Depth=2
	movq	24(%rdi), %rbp
	movq	80(%rdi), %rsi
	jmp	.LBB35_76
	.p2align	4, 0x90
.LBB35_77:                              # %if.else19.i
                                        #   in Loop: Header=BB35_71 Depth=2
	cmpl	$0, 8(%rcx)
	je	.LBB35_78
# %bb.79:                               # %if.else28.i
                                        #   in Loop: Header=BB35_71 Depth=2
	movq	24(%rcx), %rsi
	cmpq	$0, 24(%rsi)
	je	.LBB35_81
# %bb.80:                               # %if.then32.i
                                        #   in Loop: Header=BB35_71 Depth=2
	movq	8(%rsp), %rdx           # 8-byte Reload
	movl	$1, %ebp
	subq	80(%rcx), %rbp
	movl	$1, %ebx
	cmpq	%rbp, %r8
	cmovgq	%rbp, %r8
	cmovgeq	%rcx, %r9
	cmovgeq	%rbx, %rdx
	movq	%rdx, 8(%rsp)           # 8-byte Spill
.LBB35_81:                              # %if.end43.i
                                        #   in Loop: Header=BB35_71 Depth=2
	movq	%rsi, %rcx
	jmp	.LBB35_82
.LBB35_74:                              # %if.else.i197
                                        #   in Loop: Header=BB35_71 Depth=2
	movq	24(%rdi), %rbp
	cmpq	$0, 24(%rbp)
	je	.LBB35_83
# %bb.75:                               # %if.then9.i
                                        #   in Loop: Header=BB35_71 Depth=2
	movl	$1, %esi
	subq	80(%rdi), %rsi
.LBB35_76:                              # %if.end43.i
                                        #   in Loop: Header=BB35_71 Depth=2
	movq	8(%rsp), %rbx           # 8-byte Reload
	cmpq	%rsi, %r8
	cmovgq	%rsi, %r8
	cmovgq	%rdi, %r9
	cmovgq	%r11, %rbx
	movq	%rbx, 8(%rsp)           # 8-byte Spill
	jmp	.LBB35_83
.LBB35_78:                              # %if.then22.i
                                        #   in Loop: Header=BB35_71 Depth=2
	movq	80(%rcx), %rsi
	movq	8(%rsp), %rdx           # 8-byte Reload
	movl	$1, %ebp
	cmpq	%rsi, %r8
	cmovgeq	%rcx, %r9
	movq	24(%rcx), %rcx
	cmovgeq	%rbp, %rdx
	cmovgq	%rsi, %r8
	movq	%rdx, 8(%rsp)           # 8-byte Spill
.LBB35_82:                              # %if.end43.i
                                        #   in Loop: Header=BB35_71 Depth=2
	movq	%rdi, %rbp
.LBB35_83:                              # %if.end43.i
                                        #   in Loop: Header=BB35_71 Depth=2
	movq	%rbp, %rdi
	cmpq	%rcx, %rbp
	jne	.LBB35_71
# %bb.84:                               # %primal_iminus.exit
                                        #   in Loop: Header=BB35_9 Depth=1
	testq	%r9, %r9
	je	.LBB35_85
# %bb.90:                               # %if.else70
                                        #   in Loop: Header=BB35_9 Depth=1
	movq	16(%rsp), %r11          # 8-byte Reload
	movq	%r13, %rbx
	movq	%r13, %rsi
	movq	%rax, %rdi
	negq	%rbx
	cmovgeq	%rbx, %rsi
	xorl	%edx, %edx
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	cmoveq	%r10, %rdi
	cmoveq	%rax, %r10
	sete	%dl
	testq	%r13, %r13
	movq	16(%r11), %rax
	cmovsq	%r13, %rbx
	movq	%rdx, 72(%rsp)          # 8-byte Spill
	movl	$1, %r11d
	movq	%rbx, %rbp
	cmpq	%r10, %rax
	sete	%dl
	cmoveq	%rsi, %rbp
	testq	%r13, %r13
	cmovleq	%rbx, %rbp
	movq	48(%r9), %rbx
	cmpq	%rdi, %rax
	movq	24(%r9), %rax
	cmovneq	%rbp, %rsi
	testq	%r13, %r13
	cmovnsq	%rbp, %rsi
	subq	%r8, %r11
	testq	%r13, %r13
	movq	32(%rsp), %r13          # 8-byte Reload
	cmovleq	%r8, %r11
	xorl	%ebp, %ebp
	movq	%rbx, 56(%rsp)          # 8-byte Spill
	movslq	8(%r9), %rbx
	cmpq	%rbx, 8(%rsp)           # 8-byte Folded Reload
	movq	512(%r13), %rbx
	sete	%bpl
	incl	%ebp
	movl	%ebp, 28(%rsp)          # 4-byte Spill
	movq	%rbx, 80(%rsp)          # 8-byte Spill
	addq	%rsi, (%r9)
	movq	%r9, %rbx
	jmp	.LBB35_91
	.p2align	4, 0x90
.LBB35_119:                             # %ITERATION.i
                                        #   in Loop: Header=BB35_91 Depth=2
	addq	%rsi, (%rbp)
	movq	%rbp, %rbx
.LBB35_91:                              # %RECURSION.i
                                        #   Parent Loop BB35_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_92 Depth 3
	movq	16(%rbx), %rbp
	testq	%rbp, %rbp
	jne	.LBB35_119
	jmp	.LBB35_92
	.p2align	4, 0x90
.LBB35_94:                              # %if.end23.i
                                        #   in Loop: Header=BB35_92 Depth=3
	movq	24(%rbx), %rbx
.LBB35_92:                              # %TEST.preheader.i
                                        #   Parent Loop BB35_9 Depth=1
                                        #     Parent Loop BB35_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpq	%r9, %rbx
	je	.LBB35_95
# %bb.93:                               # %if.end20.i
                                        #   in Loop: Header=BB35_92 Depth=3
	movq	32(%rbx), %rbp
	testq	%rbp, %rbp
	je	.LBB35_94
	jmp	.LBB35_119
	.p2align	4, 0x90
.LBB35_95:                              # %CONTINUE.i
                                        #   in Loop: Header=BB35_9 Depth=1
	movq	88(%r9), %rsi
	cmpq	%rax, %r10
	movq	%rsi, 40(%rsp)          # 8-byte Spill
	je	.LBB35_102
# %bb.96:                               # %while.body.lr.ph.i
                                        #   in Loop: Header=BB35_9 Depth=1
	movq	%r8, %rsi
	movq	40(%rsp), %r13          # 8-byte Reload
	movq	%rdi, %r9
	negq	%rsi
	movq	%rsi, 96(%rsp)          # 8-byte Spill
	movq	16(%rsp), %rsi          # 8-byte Reload
	.p2align	4, 0x90
.LBB35_97:                              # %while.body.i
                                        #   Parent Loop BB35_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rsi, 112(%rsp)         # 8-byte Spill
	movq	%r10, %rsi
	movq	24(%r10), %r10
	movq	%r13, 120(%rsp)         # 8-byte Spill
	movzbl	%dl, %r13d
	movq	32(%rsi), %rbp
	testq	%rbp, %rbp
	je	.LBB35_99
# %bb.98:                               # %if.then28.i
                                        #   in Loop: Header=BB35_97 Depth=2
	movq	40(%rsi), %rbx
	movq	%rbx, 40(%rbp)
.LBB35_99:                              # %if.end31.i
                                        #   in Loop: Header=BB35_97 Depth=2
	movq	40(%rsi), %rbx
	andl	$1, %r13d
	leaq	16(%r10), %rdx
	testq	%rbx, %rbx
	leaq	32(%rbx), %rbx
	cmoveq	%rdx, %rbx
	movq	%rbp, (%rbx)
	movq	%r9, 24(%rsi)
	movq	16(%r9), %rbp
	testq	%rbp, %rbp
	movq	%rbp, 32(%rsi)
	je	.LBB35_101
# %bb.100:                              # %if.then47.i
                                        #   in Loop: Header=BB35_97 Depth=2
	movq	%rsi, 40(%rbp)
.LBB35_101:                             # %if.end50.i
                                        #   in Loop: Header=BB35_97 Depth=2
	cmpq	$0, 8(%rsp)             # 8-byte Folded Reload
	movq	%rsi, 16(%r9)
	movq	$0, 40(%rsi)
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	48(%rsi), %rbp
	sete	%bl
	cmpl	$0, 8(%rsi)
	movq	%rbp, 104(%rsp)         # 8-byte Spill
	sete	%dl
	xorb	%dl, %bl
	movq	%r8, %rbx
	cmovneq	96(%rsp), %rbx          # 8-byte Folded Reload
	addq	80(%rsi), %rbx
	movl	%r13d, 8(%rsi)
	movq	%r11, 80(%rsi)
	movq	%r9, 48(%rsi)
	movq	40(%rsp), %r9           # 8-byte Reload
	movq	120(%rsp), %r11         # 8-byte Reload
	subq	88(%rsi), %r9
	cmpq	%rax, %r10
	movq	%r11, 88(%rsi)
	movq	%rbx, %r11
	movq	%r9, %r13
	movq	%rsi, %r9
	movq	104(%rsp), %rsi         # 8-byte Reload
	jne	.LBB35_97
.LBB35_102:                             # %while.end.i
                                        #   in Loop: Header=BB35_9 Depth=1
	cmpq	80(%rsp), %r8           # 8-byte Folded Reload
	jle	.LBB35_103
# %bb.109:                              # %for.cond.preheader.i
                                        #   in Loop: Header=BB35_9 Depth=1
	movq	72(%rsp), %r10          # 8-byte Reload
	movq	40(%rsp), %rbx          # 8-byte Reload
	cmpq	%rcx, %rax
	je	.LBB35_112
# %bb.110:                              # %for.body.lr.ph.i
                                        #   in Loop: Header=BB35_9 Depth=1
	movq	%r8, %rsi
	negq	%rsi
	.p2align	4, 0x90
.LBB35_111:                             # %for.body.i179
                                        #   Parent Loop BB35_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	subq	%rbx, 88(%rax)
	movq	%r8, %rdx
	movslq	8(%rax), %rbp
	cmpq	%r10, %rbp
	cmoveq	%rsi, %rdx
	addq	%rdx, 80(%rax)
	movq	24(%rax), %rax
	cmpq	%rcx, %rax
	jne	.LBB35_111
.LBB35_112:                             # %for.cond89.preheader.i
                                        #   in Loop: Header=BB35_9 Depth=1
	movl	4(%rsp), %r13d          # 4-byte Reload
	movq	16(%rsp), %r9           # 8-byte Reload
	movq	56(%rsp), %rbp          # 8-byte Reload
	movl	28(%rsp), %esi          # 4-byte Reload
	cmpq	%rcx, %rdi
	je	.LBB35_106
# %bb.113:                              # %for.body92.lr.ph.i
                                        #   in Loop: Header=BB35_9 Depth=1
	movq	%r8, %rax
	negq	%rax
	.p2align	4, 0x90
.LBB35_114:                             # %for.body92.i
                                        #   Parent Loop BB35_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addq	%rbx, 88(%rdi)
	movq	%rax, %r11
	movslq	8(%rdi), %rdx
	cmpq	%r10, %rdx
	cmoveq	%r8, %r11
	addq	%r11, 80(%rdi)
	movq	24(%rdi), %rdi
	cmpq	%rcx, %rdi
	jne	.LBB35_114
	jmp	.LBB35_106
	.p2align	4, 0x90
.LBB35_69:                              #   in Loop: Header=BB35_9 Depth=1
	movl	$1, %r8d
	movq	%rax, %rcx
	jmp	.LBB35_86
	.p2align	4, 0x90
.LBB35_85:                              #   in Loop: Header=BB35_9 Depth=1
	movq	16(%rsp), %rbp          # 8-byte Reload
.LBB35_86:                              # %if.then57
                                        #   in Loop: Header=BB35_9 Depth=1
	movq	32(%rsp), %rdx          # 8-byte Reload
	movl	4(%rsp), %r13d          # 4-byte Reload
	xorl	%esi, %esi
	movl	$2, %edi
	incq	616(%rdx)
	cmpw	$2, 32(%rbp)
	sete	%sil
	subl	%esi, %edi
	testq	%r8, %r8
	movw	%di, 32(%rbp)
	jne	.LBB35_87
	jmp	.LBB35_107
	.p2align	4, 0x90
.LBB35_118:                             # %for.body.i187
                                        #   in Loop: Header=BB35_87 Depth=2
	xorl	%edx, %edx
	cmpl	$0, 8(%rax)
	sete	%dl
	movq	%rdx, 80(%rax)
	movq	24(%rax), %rax
.LBB35_87:                              # %if.then68
                                        #   Parent Loop BB35_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	%rcx, %rax
	jne	.LBB35_118
	jmp	.LBB35_88
	.p2align	4, 0x90
.LBB35_89:                              # %for.body4.i
                                        #   in Loop: Header=BB35_88 Depth=2
	xorl	%eax, %eax
	cmpl	$0, 8(%r10)
	setne	%al
	movq	%rax, 80(%r10)
	movq	24(%r10), %r10
.LBB35_88:                              # %for.cond2.preheader.i
                                        #   Parent Loop BB35_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	%rcx, %r10
	jne	.LBB35_89
.LBB35_107:                             # %if.end99
                                        #   in Loop: Header=BB35_9 Depth=1
	cmpb	$0, opt(%rip)
	je	.LBB35_108
	jmp	.LBB35_117
.LBB35_103:                             # %for.cond110.preheader.i
                                        #   in Loop: Header=BB35_9 Depth=1
	movq	40(%rsp), %rdx          # 8-byte Reload
	cmpq	%rcx, %rax
	je	.LBB35_104
	.p2align	4, 0x90
.LBB35_115:                             # %for.body113.i
                                        #   Parent Loop BB35_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	subq	%rdx, 88(%rax)
	movq	24(%rax), %rax
	cmpq	%rcx, %rax
	jne	.LBB35_115
.LBB35_104:                             # %for.cond119.preheader.i
                                        #   in Loop: Header=BB35_9 Depth=1
	movl	4(%rsp), %r13d          # 4-byte Reload
	movq	16(%rsp), %r9           # 8-byte Reload
	movq	56(%rsp), %rbp          # 8-byte Reload
	movl	28(%rsp), %esi          # 4-byte Reload
	cmpq	%rcx, %rdi
	je	.LBB35_106
	.p2align	4, 0x90
.LBB35_105:                             # %for.body122.i
                                        #   Parent Loop BB35_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	addq	%rdx, 88(%rdi)
	movq	24(%rdi), %rdi
	cmpq	%rcx, %rdi
	jne	.LBB35_105
.LBB35_106:                             # %update_tree.exit
                                        #   in Loop: Header=BB35_9 Depth=1
	movw	$0, 32(%r9)
	movw	%si, 32(%rbp)
	cmpb	$0, opt(%rip)
	je	.LBB35_108
	jmp	.LBB35_117
.LBB35_116:                             # %if.end99.thread
	movb	$1, opt(%rip)
.LBB35_117:                             # %while.end
	addq	$32616, %rsp            # imm = 0x7F68
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%r12
	.cfi_def_cfa_offset 40
	popq	%r13
	.cfi_def_cfa_offset 32
	popq	%r14
	.cfi_def_cfa_offset 24
	popq	%r15
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	vzeroupper
	retq
.Lfunc_end35:
	.size	master, .Lfunc_end35-master
	.cfi_endproc
                                        # -- End function
	.globl	set_static_vars         # -- Begin function set_static_vars
	.p2align	4, 0x90
	.type	set_static_vars,@function
set_static_vars:                        # @set_static_vars
	.cfi_startproc
# %bb.0:                                # %entry
	movq	640(%rdi), %rax
	imulq	632(%rdi), %rax
	leaq	(%rax,%rax,8), %rax
	leaq	(%rsi,%rax,8), %rax
	movq	%rax, full_group_end_arc(%rip)
	retq
.Lfunc_end36:
	.size	set_static_vars, .Lfunc_end36-set_static_vars
	.cfi_endproc
                                        # -- End function
	.globl	bea_is_dual_infeasible  # -- Begin function bea_is_dual_infeasible
	.p2align	4, 0x90
	.type	bea_is_dual_infeasible,@function
bea_is_dual_infeasible:                 # @bea_is_dual_infeasible
	.cfi_startproc
# %bb.0:                                # %entry
	xorl	%eax, %eax
	testq	%rsi, %rsi
	js	.LBB37_4
# %bb.1:                                # %lor.rhs
	testq	%rsi, %rsi
	je	.LBB37_3
# %bb.2:                                # %land.rhs
	cmpw	$2, 32(%rdi)
	sete	%al
.LBB37_3:                               # %lor.end
	retq
.LBB37_4:                               # %land.lhs.true
	cmpw	$1, 32(%rdi)
	sete	%al
	retq
.Lfunc_end37:
	.size	bea_is_dual_infeasible, .Lfunc_end37-bea_is_dual_infeasible
	.cfi_endproc
                                        # -- End function
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"active arcs                : %ld\n"
	.size	.L.str, 34

	.type	net,@object             # @net
	.comm	net,648,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"simplex iterations         : %ld\n"
	.size	.L.str.1, 34

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"objective value            : %0.0f\n"
	.size	.L.str.2, 36

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"erased arcs                : %ld\n"
	.size	.L.str.4, 34

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"new implicit arcs          : %ld\n"
	.size	.L.str.5, 34

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"checksum                   : %0.0f\n"
	.size	.L.str.6, 36

	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"mcf.%d.out"
	.size	.L.str.13, 11

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"nodes                      : %ld\n"
	.size	.L.str.16, 34

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"ORG_COST: %f"
	.size	.L.str.18, 13

	.type	.L.str.19,@object       # @.str.19
.L.str.19:
	.asciz	"PRIMAL NETWORK SIMPLEX: "
	.size	.L.str.19, 25

	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.asciz	"artificial arc with nonzero flow, node %d (%ld)\n"
	.size	.L.str.20, 49

	.type	.L.str.21,@object       # @.str.21
.L.str.21:
	.asciz	"basis primal infeasible (%ld)\n"
	.size	.L.str.21, 31

	.type	.L.str.22,@object       # @.str.22
.L.str.22:
	.asciz	"DUAL NETWORK SIMPLEX: "
	.size	.L.str.22, 23

	.type	.L.str.23,@object       # @.str.23
.L.str.23:
	.asciz	"basis dual infeasible\n"
	.size	.L.str.23, 23

	.type	.L.str.24,@object       # @.str.24
.L.str.24:
	.asciz	"r"
	.size	.L.str.24, 2

	.type	.L.str.25,@object       # @.str.25
.L.str.25:
	.asciz	"%ld %ld"
	.size	.L.str.25, 8

	.type	.L.str.27,@object       # @.str.27
.L.str.27:
	.asciz	"%ld %ld %ld"
	.size	.L.str.27, 12

	.type	.L.str.28,@object       # @.str.28
.L.str.28:
	.asciz	"network %s: not enough memory\n"
	.size	.L.str.28, 31

	.type	.L.str.29,@object       # @.str.29
.L.str.29:
	.asciz	"w"
	.size	.L.str.29, 2

	.type	.L.str.30,@object       # @.str.30
.L.str.30:
	.asciz	"()\n"
	.size	.L.str.30, 4

	.type	.L.str.31,@object       # @.str.31
.L.str.31:
	.asciz	"***\n"
	.size	.L.str.31, 5

	.type	.L.str.32,@object       # @.str.32
.L.str.32:
	.asciz	"%d\n"
	.size	.L.str.32, 4

	.type	.L.str.33,@object       # @.str.33
.L.str.33:
	.asciz	"%.0f\n"
	.size	.L.str.33, 6

	.type	perm_p,@object          # @perm_p
	.local	perm_p
	.comm	perm_p,8,8
	.type	basket_sizes,@object    # @basket_sizes
	.local	basket_sizes
	.comm	basket_sizes,8,8
	.type	basket,@object          # @basket
	.local	basket
	.comm	basket,8,8
	.type	opt,@object             # @opt
	.local	opt
	.comm	opt,1,8
	.type	opt_basket,@object      # @opt_basket
	.local	opt_basket
	.comm	opt_basket,8,8
	.type	full_group_end_arc,@object # @full_group_end_arc
	.local	full_group_end_arc
	.comm	full_group_end_arc,8,8
	.type	.Lstr.34,@object        # @str.34
.Lstr.34:
	.asciz	"not enough memory, exit(-1)"
	.size	.Lstr.34, 28

	.type	.Lstr.35,@object        # @str.35
.Lstr.35:
	.asciz	"\nMCF SPEC CPU version 1.11"
	.size	.Lstr.35, 27

	.type	.Lstr.36,@object        # @str.36
.Lstr.36:
	.asciz	"Copyright (c) 1998-2000 Zuse Institut Berlin (ZIB)"
	.size	.Lstr.36, 51

	.type	.Lstr.37,@object        # @str.37
.Lstr.37:
	.asciz	"Copyright (c) 2000-2002 Andreas Loebel & ZIB"
	.size	.Lstr.37, 45

	.type	.Lstr.38,@object        # @str.38
.Lstr.38:
	.asciz	"Copyright (c) 2003-2005 Andreas Loebel"
	.size	.Lstr.38, 39

	.type	.Lstr.39,@object        # @str.39
.Lstr.39:
	.asciz	"Copyright (c) 2006-2010 Dres. Loebel, Borndoerfer & Weider GbR (LBW)"
	.size	.Lstr.39, 69

	.type	.Lstr.40,@object        # @str.40
.Lstr.40:
	.asciz	"done"
	.size	.Lstr.40, 5

	.type	.Lstr.41,@object        # @str.41
.Lstr.41:
	.asciz	"read error, exit"
	.size	.Lstr.41, 17

	.type	.Lstr.42,@object        # @str.42
.Lstr.42:
	.asciz	"read_min(): not enough memory"
	.size	.Lstr.42, 30


	.ident	"AOCC.LLVM.2.0.0.B191.2019_07_19 clang version 8.0.0 (CLANG: Jenkins AOCC_2_0_0-Build#191) (based on LLVM AOCC.LLVM.2.0.0.B191.2019_07_19)"
	.section	".note.GNU-stack","",@progbits
